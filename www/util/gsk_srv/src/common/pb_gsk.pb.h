// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk.proto

#ifndef PROTOBUF_pb_5fgsk_2eproto__INCLUDED
#define PROTOBUF_pb_5fgsk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fgsk_2eproto();
void protobuf_AssignDesc_pb_5fgsk_2eproto();
void protobuf_ShutdownFile_pb_5fgsk_2eproto();

class pb_clt_t_friend;
class pb_clt_t_recommend_friend;
class pb_clt_t_group_user;
class pb_clt_t_group_item;
class pb_clt_t_group_details;
class pb_clt_t_group;
class pb_clt_t_version;
class pb_clt_t_user;
class pb_im_t_msg_attach;
class pb_im_t_msg_task;
class pb_im_t_msg_item;
class pb_im_t_msg;
class pb_prj_t_user;
class pb_prj_t_feed;
class pb_prj_t_task;
class pb_prj_t_task_report;
class pb_prj_t_task_view;
class pb_prj_t_task_details;
class pb_prj_t_info;
class pb_prj_t_log;
class pb_prj_t_over_view;
class pb_prj_t_prj;
class pb_prj_t_recommend_info;
class pb_prj_t_recommend_prj;
class pb_prj_t_details;
class pb_user_t_info;
class pb_user_t_extra;
class pb_user_t_friend;
class pb_user_t_recommend_friend;
class pb_user_t_phone_address;
class pb_user_t_im_group;
class pb_user_t_prj;
class pb_user_t_data;

// ===================================================================

class pb_clt_t_friend : public ::google::protobuf::Message {
 public:
  pb_clt_t_friend();
  virtual ~pb_clt_t_friend();

  pb_clt_t_friend(const pb_clt_t_friend& from);

  inline pb_clt_t_friend& operator=(const pb_clt_t_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_friend& default_instance();

  void Swap(pb_clt_t_friend* other);

  // implements Message ----------------------------------------------

  pb_clt_t_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_friend& from);
  void MergeFrom(const pb_clt_t_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // repeated .pb_user_t_friend f_friends = 2;
  inline int f_friends_size() const;
  inline void clear_f_friends();
  static const int kFFriendsFieldNumber = 2;
  inline const ::pb_user_t_friend& f_friends(int index) const;
  inline ::pb_user_t_friend* mutable_f_friends(int index);
  inline ::pb_user_t_friend* add_f_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
      f_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
      mutable_f_friends();

  // @@protoc_insertion_point(class_scope:pb_clt_t_friend)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend > f_friends_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_friend* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_recommend_friend : public ::google::protobuf::Message {
 public:
  pb_clt_t_recommend_friend();
  virtual ~pb_clt_t_recommend_friend();

  pb_clt_t_recommend_friend(const pb_clt_t_recommend_friend& from);

  inline pb_clt_t_recommend_friend& operator=(const pb_clt_t_recommend_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_recommend_friend& default_instance();

  void Swap(pb_clt_t_recommend_friend* other);

  // implements Message ----------------------------------------------

  pb_clt_t_recommend_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_recommend_friend& from);
  void MergeFrom(const pb_clt_t_recommend_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
  inline int f_recommend_friends_size() const;
  inline void clear_f_recommend_friends();
  static const int kFRecommendFriendsFieldNumber = 2;
  inline const ::pb_user_t_recommend_friend& f_recommend_friends(int index) const;
  inline ::pb_user_t_recommend_friend* mutable_f_recommend_friends(int index);
  inline ::pb_user_t_recommend_friend* add_f_recommend_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >&
      f_recommend_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >*
      mutable_f_recommend_friends();

  // @@protoc_insertion_point(class_scope:pb_clt_t_recommend_friend)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend > f_recommend_friends_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_recommend_friend* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_group_user : public ::google::protobuf::Message {
 public:
  pb_clt_t_group_user();
  virtual ~pb_clt_t_group_user();

  pb_clt_t_group_user(const pb_clt_t_group_user& from);

  inline pb_clt_t_group_user& operator=(const pb_clt_t_group_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_group_user& default_instance();

  void Swap(pb_clt_t_group_user* other);

  // implements Message ----------------------------------------------

  pb_clt_t_group_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_group_user& from);
  void MergeFrom(const pb_clt_t_group_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_remark = 3;
  inline bool has_f_remark() const;
  inline void clear_f_remark();
  static const int kFRemarkFieldNumber = 3;
  inline const ::std::string& f_remark() const;
  inline void set_f_remark(const ::std::string& value);
  inline void set_f_remark(const char* value);
  inline void set_f_remark(const char* value, size_t size);
  inline ::std::string* mutable_f_remark();
  inline ::std::string* release_f_remark();
  inline void set_allocated_f_remark(::std::string* f_remark);

  // optional int32 f_title = 4;
  inline bool has_f_title() const;
  inline void clear_f_title();
  static const int kFTitleFieldNumber = 4;
  inline ::google::protobuf::int32 f_title() const;
  inline void set_f_title(::google::protobuf::int32 value);

  // optional string f_initial = 5;
  inline bool has_f_initial() const;
  inline void clear_f_initial();
  static const int kFInitialFieldNumber = 5;
  inline const ::std::string& f_initial() const;
  inline void set_f_initial(const ::std::string& value);
  inline void set_f_initial(const char* value);
  inline void set_f_initial(const char* value, size_t size);
  inline ::std::string* mutable_f_initial();
  inline ::std::string* release_f_initial();
  inline void set_allocated_f_initial(::std::string* f_initial);

  // optional int32 f_weight = 6;
  inline bool has_f_weight() const;
  inline void clear_f_weight();
  static const int kFWeightFieldNumber = 6;
  inline ::google::protobuf::int32 f_weight() const;
  inline void set_f_weight(::google::protobuf::int32 value);

  // optional string f_name_pinyin = 7;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 7;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // optional string f_name_pinyin_j = 8;
  inline bool has_f_name_pinyin_j() const;
  inline void clear_f_name_pinyin_j();
  static const int kFNamePinyinJFieldNumber = 8;
  inline const ::std::string& f_name_pinyin_j() const;
  inline void set_f_name_pinyin_j(const ::std::string& value);
  inline void set_f_name_pinyin_j(const char* value);
  inline void set_f_name_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin_j();
  inline ::std::string* release_f_name_pinyin_j();
  inline void set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j);

  // @@protoc_insertion_point(class_scope:pb_clt_t_group_user)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_remark();
  inline void clear_has_f_remark();
  inline void set_has_f_title();
  inline void clear_has_f_title();
  inline void set_has_f_initial();
  inline void clear_has_f_initial();
  inline void set_has_f_weight();
  inline void clear_has_f_weight();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();
  inline void set_has_f_name_pinyin_j();
  inline void clear_has_f_name_pinyin_j();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::int32 f_title_;
  ::std::string* f_remark_;
  ::std::string* f_initial_;
  ::std::string* f_name_pinyin_;
  ::std::string* f_name_pinyin_j_;
  ::google::protobuf::int32 f_weight_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_group_user* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_group_item : public ::google::protobuf::Message {
 public:
  pb_clt_t_group_item();
  virtual ~pb_clt_t_group_item();

  pb_clt_t_group_item(const pb_clt_t_group_item& from);

  inline pb_clt_t_group_item& operator=(const pb_clt_t_group_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_group_item& default_instance();

  void Swap(pb_clt_t_group_item* other);

  // implements Message ----------------------------------------------

  pb_clt_t_group_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_group_item& from);
  void MergeFrom(const pb_clt_t_group_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_group_id = 1;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 1;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional string f_group_name = 2;
  inline bool has_f_group_name() const;
  inline void clear_f_group_name();
  static const int kFGroupNameFieldNumber = 2;
  inline const ::std::string& f_group_name() const;
  inline void set_f_group_name(const ::std::string& value);
  inline void set_f_group_name(const char* value);
  inline void set_f_group_name(const char* value, size_t size);
  inline ::std::string* mutable_f_group_name();
  inline ::std::string* release_f_group_name();
  inline void set_allocated_f_group_name(::std::string* f_group_name);

  // optional string f_group_desc = 3;
  inline bool has_f_group_desc() const;
  inline void clear_f_group_desc();
  static const int kFGroupDescFieldNumber = 3;
  inline const ::std::string& f_group_desc() const;
  inline void set_f_group_desc(const ::std::string& value);
  inline void set_f_group_desc(const char* value);
  inline void set_f_group_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_group_desc();
  inline ::std::string* release_f_group_desc();
  inline void set_allocated_f_group_desc(::std::string* f_group_desc);

  // optional int32 f_group_type = 4;
  inline bool has_f_group_type() const;
  inline void clear_f_group_type();
  static const int kFGroupTypeFieldNumber = 4;
  inline ::google::protobuf::int32 f_group_type() const;
  inline void set_f_group_type(::google::protobuf::int32 value);

  // optional int32 f_seq = 5;
  inline bool has_f_seq() const;
  inline void clear_f_seq();
  static const int kFSeqFieldNumber = 5;
  inline ::google::protobuf::int32 f_seq() const;
  inline void set_f_seq(::google::protobuf::int32 value);

  // optional string f_last_msg = 6;
  inline bool has_f_last_msg() const;
  inline void clear_f_last_msg();
  static const int kFLastMsgFieldNumber = 6;
  inline const ::std::string& f_last_msg() const;
  inline void set_f_last_msg(const ::std::string& value);
  inline void set_f_last_msg(const char* value);
  inline void set_f_last_msg(const char* value, size_t size);
  inline ::std::string* mutable_f_last_msg();
  inline ::std::string* release_f_last_msg();
  inline void set_allocated_f_last_msg(::std::string* f_last_msg);

  // optional int32 f_last_msg_time = 7;
  inline bool has_f_last_msg_time() const;
  inline void clear_f_last_msg_time();
  static const int kFLastMsgTimeFieldNumber = 7;
  inline ::google::protobuf::int32 f_last_msg_time() const;
  inline void set_f_last_msg_time(::google::protobuf::int32 value);

  // optional int32 f_last_msg_type = 8;
  inline bool has_f_last_msg_type() const;
  inline void clear_f_last_msg_type();
  static const int kFLastMsgTypeFieldNumber = 8;
  inline ::google::protobuf::int32 f_last_msg_type() const;
  inline void set_f_last_msg_type(::google::protobuf::int32 value);

  // optional int32 f_last_sender_id = 9;
  inline bool has_f_last_sender_id() const;
  inline void clear_f_last_sender_id();
  static const int kFLastSenderIdFieldNumber = 9;
  inline ::google::protobuf::int32 f_last_sender_id() const;
  inline void set_f_last_sender_id(::google::protobuf::int32 value);

  // optional string f_last_sender_name = 10;
  inline bool has_f_last_sender_name() const;
  inline void clear_f_last_sender_name();
  static const int kFLastSenderNameFieldNumber = 10;
  inline const ::std::string& f_last_sender_name() const;
  inline void set_f_last_sender_name(const ::std::string& value);
  inline void set_f_last_sender_name(const char* value);
  inline void set_f_last_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_f_last_sender_name();
  inline ::std::string* release_f_last_sender_name();
  inline void set_allocated_f_last_sender_name(::std::string* f_last_sender_name);

  // repeated string f_avatar = 11;
  inline int f_avatar_size() const;
  inline void clear_f_avatar();
  static const int kFAvatarFieldNumber = 11;
  inline const ::std::string& f_avatar(int index) const;
  inline ::std::string* mutable_f_avatar(int index);
  inline void set_f_avatar(int index, const ::std::string& value);
  inline void set_f_avatar(int index, const char* value);
  inline void set_f_avatar(int index, const char* value, size_t size);
  inline ::std::string* add_f_avatar();
  inline void add_f_avatar(const ::std::string& value);
  inline void add_f_avatar(const char* value);
  inline void add_f_avatar(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& f_avatar() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_f_avatar();

  // optional int32 f_is_screen = 12;
  inline bool has_f_is_screen() const;
  inline void clear_f_is_screen();
  static const int kFIsScreenFieldNumber = 12;
  inline ::google::protobuf::int32 f_is_screen() const;
  inline void set_f_is_screen(::google::protobuf::int32 value);

  // optional int32 f_is_remind = 13;
  inline bool has_f_is_remind() const;
  inline void clear_f_is_remind();
  static const int kFIsRemindFieldNumber = 13;
  inline ::google::protobuf::int32 f_is_remind() const;
  inline void set_f_is_remind(::google::protobuf::int32 value);

  // optional string f_remark = 14;
  inline bool has_f_remark() const;
  inline void clear_f_remark();
  static const int kFRemarkFieldNumber = 14;
  inline const ::std::string& f_remark() const;
  inline void set_f_remark(const ::std::string& value);
  inline void set_f_remark(const char* value);
  inline void set_f_remark(const char* value, size_t size);
  inline ::std::string* mutable_f_remark();
  inline ::std::string* release_f_remark();
  inline void set_allocated_f_remark(::std::string* f_remark);

  // optional string f_initial = 15;
  inline bool has_f_initial() const;
  inline void clear_f_initial();
  static const int kFInitialFieldNumber = 15;
  inline const ::std::string& f_initial() const;
  inline void set_f_initial(const ::std::string& value);
  inline void set_f_initial(const char* value);
  inline void set_f_initial(const char* value, size_t size);
  inline ::std::string* mutable_f_initial();
  inline ::std::string* release_f_initial();
  inline void set_allocated_f_initial(::std::string* f_initial);

  // optional int32 f_weight = 16;
  inline bool has_f_weight() const;
  inline void clear_f_weight();
  static const int kFWeightFieldNumber = 16;
  inline ::google::protobuf::int32 f_weight() const;
  inline void set_f_weight(::google::protobuf::int32 value);

  // optional string f_name_pinyin = 17;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 17;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // optional string f_name_pinyin_j = 18;
  inline bool has_f_name_pinyin_j() const;
  inline void clear_f_name_pinyin_j();
  static const int kFNamePinyinJFieldNumber = 18;
  inline const ::std::string& f_name_pinyin_j() const;
  inline void set_f_name_pinyin_j(const ::std::string& value);
  inline void set_f_name_pinyin_j(const char* value);
  inline void set_f_name_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin_j();
  inline ::std::string* release_f_name_pinyin_j();
  inline void set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j);

  // optional int32 f_member_count = 19;
  inline bool has_f_member_count() const;
  inline void clear_f_member_count();
  static const int kFMemberCountFieldNumber = 19;
  inline ::google::protobuf::int32 f_member_count() const;
  inline void set_f_member_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_clt_t_group_item)
 private:
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_group_name();
  inline void clear_has_f_group_name();
  inline void set_has_f_group_desc();
  inline void clear_has_f_group_desc();
  inline void set_has_f_group_type();
  inline void clear_has_f_group_type();
  inline void set_has_f_seq();
  inline void clear_has_f_seq();
  inline void set_has_f_last_msg();
  inline void clear_has_f_last_msg();
  inline void set_has_f_last_msg_time();
  inline void clear_has_f_last_msg_time();
  inline void set_has_f_last_msg_type();
  inline void clear_has_f_last_msg_type();
  inline void set_has_f_last_sender_id();
  inline void clear_has_f_last_sender_id();
  inline void set_has_f_last_sender_name();
  inline void clear_has_f_last_sender_name();
  inline void set_has_f_is_screen();
  inline void clear_has_f_is_screen();
  inline void set_has_f_is_remind();
  inline void clear_has_f_is_remind();
  inline void set_has_f_remark();
  inline void clear_has_f_remark();
  inline void set_has_f_initial();
  inline void clear_has_f_initial();
  inline void set_has_f_weight();
  inline void clear_has_f_weight();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();
  inline void set_has_f_name_pinyin_j();
  inline void clear_has_f_name_pinyin_j();
  inline void set_has_f_member_count();
  inline void clear_has_f_member_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_group_id_;
  ::std::string* f_group_name_;
  ::std::string* f_group_desc_;
  ::google::protobuf::int32 f_group_type_;
  ::google::protobuf::int32 f_seq_;
  ::std::string* f_last_msg_;
  ::google::protobuf::int32 f_last_msg_time_;
  ::google::protobuf::int32 f_last_msg_type_;
  ::std::string* f_last_sender_name_;
  ::google::protobuf::int32 f_last_sender_id_;
  ::google::protobuf::int32 f_is_screen_;
  ::google::protobuf::RepeatedPtrField< ::std::string> f_avatar_;
  ::std::string* f_remark_;
  ::google::protobuf::int32 f_is_remind_;
  ::google::protobuf::int32 f_weight_;
  ::std::string* f_initial_;
  ::std::string* f_name_pinyin_;
  ::std::string* f_name_pinyin_j_;
  ::google::protobuf::int32 f_member_count_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_group_item* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_group_details : public ::google::protobuf::Message {
 public:
  pb_clt_t_group_details();
  virtual ~pb_clt_t_group_details();

  pb_clt_t_group_details(const pb_clt_t_group_details& from);

  inline pb_clt_t_group_details& operator=(const pb_clt_t_group_details& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_group_details& default_instance();

  void Swap(pb_clt_t_group_details* other);

  // implements Message ----------------------------------------------

  pb_clt_t_group_details* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_group_details& from);
  void MergeFrom(const pb_clt_t_group_details& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_clt_t_group_item f_group_info = 1;
  inline bool has_f_group_info() const;
  inline void clear_f_group_info();
  static const int kFGroupInfoFieldNumber = 1;
  inline const ::pb_clt_t_group_item& f_group_info() const;
  inline ::pb_clt_t_group_item* mutable_f_group_info();
  inline ::pb_clt_t_group_item* release_f_group_info();
  inline void set_allocated_f_group_info(::pb_clt_t_group_item* f_group_info);

  // repeated .pb_clt_t_group_user f_members = 2;
  inline int f_members_size() const;
  inline void clear_f_members();
  static const int kFMembersFieldNumber = 2;
  inline const ::pb_clt_t_group_user& f_members(int index) const;
  inline ::pb_clt_t_group_user* mutable_f_members(int index);
  inline ::pb_clt_t_group_user* add_f_members();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_user >&
      f_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_user >*
      mutable_f_members();

  // @@protoc_insertion_point(class_scope:pb_clt_t_group_details)
 private:
  inline void set_has_f_group_info();
  inline void clear_has_f_group_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_clt_t_group_item* f_group_info_;
  ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_user > f_members_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_group_details* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_group : public ::google::protobuf::Message {
 public:
  pb_clt_t_group();
  virtual ~pb_clt_t_group();

  pb_clt_t_group(const pb_clt_t_group& from);

  inline pb_clt_t_group& operator=(const pb_clt_t_group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_group& default_instance();

  void Swap(pb_clt_t_group* other);

  // implements Message ----------------------------------------------

  pb_clt_t_group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_group& from);
  void MergeFrom(const pb_clt_t_group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // optional string f_last_update_gid = 2;
  inline bool has_f_last_update_gid() const;
  inline void clear_f_last_update_gid();
  static const int kFLastUpdateGidFieldNumber = 2;
  inline const ::std::string& f_last_update_gid() const;
  inline void set_f_last_update_gid(const ::std::string& value);
  inline void set_f_last_update_gid(const char* value);
  inline void set_f_last_update_gid(const char* value, size_t size);
  inline ::std::string* mutable_f_last_update_gid();
  inline ::std::string* release_f_last_update_gid();
  inline void set_allocated_f_last_update_gid(::std::string* f_last_update_gid);

  // repeated .pb_clt_t_group_item f_im_group = 3;
  inline int f_im_group_size() const;
  inline void clear_f_im_group();
  static const int kFImGroupFieldNumber = 3;
  inline const ::pb_clt_t_group_item& f_im_group(int index) const;
  inline ::pb_clt_t_group_item* mutable_f_im_group(int index);
  inline ::pb_clt_t_group_item* add_f_im_group();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_item >&
      f_im_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_item >*
      mutable_f_im_group();

  // @@protoc_insertion_point(class_scope:pb_clt_t_group)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();
  inline void set_has_f_last_update_gid();
  inline void clear_has_f_last_update_gid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_last_update_gid_;
  ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_item > f_im_group_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_group* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_version : public ::google::protobuf::Message {
 public:
  pb_clt_t_version();
  virtual ~pb_clt_t_version();

  pb_clt_t_version(const pb_clt_t_version& from);

  inline pb_clt_t_version& operator=(const pb_clt_t_version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_version& default_instance();

  void Swap(pb_clt_t_version* other);

  // implements Message ----------------------------------------------

  pb_clt_t_version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_version& from);
  void MergeFrom(const pb_clt_t_version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_version_id = 1;
  inline bool has_f_version_id() const;
  inline void clear_f_version_id();
  static const int kFVersionIdFieldNumber = 1;
  inline ::google::protobuf::int32 f_version_id() const;
  inline void set_f_version_id(::google::protobuf::int32 value);

  // optional string f_version_msg = 2;
  inline bool has_f_version_msg() const;
  inline void clear_f_version_msg();
  static const int kFVersionMsgFieldNumber = 2;
  inline const ::std::string& f_version_msg() const;
  inline void set_f_version_msg(const ::std::string& value);
  inline void set_f_version_msg(const char* value);
  inline void set_f_version_msg(const char* value, size_t size);
  inline ::std::string* mutable_f_version_msg();
  inline ::std::string* release_f_version_msg();
  inline void set_allocated_f_version_msg(::std::string* f_version_msg);

  // @@protoc_insertion_point(class_scope:pb_clt_t_version)
 private:
  inline void set_has_f_version_id();
  inline void clear_has_f_version_id();
  inline void set_has_f_version_msg();
  inline void clear_has_f_version_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_version_msg_;
  ::google::protobuf::int32 f_version_id_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_version* default_instance_;
};
// -------------------------------------------------------------------

class pb_clt_t_user : public ::google::protobuf::Message {
 public:
  pb_clt_t_user();
  virtual ~pb_clt_t_user();

  pb_clt_t_user(const pb_clt_t_user& from);

  inline pb_clt_t_user& operator=(const pb_clt_t_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_user& default_instance();

  void Swap(pb_clt_t_user* other);

  // implements Message ----------------------------------------------

  pb_clt_t_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_user& from);
  void MergeFrom(const pb_clt_t_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_user_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_user_t_info& f_info() const;
  inline ::pb_user_t_info* mutable_f_info();
  inline ::pb_user_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_user_t_info* f_info);

  // optional .pb_clt_t_friend f_friend_list = 2;
  inline bool has_f_friend_list() const;
  inline void clear_f_friend_list();
  static const int kFFriendListFieldNumber = 2;
  inline const ::pb_clt_t_friend& f_friend_list() const;
  inline ::pb_clt_t_friend* mutable_f_friend_list();
  inline ::pb_clt_t_friend* release_f_friend_list();
  inline void set_allocated_f_friend_list(::pb_clt_t_friend* f_friend_list);

  // optional .pb_clt_t_friend f_search_friend_list = 3;
  inline bool has_f_search_friend_list() const;
  inline void clear_f_search_friend_list();
  static const int kFSearchFriendListFieldNumber = 3;
  inline const ::pb_clt_t_friend& f_search_friend_list() const;
  inline ::pb_clt_t_friend* mutable_f_search_friend_list();
  inline ::pb_clt_t_friend* release_f_search_friend_list();
  inline void set_allocated_f_search_friend_list(::pb_clt_t_friend* f_search_friend_list);

  // optional .pb_clt_t_friend f_validation_friend_list = 4;
  inline bool has_f_validation_friend_list() const;
  inline void clear_f_validation_friend_list();
  static const int kFValidationFriendListFieldNumber = 4;
  inline const ::pb_clt_t_friend& f_validation_friend_list() const;
  inline ::pb_clt_t_friend* mutable_f_validation_friend_list();
  inline ::pb_clt_t_friend* release_f_validation_friend_list();
  inline void set_allocated_f_validation_friend_list(::pb_clt_t_friend* f_validation_friend_list);

  // optional .pb_clt_t_friend f_recommend_friend_list = 5;
  inline bool has_f_recommend_friend_list() const;
  inline void clear_f_recommend_friend_list();
  static const int kFRecommendFriendListFieldNumber = 5;
  inline const ::pb_clt_t_friend& f_recommend_friend_list() const;
  inline ::pb_clt_t_friend* mutable_f_recommend_friend_list();
  inline ::pb_clt_t_friend* release_f_recommend_friend_list();
  inline void set_allocated_f_recommend_friend_list(::pb_clt_t_friend* f_recommend_friend_list);

  // optional .pb_clt_t_group f_im_group = 6;
  inline bool has_f_im_group() const;
  inline void clear_f_im_group();
  static const int kFImGroupFieldNumber = 6;
  inline const ::pb_clt_t_group& f_im_group() const;
  inline ::pb_clt_t_group* mutable_f_im_group();
  inline ::pb_clt_t_group* release_f_im_group();
  inline void set_allocated_f_im_group(::pb_clt_t_group* f_im_group);

  // optional .pb_user_t_info f_friend_info = 7;
  inline bool has_f_friend_info() const;
  inline void clear_f_friend_info();
  static const int kFFriendInfoFieldNumber = 7;
  inline const ::pb_user_t_info& f_friend_info() const;
  inline ::pb_user_t_info* mutable_f_friend_info();
  inline ::pb_user_t_info* release_f_friend_info();
  inline void set_allocated_f_friend_info(::pb_user_t_info* f_friend_info);

  // optional .pb_im_t_msg f_im_msg = 8;
  inline bool has_f_im_msg() const;
  inline void clear_f_im_msg();
  static const int kFImMsgFieldNumber = 8;
  inline const ::pb_im_t_msg& f_im_msg() const;
  inline ::pb_im_t_msg* mutable_f_im_msg();
  inline ::pb_im_t_msg* release_f_im_msg();
  inline void set_allocated_f_im_msg(::pb_im_t_msg* f_im_msg);

  // optional .pb_clt_t_group_details f_im_group_details = 9;
  inline bool has_f_im_group_details() const;
  inline void clear_f_im_group_details();
  static const int kFImGroupDetailsFieldNumber = 9;
  inline const ::pb_clt_t_group_details& f_im_group_details() const;
  inline ::pb_clt_t_group_details* mutable_f_im_group_details();
  inline ::pb_clt_t_group_details* release_f_im_group_details();
  inline void set_allocated_f_im_group_details(::pb_clt_t_group_details* f_im_group_details);

  // optional .pb_prj_t_prj f_prj_list = 10;
  inline bool has_f_prj_list() const;
  inline void clear_f_prj_list();
  static const int kFPrjListFieldNumber = 10;
  inline const ::pb_prj_t_prj& f_prj_list() const;
  inline ::pb_prj_t_prj* mutable_f_prj_list();
  inline ::pb_prj_t_prj* release_f_prj_list();
  inline void set_allocated_f_prj_list(::pb_prj_t_prj* f_prj_list);

  // optional .pb_prj_t_details f_prj_details = 11;
  inline bool has_f_prj_details() const;
  inline void clear_f_prj_details();
  static const int kFPrjDetailsFieldNumber = 11;
  inline const ::pb_prj_t_details& f_prj_details() const;
  inline ::pb_prj_t_details* mutable_f_prj_details();
  inline ::pb_prj_t_details* release_f_prj_details();
  inline void set_allocated_f_prj_details(::pb_prj_t_details* f_prj_details);

  // optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 12;
  inline bool has_f_n_recommend_friend_list() const;
  inline void clear_f_n_recommend_friend_list();
  static const int kFNRecommendFriendListFieldNumber = 12;
  inline const ::pb_clt_t_recommend_friend& f_n_recommend_friend_list() const;
  inline ::pb_clt_t_recommend_friend* mutable_f_n_recommend_friend_list();
  inline ::pb_clt_t_recommend_friend* release_f_n_recommend_friend_list();
  inline void set_allocated_f_n_recommend_friend_list(::pb_clt_t_recommend_friend* f_n_recommend_friend_list);

  // optional .pb_prj_t_recommend_prj f_recommend_prj_list = 13;
  inline bool has_f_recommend_prj_list() const;
  inline void clear_f_recommend_prj_list();
  static const int kFRecommendPrjListFieldNumber = 13;
  inline const ::pb_prj_t_recommend_prj& f_recommend_prj_list() const;
  inline ::pb_prj_t_recommend_prj* mutable_f_recommend_prj_list();
  inline ::pb_prj_t_recommend_prj* release_f_recommend_prj_list();
  inline void set_allocated_f_recommend_prj_list(::pb_prj_t_recommend_prj* f_recommend_prj_list);

  // repeated .pb_prj_t_user f_prj_user = 14;
  inline int f_prj_user_size() const;
  inline void clear_f_prj_user();
  static const int kFPrjUserFieldNumber = 14;
  inline const ::pb_prj_t_user& f_prj_user(int index) const;
  inline ::pb_prj_t_user* mutable_f_prj_user(int index);
  inline ::pb_prj_t_user* add_f_prj_user();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
      f_prj_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
      mutable_f_prj_user();

  // repeated .pb_prj_t_user f_prj_join_user = 15;
  inline int f_prj_join_user_size() const;
  inline void clear_f_prj_join_user();
  static const int kFPrjJoinUserFieldNumber = 15;
  inline const ::pb_prj_t_user& f_prj_join_user(int index) const;
  inline ::pb_prj_t_user* mutable_f_prj_join_user(int index);
  inline ::pb_prj_t_user* add_f_prj_join_user();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
      f_prj_join_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
      mutable_f_prj_join_user();

  // optional .pb_prj_t_over_view f_prj_over_view = 16;
  inline bool has_f_prj_over_view() const;
  inline void clear_f_prj_over_view();
  static const int kFPrjOverViewFieldNumber = 16;
  inline const ::pb_prj_t_over_view& f_prj_over_view() const;
  inline ::pb_prj_t_over_view* mutable_f_prj_over_view();
  inline ::pb_prj_t_over_view* release_f_prj_over_view();
  inline void set_allocated_f_prj_over_view(::pb_prj_t_over_view* f_prj_over_view);

  // optional .pb_clt_t_version f_version = 17;
  inline bool has_f_version() const;
  inline void clear_f_version();
  static const int kFVersionFieldNumber = 17;
  inline const ::pb_clt_t_version& f_version() const;
  inline ::pb_clt_t_version* mutable_f_version();
  inline ::pb_clt_t_version* release_f_version();
  inline void set_allocated_f_version(::pb_clt_t_version* f_version);

  // @@protoc_insertion_point(class_scope:pb_clt_t_user)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();
  inline void set_has_f_friend_list();
  inline void clear_has_f_friend_list();
  inline void set_has_f_search_friend_list();
  inline void clear_has_f_search_friend_list();
  inline void set_has_f_validation_friend_list();
  inline void clear_has_f_validation_friend_list();
  inline void set_has_f_recommend_friend_list();
  inline void clear_has_f_recommend_friend_list();
  inline void set_has_f_im_group();
  inline void clear_has_f_im_group();
  inline void set_has_f_friend_info();
  inline void clear_has_f_friend_info();
  inline void set_has_f_im_msg();
  inline void clear_has_f_im_msg();
  inline void set_has_f_im_group_details();
  inline void clear_has_f_im_group_details();
  inline void set_has_f_prj_list();
  inline void clear_has_f_prj_list();
  inline void set_has_f_prj_details();
  inline void clear_has_f_prj_details();
  inline void set_has_f_n_recommend_friend_list();
  inline void clear_has_f_n_recommend_friend_list();
  inline void set_has_f_recommend_prj_list();
  inline void clear_has_f_recommend_prj_list();
  inline void set_has_f_prj_over_view();
  inline void clear_has_f_prj_over_view();
  inline void set_has_f_version();
  inline void clear_has_f_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_user_t_info* f_info_;
  ::pb_clt_t_friend* f_friend_list_;
  ::pb_clt_t_friend* f_search_friend_list_;
  ::pb_clt_t_friend* f_validation_friend_list_;
  ::pb_clt_t_friend* f_recommend_friend_list_;
  ::pb_clt_t_group* f_im_group_;
  ::pb_user_t_info* f_friend_info_;
  ::pb_im_t_msg* f_im_msg_;
  ::pb_clt_t_group_details* f_im_group_details_;
  ::pb_prj_t_prj* f_prj_list_;
  ::pb_prj_t_details* f_prj_details_;
  ::pb_clt_t_recommend_friend* f_n_recommend_friend_list_;
  ::pb_prj_t_recommend_prj* f_recommend_prj_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user > f_prj_user_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user > f_prj_join_user_;
  ::pb_prj_t_over_view* f_prj_over_view_;
  ::pb_clt_t_version* f_version_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_user* default_instance_;
};
// -------------------------------------------------------------------

class pb_im_t_msg_attach : public ::google::protobuf::Message {
 public:
  pb_im_t_msg_attach();
  virtual ~pb_im_t_msg_attach();

  pb_im_t_msg_attach(const pb_im_t_msg_attach& from);

  inline pb_im_t_msg_attach& operator=(const pb_im_t_msg_attach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_im_t_msg_attach& default_instance();

  void Swap(pb_im_t_msg_attach* other);

  // implements Message ----------------------------------------------

  pb_im_t_msg_attach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_im_t_msg_attach& from);
  void MergeFrom(const pb_im_t_msg_attach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_attach_name = 1;
  inline bool has_f_attach_name() const;
  inline void clear_f_attach_name();
  static const int kFAttachNameFieldNumber = 1;
  inline const ::std::string& f_attach_name() const;
  inline void set_f_attach_name(const ::std::string& value);
  inline void set_f_attach_name(const char* value);
  inline void set_f_attach_name(const char* value, size_t size);
  inline ::std::string* mutable_f_attach_name();
  inline ::std::string* release_f_attach_name();
  inline void set_allocated_f_attach_name(::std::string* f_attach_name);

  // optional int32 f_attach_type = 2;
  inline bool has_f_attach_type() const;
  inline void clear_f_attach_type();
  static const int kFAttachTypeFieldNumber = 2;
  inline ::google::protobuf::int32 f_attach_type() const;
  inline void set_f_attach_type(::google::protobuf::int32 value);

  // optional string f_attach_url = 3;
  inline bool has_f_attach_url() const;
  inline void clear_f_attach_url();
  static const int kFAttachUrlFieldNumber = 3;
  inline const ::std::string& f_attach_url() const;
  inline void set_f_attach_url(const ::std::string& value);
  inline void set_f_attach_url(const char* value);
  inline void set_f_attach_url(const char* value, size_t size);
  inline ::std::string* mutable_f_attach_url();
  inline ::std::string* release_f_attach_url();
  inline void set_allocated_f_attach_url(::std::string* f_attach_url);

  // optional int32 f_attach_size = 4;
  inline bool has_f_attach_size() const;
  inline void clear_f_attach_size();
  static const int kFAttachSizeFieldNumber = 4;
  inline ::google::protobuf::int32 f_attach_size() const;
  inline void set_f_attach_size(::google::protobuf::int32 value);

  // optional int32 f_attach_playtime = 5;
  inline bool has_f_attach_playtime() const;
  inline void clear_f_attach_playtime();
  static const int kFAttachPlaytimeFieldNumber = 5;
  inline ::google::protobuf::int32 f_attach_playtime() const;
  inline void set_f_attach_playtime(::google::protobuf::int32 value);

  // optional int32 f_attach_uploadtime = 6;
  inline bool has_f_attach_uploadtime() const;
  inline void clear_f_attach_uploadtime();
  static const int kFAttachUploadtimeFieldNumber = 6;
  inline ::google::protobuf::int32 f_attach_uploadtime() const;
  inline void set_f_attach_uploadtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_im_t_msg_attach)
 private:
  inline void set_has_f_attach_name();
  inline void clear_has_f_attach_name();
  inline void set_has_f_attach_type();
  inline void clear_has_f_attach_type();
  inline void set_has_f_attach_url();
  inline void clear_has_f_attach_url();
  inline void set_has_f_attach_size();
  inline void clear_has_f_attach_size();
  inline void set_has_f_attach_playtime();
  inline void clear_has_f_attach_playtime();
  inline void set_has_f_attach_uploadtime();
  inline void clear_has_f_attach_uploadtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_attach_name_;
  ::std::string* f_attach_url_;
  ::google::protobuf::int32 f_attach_type_;
  ::google::protobuf::int32 f_attach_size_;
  ::google::protobuf::int32 f_attach_playtime_;
  ::google::protobuf::int32 f_attach_uploadtime_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_im_t_msg_attach* default_instance_;
};
// -------------------------------------------------------------------

class pb_im_t_msg_task : public ::google::protobuf::Message {
 public:
  pb_im_t_msg_task();
  virtual ~pb_im_t_msg_task();

  pb_im_t_msg_task(const pb_im_t_msg_task& from);

  inline pb_im_t_msg_task& operator=(const pb_im_t_msg_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_im_t_msg_task& default_instance();

  void Swap(pb_im_t_msg_task* other);

  // implements Message ----------------------------------------------

  pb_im_t_msg_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_im_t_msg_task& from);
  void MergeFrom(const pb_im_t_msg_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_task_id = 1;
  inline bool has_f_task_id() const;
  inline void clear_f_task_id();
  static const int kFTaskIdFieldNumber = 1;
  inline const ::std::string& f_task_id() const;
  inline void set_f_task_id(const ::std::string& value);
  inline void set_f_task_id(const char* value);
  inline void set_f_task_id(const char* value, size_t size);
  inline ::std::string* mutable_f_task_id();
  inline ::std::string* release_f_task_id();
  inline void set_allocated_f_task_id(::std::string* f_task_id);

  // optional string f_prj_id = 2;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 2;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional int32 f_task_type = 3;
  inline bool has_f_task_type() const;
  inline void clear_f_task_type();
  static const int kFTaskTypeFieldNumber = 3;
  inline ::google::protobuf::int32 f_task_type() const;
  inline void set_f_task_type(::google::protobuf::int32 value);

  // optional string f_task_desc = 4;
  inline bool has_f_task_desc() const;
  inline void clear_f_task_desc();
  static const int kFTaskDescFieldNumber = 4;
  inline const ::std::string& f_task_desc() const;
  inline void set_f_task_desc(const ::std::string& value);
  inline void set_f_task_desc(const char* value);
  inline void set_f_task_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_task_desc();
  inline ::std::string* release_f_task_desc();
  inline void set_allocated_f_task_desc(::std::string* f_task_desc);

  // optional int32 f_task_desc_type = 5;
  inline bool has_f_task_desc_type() const;
  inline void clear_f_task_desc_type();
  static const int kFTaskDescTypeFieldNumber = 5;
  inline ::google::protobuf::int32 f_task_desc_type() const;
  inline void set_f_task_desc_type(::google::protobuf::int32 value);

  // optional string f_position = 6;
  inline bool has_f_position() const;
  inline void clear_f_position();
  static const int kFPositionFieldNumber = 6;
  inline const ::std::string& f_position() const;
  inline void set_f_position(const ::std::string& value);
  inline void set_f_position(const char* value);
  inline void set_f_position(const char* value, size_t size);
  inline ::std::string* mutable_f_position();
  inline ::std::string* release_f_position();
  inline void set_allocated_f_position(::std::string* f_position);

  // repeated int32 f_receiver_uin = 7;
  inline int f_receiver_uin_size() const;
  inline void clear_f_receiver_uin();
  static const int kFReceiverUinFieldNumber = 7;
  inline ::google::protobuf::int32 f_receiver_uin(int index) const;
  inline void set_f_receiver_uin(int index, ::google::protobuf::int32 value);
  inline void add_f_receiver_uin(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      f_receiver_uin() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_f_receiver_uin();

  // optional int32 f_operate_type = 8;
  inline bool has_f_operate_type() const;
  inline void clear_f_operate_type();
  static const int kFOperateTypeFieldNumber = 8;
  inline ::google::protobuf::int32 f_operate_type() const;
  inline void set_f_operate_type(::google::protobuf::int32 value);

  // optional string f_assign_desc = 9;
  inline bool has_f_assign_desc() const;
  inline void clear_f_assign_desc();
  static const int kFAssignDescFieldNumber = 9;
  inline const ::std::string& f_assign_desc() const;
  inline void set_f_assign_desc(const ::std::string& value);
  inline void set_f_assign_desc(const char* value);
  inline void set_f_assign_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_assign_desc();
  inline ::std::string* release_f_assign_desc();
  inline void set_allocated_f_assign_desc(::std::string* f_assign_desc);

  // optional int32 f_task_end = 10;
  inline bool has_f_task_end() const;
  inline void clear_f_task_end();
  static const int kFTaskEndFieldNumber = 10;
  inline ::google::protobuf::int32 f_task_end() const;
  inline void set_f_task_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_im_t_msg_task)
 private:
  inline void set_has_f_task_id();
  inline void clear_has_f_task_id();
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_task_type();
  inline void clear_has_f_task_type();
  inline void set_has_f_task_desc();
  inline void clear_has_f_task_desc();
  inline void set_has_f_task_desc_type();
  inline void clear_has_f_task_desc_type();
  inline void set_has_f_position();
  inline void clear_has_f_position();
  inline void set_has_f_operate_type();
  inline void clear_has_f_operate_type();
  inline void set_has_f_assign_desc();
  inline void clear_has_f_assign_desc();
  inline void set_has_f_task_end();
  inline void clear_has_f_task_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_task_id_;
  ::std::string* f_prj_id_;
  ::std::string* f_task_desc_;
  ::google::protobuf::int32 f_task_type_;
  ::google::protobuf::int32 f_task_desc_type_;
  ::std::string* f_position_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > f_receiver_uin_;
  ::std::string* f_assign_desc_;
  ::google::protobuf::int32 f_operate_type_;
  ::google::protobuf::int32 f_task_end_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_im_t_msg_task* default_instance_;
};
// -------------------------------------------------------------------

class pb_im_t_msg_item : public ::google::protobuf::Message {
 public:
  pb_im_t_msg_item();
  virtual ~pb_im_t_msg_item();

  pb_im_t_msg_item(const pb_im_t_msg_item& from);

  inline pb_im_t_msg_item& operator=(const pb_im_t_msg_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_im_t_msg_item& default_instance();

  void Swap(pb_im_t_msg_item* other);

  // implements Message ----------------------------------------------

  pb_im_t_msg_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_im_t_msg_item& from);
  void MergeFrom(const pb_im_t_msg_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_msg_id = 1;
  inline bool has_f_msg_id() const;
  inline void clear_f_msg_id();
  static const int kFMsgIdFieldNumber = 1;
  inline const ::std::string& f_msg_id() const;
  inline void set_f_msg_id(const ::std::string& value);
  inline void set_f_msg_id(const char* value);
  inline void set_f_msg_id(const char* value, size_t size);
  inline ::std::string* mutable_f_msg_id();
  inline ::std::string* release_f_msg_id();
  inline void set_allocated_f_msg_id(::std::string* f_msg_id);

  // optional uint32 f_msg_type = 2;
  inline bool has_f_msg_type() const;
  inline void clear_f_msg_type();
  static const int kFMsgTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 f_msg_type() const;
  inline void set_f_msg_type(::google::protobuf::uint32 value);

  // optional string f_msg_body = 3;
  inline bool has_f_msg_body() const;
  inline void clear_f_msg_body();
  static const int kFMsgBodyFieldNumber = 3;
  inline const ::std::string& f_msg_body() const;
  inline void set_f_msg_body(const ::std::string& value);
  inline void set_f_msg_body(const char* value);
  inline void set_f_msg_body(const char* value, size_t size);
  inline ::std::string* mutable_f_msg_body();
  inline ::std::string* release_f_msg_body();
  inline void set_allocated_f_msg_body(::std::string* f_msg_body);

  // optional int32 f_sender_id = 4;
  inline bool has_f_sender_id() const;
  inline void clear_f_sender_id();
  static const int kFSenderIdFieldNumber = 4;
  inline ::google::protobuf::int32 f_sender_id() const;
  inline void set_f_sender_id(::google::protobuf::int32 value);

  // optional string f_sender_name = 5;
  inline bool has_f_sender_name() const;
  inline void clear_f_sender_name();
  static const int kFSenderNameFieldNumber = 5;
  inline const ::std::string& f_sender_name() const;
  inline void set_f_sender_name(const ::std::string& value);
  inline void set_f_sender_name(const char* value);
  inline void set_f_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_name();
  inline ::std::string* release_f_sender_name();
  inline void set_allocated_f_sender_name(::std::string* f_sender_name);

  // optional string f_sender_remark = 6;
  inline bool has_f_sender_remark() const;
  inline void clear_f_sender_remark();
  static const int kFSenderRemarkFieldNumber = 6;
  inline const ::std::string& f_sender_remark() const;
  inline void set_f_sender_remark(const ::std::string& value);
  inline void set_f_sender_remark(const char* value);
  inline void set_f_sender_remark(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_remark();
  inline ::std::string* release_f_sender_remark();
  inline void set_allocated_f_sender_remark(::std::string* f_sender_remark);

  // optional string f_sender_avatar = 7;
  inline bool has_f_sender_avatar() const;
  inline void clear_f_sender_avatar();
  static const int kFSenderAvatarFieldNumber = 7;
  inline const ::std::string& f_sender_avatar() const;
  inline void set_f_sender_avatar(const ::std::string& value);
  inline void set_f_sender_avatar(const char* value);
  inline void set_f_sender_avatar(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_avatar();
  inline ::std::string* release_f_sender_avatar();
  inline void set_allocated_f_sender_avatar(::std::string* f_sender_avatar);

  // optional string f_group_id = 8;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 8;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional uint32 f_group_type = 9;
  inline bool has_f_group_type() const;
  inline void clear_f_group_type();
  static const int kFGroupTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 f_group_type() const;
  inline void set_f_group_type(::google::protobuf::uint32 value);

  // optional string f_group_name = 10;
  inline bool has_f_group_name() const;
  inline void clear_f_group_name();
  static const int kFGroupNameFieldNumber = 10;
  inline const ::std::string& f_group_name() const;
  inline void set_f_group_name(const ::std::string& value);
  inline void set_f_group_name(const char* value);
  inline void set_f_group_name(const char* value, size_t size);
  inline ::std::string* mutable_f_group_name();
  inline ::std::string* release_f_group_name();
  inline void set_allocated_f_group_name(::std::string* f_group_name);

  // optional string f_group_desc = 11;
  inline bool has_f_group_desc() const;
  inline void clear_f_group_desc();
  static const int kFGroupDescFieldNumber = 11;
  inline const ::std::string& f_group_desc() const;
  inline void set_f_group_desc(const ::std::string& value);
  inline void set_f_group_desc(const char* value);
  inline void set_f_group_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_group_desc();
  inline ::std::string* release_f_group_desc();
  inline void set_allocated_f_group_desc(::std::string* f_group_desc);

  // optional int32 f_send_time = 12;
  inline bool has_f_send_time() const;
  inline void clear_f_send_time();
  static const int kFSendTimeFieldNumber = 12;
  inline ::google::protobuf::int32 f_send_time() const;
  inline void set_f_send_time(::google::protobuf::int32 value);

  // optional int32 f_msg_seq_id = 13;
  inline bool has_f_msg_seq_id() const;
  inline void clear_f_msg_seq_id();
  static const int kFMsgSeqIdFieldNumber = 13;
  inline ::google::protobuf::int32 f_msg_seq_id() const;
  inline void set_f_msg_seq_id(::google::protobuf::int32 value);

  // repeated .pb_im_t_msg_attach f_attch = 14;
  inline int f_attch_size() const;
  inline void clear_f_attch();
  static const int kFAttchFieldNumber = 14;
  inline const ::pb_im_t_msg_attach& f_attch(int index) const;
  inline ::pb_im_t_msg_attach* mutable_f_attch(int index);
  inline ::pb_im_t_msg_attach* add_f_attch();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
      f_attch() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
      mutable_f_attch();

  // optional .pb_im_t_msg_task f_msg_task = 15;
  inline bool has_f_msg_task() const;
  inline void clear_f_msg_task();
  static const int kFMsgTaskFieldNumber = 15;
  inline const ::pb_im_t_msg_task& f_msg_task() const;
  inline ::pb_im_t_msg_task* mutable_f_msg_task();
  inline ::pb_im_t_msg_task* release_f_msg_task();
  inline void set_allocated_f_msg_task(::pb_im_t_msg_task* f_msg_task);

  // @@protoc_insertion_point(class_scope:pb_im_t_msg_item)
 private:
  inline void set_has_f_msg_id();
  inline void clear_has_f_msg_id();
  inline void set_has_f_msg_type();
  inline void clear_has_f_msg_type();
  inline void set_has_f_msg_body();
  inline void clear_has_f_msg_body();
  inline void set_has_f_sender_id();
  inline void clear_has_f_sender_id();
  inline void set_has_f_sender_name();
  inline void clear_has_f_sender_name();
  inline void set_has_f_sender_remark();
  inline void clear_has_f_sender_remark();
  inline void set_has_f_sender_avatar();
  inline void clear_has_f_sender_avatar();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_group_type();
  inline void clear_has_f_group_type();
  inline void set_has_f_group_name();
  inline void clear_has_f_group_name();
  inline void set_has_f_group_desc();
  inline void clear_has_f_group_desc();
  inline void set_has_f_send_time();
  inline void clear_has_f_send_time();
  inline void set_has_f_msg_seq_id();
  inline void clear_has_f_msg_seq_id();
  inline void set_has_f_msg_task();
  inline void clear_has_f_msg_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_msg_id_;
  ::std::string* f_msg_body_;
  ::google::protobuf::uint32 f_msg_type_;
  ::google::protobuf::int32 f_sender_id_;
  ::std::string* f_sender_name_;
  ::std::string* f_sender_remark_;
  ::std::string* f_sender_avatar_;
  ::std::string* f_group_id_;
  ::std::string* f_group_name_;
  ::google::protobuf::uint32 f_group_type_;
  ::google::protobuf::int32 f_send_time_;
  ::std::string* f_group_desc_;
  ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach > f_attch_;
  ::pb_im_t_msg_task* f_msg_task_;
  ::google::protobuf::int32 f_msg_seq_id_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_im_t_msg_item* default_instance_;
};
// -------------------------------------------------------------------

class pb_im_t_msg : public ::google::protobuf::Message {
 public:
  pb_im_t_msg();
  virtual ~pb_im_t_msg();

  pb_im_t_msg(const pb_im_t_msg& from);

  inline pb_im_t_msg& operator=(const pb_im_t_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_im_t_msg& default_instance();

  void Swap(pb_im_t_msg* other);

  // implements Message ----------------------------------------------

  pb_im_t_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_im_t_msg& from);
  void MergeFrom(const pb_im_t_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // optional string f_group_id = 2;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 2;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // repeated .pb_im_t_msg_item f_msg = 3;
  inline int f_msg_size() const;
  inline void clear_f_msg();
  static const int kFMsgFieldNumber = 3;
  inline const ::pb_im_t_msg_item& f_msg(int index) const;
  inline ::pb_im_t_msg_item* mutable_f_msg(int index);
  inline ::pb_im_t_msg_item* add_f_msg();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_item >&
      f_msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_item >*
      mutable_f_msg();

  // @@protoc_insertion_point(class_scope:pb_im_t_msg)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_group_id_;
  ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_item > f_msg_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_im_t_msg* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_user : public ::google::protobuf::Message {
 public:
  pb_prj_t_user();
  virtual ~pb_prj_t_user();

  pb_prj_t_user(const pb_prj_t_user& from);

  inline pb_prj_t_user& operator=(const pb_prj_t_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_user& default_instance();

  void Swap(pb_prj_t_user* other);

  // implements Message ----------------------------------------------

  pb_prj_t_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_user& from);
  void MergeFrom(const pb_prj_t_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_uid = 1;
  inline bool has_f_uid() const;
  inline void clear_f_uid();
  static const int kFUidFieldNumber = 1;
  inline ::google::protobuf::int32 f_uid() const;
  inline void set_f_uid(::google::protobuf::int32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_phone = 3;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 3;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional string f_job_type = 4;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 4;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional int32 f_add_time = 5;
  inline bool has_f_add_time() const;
  inline void clear_f_add_time();
  static const int kFAddTimeFieldNumber = 5;
  inline ::google::protobuf::int32 f_add_time() const;
  inline void set_f_add_time(::google::protobuf::int32 value);

  // optional int32 f_task_operate_status = 6;
  inline bool has_f_task_operate_status() const;
  inline void clear_f_task_operate_status();
  static const int kFTaskOperateStatusFieldNumber = 6;
  inline ::google::protobuf::int32 f_task_operate_status() const;
  inline void set_f_task_operate_status(::google::protobuf::int32 value);

  // optional string f_join_content = 7;
  inline bool has_f_join_content() const;
  inline void clear_f_join_content();
  static const int kFJoinContentFieldNumber = 7;
  inline const ::std::string& f_join_content() const;
  inline void set_f_join_content(const ::std::string& value);
  inline void set_f_join_content(const char* value);
  inline void set_f_join_content(const char* value, size_t size);
  inline ::std::string* mutable_f_join_content();
  inline ::std::string* release_f_join_content();
  inline void set_allocated_f_join_content(::std::string* f_join_content);

  // optional string f_name_pinyin = 8;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 8;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // @@protoc_insertion_point(class_scope:pb_prj_t_user)
 private:
  inline void set_has_f_uid();
  inline void clear_has_f_uid();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_add_time();
  inline void clear_has_f_add_time();
  inline void set_has_f_task_operate_status();
  inline void clear_has_f_task_operate_status();
  inline void set_has_f_join_content();
  inline void clear_has_f_join_content();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::std::string* f_phone_;
  ::google::protobuf::int32 f_uid_;
  ::google::protobuf::int32 f_add_time_;
  ::std::string* f_job_type_;
  ::std::string* f_join_content_;
  ::std::string* f_name_pinyin_;
  ::google::protobuf::int32 f_task_operate_status_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_user* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_feed : public ::google::protobuf::Message {
 public:
  pb_prj_t_feed();
  virtual ~pb_prj_t_feed();

  pb_prj_t_feed(const pb_prj_t_feed& from);

  inline pb_prj_t_feed& operator=(const pb_prj_t_feed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_feed& default_instance();

  void Swap(pb_prj_t_feed* other);

  // implements Message ----------------------------------------------

  pb_prj_t_feed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_feed& from);
  void MergeFrom(const pb_prj_t_feed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_time = 1;
  inline bool has_f_time() const;
  inline void clear_f_time();
  static const int kFTimeFieldNumber = 1;
  inline ::google::protobuf::int32 f_time() const;
  inline void set_f_time(::google::protobuf::int32 value);

  // optional string f_msg = 2;
  inline bool has_f_msg() const;
  inline void clear_f_msg();
  static const int kFMsgFieldNumber = 2;
  inline const ::std::string& f_msg() const;
  inline void set_f_msg(const ::std::string& value);
  inline void set_f_msg(const char* value);
  inline void set_f_msg(const char* value, size_t size);
  inline ::std::string* mutable_f_msg();
  inline ::std::string* release_f_msg();
  inline void set_allocated_f_msg(::std::string* f_msg);

  // @@protoc_insertion_point(class_scope:pb_prj_t_feed)
 private:
  inline void set_has_f_time();
  inline void clear_has_f_time();
  inline void set_has_f_msg();
  inline void clear_has_f_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_msg_;
  ::google::protobuf::int32 f_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_feed* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_task : public ::google::protobuf::Message {
 public:
  pb_prj_t_task();
  virtual ~pb_prj_t_task();

  pb_prj_t_task(const pb_prj_t_task& from);

  inline pb_prj_t_task& operator=(const pb_prj_t_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_task& default_instance();

  void Swap(pb_prj_t_task* other);

  // implements Message ----------------------------------------------

  pb_prj_t_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_task& from);
  void MergeFrom(const pb_prj_t_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_task_id = 1;
  inline bool has_f_task_id() const;
  inline void clear_f_task_id();
  static const int kFTaskIdFieldNumber = 1;
  inline const ::std::string& f_task_id() const;
  inline void set_f_task_id(const ::std::string& value);
  inline void set_f_task_id(const char* value);
  inline void set_f_task_id(const char* value, size_t size);
  inline ::std::string* mutable_f_task_id();
  inline ::std::string* release_f_task_id();
  inline void set_allocated_f_task_id(::std::string* f_task_id);

  // optional string f_prj_id = 2;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 2;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional int32 f_task_type = 3;
  inline bool has_f_task_type() const;
  inline void clear_f_task_type();
  static const int kFTaskTypeFieldNumber = 3;
  inline ::google::protobuf::int32 f_task_type() const;
  inline void set_f_task_type(::google::protobuf::int32 value);

  // optional string f_task_desc = 4;
  inline bool has_f_task_desc() const;
  inline void clear_f_task_desc();
  static const int kFTaskDescFieldNumber = 4;
  inline const ::std::string& f_task_desc() const;
  inline void set_f_task_desc(const ::std::string& value);
  inline void set_f_task_desc(const char* value);
  inline void set_f_task_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_task_desc();
  inline ::std::string* release_f_task_desc();
  inline void set_allocated_f_task_desc(::std::string* f_task_desc);

  // optional int32 f_task_desc_type = 5;
  inline bool has_f_task_desc_type() const;
  inline void clear_f_task_desc_type();
  static const int kFTaskDescTypeFieldNumber = 5;
  inline ::google::protobuf::int32 f_task_desc_type() const;
  inline void set_f_task_desc_type(::google::protobuf::int32 value);

  // optional .pb_prj_t_user f_sponsor = 6;
  inline bool has_f_sponsor() const;
  inline void clear_f_sponsor();
  static const int kFSponsorFieldNumber = 6;
  inline const ::pb_prj_t_user& f_sponsor() const;
  inline ::pb_prj_t_user* mutable_f_sponsor();
  inline ::pb_prj_t_user* release_f_sponsor();
  inline void set_allocated_f_sponsor(::pb_prj_t_user* f_sponsor);

  // repeated .pb_prj_t_user f_members = 7;
  inline int f_members_size() const;
  inline void clear_f_members();
  static const int kFMembersFieldNumber = 7;
  inline const ::pb_prj_t_user& f_members(int index) const;
  inline ::pb_prj_t_user* mutable_f_members(int index);
  inline ::pb_prj_t_user* add_f_members();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
      f_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
      mutable_f_members();

  // optional int32 f_task_status = 8;
  inline bool has_f_task_status() const;
  inline void clear_f_task_status();
  static const int kFTaskStatusFieldNumber = 8;
  inline ::google::protobuf::int32 f_task_status() const;
  inline void set_f_task_status(::google::protobuf::int32 value);

  // optional string f_position = 9;
  inline bool has_f_position() const;
  inline void clear_f_position();
  static const int kFPositionFieldNumber = 9;
  inline const ::std::string& f_position() const;
  inline void set_f_position(const ::std::string& value);
  inline void set_f_position(const char* value);
  inline void set_f_position(const char* value, size_t size);
  inline ::std::string* mutable_f_position();
  inline ::std::string* release_f_position();
  inline void set_allocated_f_position(::std::string* f_position);

  // repeated .pb_im_t_msg_attach f_attach_list = 10;
  inline int f_attach_list_size() const;
  inline void clear_f_attach_list();
  static const int kFAttachListFieldNumber = 10;
  inline const ::pb_im_t_msg_attach& f_attach_list(int index) const;
  inline ::pb_im_t_msg_attach* mutable_f_attach_list(int index);
  inline ::pb_im_t_msg_attach* add_f_attach_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
      f_attach_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
      mutable_f_attach_list();

  // optional int32 f_task_begin = 11;
  inline bool has_f_task_begin() const;
  inline void clear_f_task_begin();
  static const int kFTaskBeginFieldNumber = 11;
  inline ::google::protobuf::int32 f_task_begin() const;
  inline void set_f_task_begin(::google::protobuf::int32 value);

  // optional int32 f_task_end = 12;
  inline bool has_f_task_end() const;
  inline void clear_f_task_end();
  static const int kFTaskEndFieldNumber = 12;
  inline ::google::protobuf::int32 f_task_end() const;
  inline void set_f_task_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_prj_t_task)
 private:
  inline void set_has_f_task_id();
  inline void clear_has_f_task_id();
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_task_type();
  inline void clear_has_f_task_type();
  inline void set_has_f_task_desc();
  inline void clear_has_f_task_desc();
  inline void set_has_f_task_desc_type();
  inline void clear_has_f_task_desc_type();
  inline void set_has_f_sponsor();
  inline void clear_has_f_sponsor();
  inline void set_has_f_task_status();
  inline void clear_has_f_task_status();
  inline void set_has_f_position();
  inline void clear_has_f_position();
  inline void set_has_f_task_begin();
  inline void clear_has_f_task_begin();
  inline void set_has_f_task_end();
  inline void clear_has_f_task_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_task_id_;
  ::std::string* f_prj_id_;
  ::std::string* f_task_desc_;
  ::google::protobuf::int32 f_task_type_;
  ::google::protobuf::int32 f_task_desc_type_;
  ::pb_prj_t_user* f_sponsor_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user > f_members_;
  ::std::string* f_position_;
  ::google::protobuf::int32 f_task_status_;
  ::google::protobuf::int32 f_task_begin_;
  ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach > f_attach_list_;
  ::google::protobuf::int32 f_task_end_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_task* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_task_report : public ::google::protobuf::Message {
 public:
  pb_prj_t_task_report();
  virtual ~pb_prj_t_task_report();

  pb_prj_t_task_report(const pb_prj_t_task_report& from);

  inline pb_prj_t_task_report& operator=(const pb_prj_t_task_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_task_report& default_instance();

  void Swap(pb_prj_t_task_report* other);

  // implements Message ----------------------------------------------

  pb_prj_t_task_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_task_report& from);
  void MergeFrom(const pb_prj_t_task_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_report_id = 1;
  inline bool has_f_report_id() const;
  inline void clear_f_report_id();
  static const int kFReportIdFieldNumber = 1;
  inline const ::std::string& f_report_id() const;
  inline void set_f_report_id(const ::std::string& value);
  inline void set_f_report_id(const char* value);
  inline void set_f_report_id(const char* value, size_t size);
  inline ::std::string* mutable_f_report_id();
  inline ::std::string* release_f_report_id();
  inline void set_allocated_f_report_id(::std::string* f_report_id);

  // optional .pb_prj_t_user f_sponsor = 2;
  inline bool has_f_sponsor() const;
  inline void clear_f_sponsor();
  static const int kFSponsorFieldNumber = 2;
  inline const ::pb_prj_t_user& f_sponsor() const;
  inline ::pb_prj_t_user* mutable_f_sponsor();
  inline ::pb_prj_t_user* release_f_sponsor();
  inline void set_allocated_f_sponsor(::pb_prj_t_user* f_sponsor);

  // optional .pb_prj_t_user f_reply_to = 3;
  inline bool has_f_reply_to() const;
  inline void clear_f_reply_to();
  static const int kFReplyToFieldNumber = 3;
  inline const ::pb_prj_t_user& f_reply_to() const;
  inline ::pb_prj_t_user* mutable_f_reply_to();
  inline ::pb_prj_t_user* release_f_reply_to();
  inline void set_allocated_f_reply_to(::pb_prj_t_user* f_reply_to);

  // optional string f_title = 4;
  inline bool has_f_title() const;
  inline void clear_f_title();
  static const int kFTitleFieldNumber = 4;
  inline const ::std::string& f_title() const;
  inline void set_f_title(const ::std::string& value);
  inline void set_f_title(const char* value);
  inline void set_f_title(const char* value, size_t size);
  inline ::std::string* mutable_f_title();
  inline ::std::string* release_f_title();
  inline void set_allocated_f_title(::std::string* f_title);

  // optional string f_content = 5;
  inline bool has_f_content() const;
  inline void clear_f_content();
  static const int kFContentFieldNumber = 5;
  inline const ::std::string& f_content() const;
  inline void set_f_content(const ::std::string& value);
  inline void set_f_content(const char* value);
  inline void set_f_content(const char* value, size_t size);
  inline ::std::string* mutable_f_content();
  inline ::std::string* release_f_content();
  inline void set_allocated_f_content(::std::string* f_content);

  // optional int32 f_content_type = 6;
  inline bool has_f_content_type() const;
  inline void clear_f_content_type();
  static const int kFContentTypeFieldNumber = 6;
  inline ::google::protobuf::int32 f_content_type() const;
  inline void set_f_content_type(::google::protobuf::int32 value);

  // repeated .pb_im_t_msg_attach f_attach_list = 7;
  inline int f_attach_list_size() const;
  inline void clear_f_attach_list();
  static const int kFAttachListFieldNumber = 7;
  inline const ::pb_im_t_msg_attach& f_attach_list(int index) const;
  inline ::pb_im_t_msg_attach* mutable_f_attach_list(int index);
  inline ::pb_im_t_msg_attach* add_f_attach_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
      f_attach_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
      mutable_f_attach_list();

  // optional int32 f_report_time = 8;
  inline bool has_f_report_time() const;
  inline void clear_f_report_time();
  static const int kFReportTimeFieldNumber = 8;
  inline ::google::protobuf::int32 f_report_time() const;
  inline void set_f_report_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_prj_t_task_report)
 private:
  inline void set_has_f_report_id();
  inline void clear_has_f_report_id();
  inline void set_has_f_sponsor();
  inline void clear_has_f_sponsor();
  inline void set_has_f_reply_to();
  inline void clear_has_f_reply_to();
  inline void set_has_f_title();
  inline void clear_has_f_title();
  inline void set_has_f_content();
  inline void clear_has_f_content();
  inline void set_has_f_content_type();
  inline void clear_has_f_content_type();
  inline void set_has_f_report_time();
  inline void clear_has_f_report_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_report_id_;
  ::pb_prj_t_user* f_sponsor_;
  ::pb_prj_t_user* f_reply_to_;
  ::std::string* f_title_;
  ::std::string* f_content_;
  ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach > f_attach_list_;
  ::google::protobuf::int32 f_content_type_;
  ::google::protobuf::int32 f_report_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_task_report* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_task_view : public ::google::protobuf::Message {
 public:
  pb_prj_t_task_view();
  virtual ~pb_prj_t_task_view();

  pb_prj_t_task_view(const pb_prj_t_task_view& from);

  inline pb_prj_t_task_view& operator=(const pb_prj_t_task_view& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_task_view& default_instance();

  void Swap(pb_prj_t_task_view* other);

  // implements Message ----------------------------------------------

  pb_prj_t_task_view* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_task_view& from);
  void MergeFrom(const pb_prj_t_task_view& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::int32 f_uin() const;
  inline void set_f_uin(::google::protobuf::int32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_avatar = 3;
  inline bool has_f_avatar() const;
  inline void clear_f_avatar();
  static const int kFAvatarFieldNumber = 3;
  inline const ::std::string& f_avatar() const;
  inline void set_f_avatar(const ::std::string& value);
  inline void set_f_avatar(const char* value);
  inline void set_f_avatar(const char* value, size_t size);
  inline ::std::string* mutable_f_avatar();
  inline ::std::string* release_f_avatar();
  inline void set_allocated_f_avatar(::std::string* f_avatar);

  // optional int32 f_time = 4;
  inline bool has_f_time() const;
  inline void clear_f_time();
  static const int kFTimeFieldNumber = 4;
  inline ::google::protobuf::int32 f_time() const;
  inline void set_f_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_prj_t_task_view)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_avatar();
  inline void clear_has_f_avatar();
  inline void set_has_f_time();
  inline void clear_has_f_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::google::protobuf::int32 f_uin_;
  ::google::protobuf::int32 f_time_;
  ::std::string* f_avatar_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_task_view* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_task_details : public ::google::protobuf::Message {
 public:
  pb_prj_t_task_details();
  virtual ~pb_prj_t_task_details();

  pb_prj_t_task_details(const pb_prj_t_task_details& from);

  inline pb_prj_t_task_details& operator=(const pb_prj_t_task_details& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_task_details& default_instance();

  void Swap(pb_prj_t_task_details* other);

  // implements Message ----------------------------------------------

  pb_prj_t_task_details* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_task_details& from);
  void MergeFrom(const pb_prj_t_task_details& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_prj_t_task f_task = 1;
  inline bool has_f_task() const;
  inline void clear_f_task();
  static const int kFTaskFieldNumber = 1;
  inline const ::pb_prj_t_task& f_task() const;
  inline ::pb_prj_t_task* mutable_f_task();
  inline ::pb_prj_t_task* release_f_task();
  inline void set_allocated_f_task(::pb_prj_t_task* f_task);

  // repeated .pb_prj_t_task_report f_report_list = 2;
  inline int f_report_list_size() const;
  inline void clear_f_report_list();
  static const int kFReportListFieldNumber = 2;
  inline const ::pb_prj_t_task_report& f_report_list(int index) const;
  inline ::pb_prj_t_task_report* mutable_f_report_list(int index);
  inline ::pb_prj_t_task_report* add_f_report_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_report >&
      f_report_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_report >*
      mutable_f_report_list();

  // optional int32 f_report_count = 3;
  inline bool has_f_report_count() const;
  inline void clear_f_report_count();
  static const int kFReportCountFieldNumber = 3;
  inline ::google::protobuf::int32 f_report_count() const;
  inline void set_f_report_count(::google::protobuf::int32 value);

  // repeated .pb_prj_t_task_view f_view_list = 4;
  inline int f_view_list_size() const;
  inline void clear_f_view_list();
  static const int kFViewListFieldNumber = 4;
  inline const ::pb_prj_t_task_view& f_view_list(int index) const;
  inline ::pb_prj_t_task_view* mutable_f_view_list(int index);
  inline ::pb_prj_t_task_view* add_f_view_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_view >&
      f_view_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_view >*
      mutable_f_view_list();

  // optional int32 f_view_count = 5;
  inline bool has_f_view_count() const;
  inline void clear_f_view_count();
  static const int kFViewCountFieldNumber = 5;
  inline ::google::protobuf::int32 f_view_count() const;
  inline void set_f_view_count(::google::protobuf::int32 value);

  // repeated string f_position_list = 6;
  inline int f_position_list_size() const;
  inline void clear_f_position_list();
  static const int kFPositionListFieldNumber = 6;
  inline const ::std::string& f_position_list(int index) const;
  inline ::std::string* mutable_f_position_list(int index);
  inline void set_f_position_list(int index, const ::std::string& value);
  inline void set_f_position_list(int index, const char* value);
  inline void set_f_position_list(int index, const char* value, size_t size);
  inline ::std::string* add_f_position_list();
  inline void add_f_position_list(const ::std::string& value);
  inline void add_f_position_list(const char* value);
  inline void add_f_position_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& f_position_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_f_position_list();

  // @@protoc_insertion_point(class_scope:pb_prj_t_task_details)
 private:
  inline void set_has_f_task();
  inline void clear_has_f_task();
  inline void set_has_f_report_count();
  inline void clear_has_f_report_count();
  inline void set_has_f_view_count();
  inline void clear_has_f_view_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_prj_t_task* f_task_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_report > f_report_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_view > f_view_list_;
  ::google::protobuf::int32 f_report_count_;
  ::google::protobuf::int32 f_view_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> f_position_list_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_task_details* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_info : public ::google::protobuf::Message {
 public:
  pb_prj_t_info();
  virtual ~pb_prj_t_info();

  pb_prj_t_info(const pb_prj_t_info& from);

  inline pb_prj_t_info& operator=(const pb_prj_t_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_info& default_instance();

  void Swap(pb_prj_t_info* other);

  // implements Message ----------------------------------------------

  pb_prj_t_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_info& from);
  void MergeFrom(const pb_prj_t_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_prj_id = 1;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 1;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional string f_prj_name = 2;
  inline bool has_f_prj_name() const;
  inline void clear_f_prj_name();
  static const int kFPrjNameFieldNumber = 2;
  inline const ::std::string& f_prj_name() const;
  inline void set_f_prj_name(const ::std::string& value);
  inline void set_f_prj_name(const char* value);
  inline void set_f_prj_name(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_name();
  inline ::std::string* release_f_prj_name();
  inline void set_allocated_f_prj_name(::std::string* f_prj_name);

  // optional int32 f_prj_type = 3;
  inline bool has_f_prj_type() const;
  inline void clear_f_prj_type();
  static const int kFPrjTypeFieldNumber = 3;
  inline ::google::protobuf::int32 f_prj_type() const;
  inline void set_f_prj_type(::google::protobuf::int32 value);

  // optional string f_prj_image = 4;
  inline bool has_f_prj_image() const;
  inline void clear_f_prj_image();
  static const int kFPrjImageFieldNumber = 4;
  inline const ::std::string& f_prj_image() const;
  inline void set_f_prj_image(const ::std::string& value);
  inline void set_f_prj_image(const char* value);
  inline void set_f_prj_image(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_image();
  inline ::std::string* release_f_prj_image();
  inline void set_allocated_f_prj_image(::std::string* f_prj_image);

  // optional string f_group_id = 5;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 5;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional string f_province = 6;
  inline bool has_f_province() const;
  inline void clear_f_province();
  static const int kFProvinceFieldNumber = 6;
  inline const ::std::string& f_province() const;
  inline void set_f_province(const ::std::string& value);
  inline void set_f_province(const char* value);
  inline void set_f_province(const char* value, size_t size);
  inline ::std::string* mutable_f_province();
  inline ::std::string* release_f_province();
  inline void set_allocated_f_province(::std::string* f_province);

  // optional string f_city = 7;
  inline bool has_f_city() const;
  inline void clear_f_city();
  static const int kFCityFieldNumber = 7;
  inline const ::std::string& f_city() const;
  inline void set_f_city(const ::std::string& value);
  inline void set_f_city(const char* value);
  inline void set_f_city(const char* value, size_t size);
  inline ::std::string* mutable_f_city();
  inline ::std::string* release_f_city();
  inline void set_allocated_f_city(::std::string* f_city);

  // optional string f_prj_address = 8;
  inline bool has_f_prj_address() const;
  inline void clear_f_prj_address();
  static const int kFPrjAddressFieldNumber = 8;
  inline const ::std::string& f_prj_address() const;
  inline void set_f_prj_address(const ::std::string& value);
  inline void set_f_prj_address(const char* value);
  inline void set_f_prj_address(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_address();
  inline ::std::string* release_f_prj_address();
  inline void set_allocated_f_prj_address(::std::string* f_prj_address);

  // optional int32 f_member_count = 9;
  inline bool has_f_member_count() const;
  inline void clear_f_member_count();
  static const int kFMemberCountFieldNumber = 9;
  inline ::google::protobuf::int32 f_member_count() const;
  inline void set_f_member_count(::google::protobuf::int32 value);

  // optional int32 f_floor_area = 10;
  inline bool has_f_floor_area() const;
  inline void clear_f_floor_area();
  static const int kFFloorAreaFieldNumber = 10;
  inline ::google::protobuf::int32 f_floor_area() const;
  inline void set_f_floor_area(::google::protobuf::int32 value);

  // optional int32 f_prj_begin = 11;
  inline bool has_f_prj_begin() const;
  inline void clear_f_prj_begin();
  static const int kFPrjBeginFieldNumber = 11;
  inline ::google::protobuf::int32 f_prj_begin() const;
  inline void set_f_prj_begin(::google::protobuf::int32 value);

  // optional int32 f_prj_end = 12;
  inline bool has_f_prj_end() const;
  inline void clear_f_prj_end();
  static const int kFPrjEndFieldNumber = 12;
  inline ::google::protobuf::int32 f_prj_end() const;
  inline void set_f_prj_end(::google::protobuf::int32 value);

  // optional string f_jianzhu_danwei = 13;
  inline bool has_f_jianzhu_danwei() const;
  inline void clear_f_jianzhu_danwei();
  static const int kFJianzhuDanweiFieldNumber = 13;
  inline const ::std::string& f_jianzhu_danwei() const;
  inline void set_f_jianzhu_danwei(const ::std::string& value);
  inline void set_f_jianzhu_danwei(const char* value);
  inline void set_f_jianzhu_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_jianzhu_danwei();
  inline ::std::string* release_f_jianzhu_danwei();
  inline void set_allocated_f_jianzhu_danwei(::std::string* f_jianzhu_danwei);

  // optional string f_shigong_danwei = 14;
  inline bool has_f_shigong_danwei() const;
  inline void clear_f_shigong_danwei();
  static const int kFShigongDanweiFieldNumber = 14;
  inline const ::std::string& f_shigong_danwei() const;
  inline void set_f_shigong_danwei(const ::std::string& value);
  inline void set_f_shigong_danwei(const char* value);
  inline void set_f_shigong_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_shigong_danwei();
  inline ::std::string* release_f_shigong_danwei();
  inline void set_allocated_f_shigong_danwei(::std::string* f_shigong_danwei);

  // optional string f_jianli_danwei = 15;
  inline bool has_f_jianli_danwei() const;
  inline void clear_f_jianli_danwei();
  static const int kFJianliDanweiFieldNumber = 15;
  inline const ::std::string& f_jianli_danwei() const;
  inline void set_f_jianli_danwei(const ::std::string& value);
  inline void set_f_jianli_danwei(const char* value);
  inline void set_f_jianli_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_jianli_danwei();
  inline ::std::string* release_f_jianli_danwei();
  inline void set_allocated_f_jianli_danwei(::std::string* f_jianli_danwei);

  // optional string f_fenbao_danwei = 16;
  inline bool has_f_fenbao_danwei() const;
  inline void clear_f_fenbao_danwei();
  static const int kFFenbaoDanweiFieldNumber = 16;
  inline const ::std::string& f_fenbao_danwei() const;
  inline void set_f_fenbao_danwei(const ::std::string& value);
  inline void set_f_fenbao_danwei(const char* value);
  inline void set_f_fenbao_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_fenbao_danwei();
  inline ::std::string* release_f_fenbao_danwei();
  inline void set_allocated_f_fenbao_danwei(::std::string* f_fenbao_danwei);

  // optional double f_lat = 17;
  inline bool has_f_lat() const;
  inline void clear_f_lat();
  static const int kFLatFieldNumber = 17;
  inline double f_lat() const;
  inline void set_f_lat(double value);

  // optional double f_lon = 18;
  inline bool has_f_lon() const;
  inline void clear_f_lon();
  static const int kFLonFieldNumber = 18;
  inline double f_lon() const;
  inline void set_f_lon(double value);

  // optional string f_job_type = 19;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 19;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional string f_other_info = 20;
  inline bool has_f_other_info() const;
  inline void clear_f_other_info();
  static const int kFOtherInfoFieldNumber = 20;
  inline const ::std::string& f_other_info() const;
  inline void set_f_other_info(const ::std::string& value);
  inline void set_f_other_info(const char* value);
  inline void set_f_other_info(const char* value, size_t size);
  inline ::std::string* mutable_f_other_info();
  inline ::std::string* release_f_other_info();
  inline void set_allocated_f_other_info(::std::string* f_other_info);

  // optional string f_sms_msg = 21;
  inline bool has_f_sms_msg() const;
  inline void clear_f_sms_msg();
  static const int kFSmsMsgFieldNumber = 21;
  inline const ::std::string& f_sms_msg() const;
  inline void set_f_sms_msg(const ::std::string& value);
  inline void set_f_sms_msg(const char* value);
  inline void set_f_sms_msg(const char* value, size_t size);
  inline ::std::string* mutable_f_sms_msg();
  inline ::std::string* release_f_sms_msg();
  inline void set_allocated_f_sms_msg(::std::string* f_sms_msg);

  // repeated .pb_prj_t_task f_tasks = 22;
  inline int f_tasks_size() const;
  inline void clear_f_tasks();
  static const int kFTasksFieldNumber = 22;
  inline const ::pb_prj_t_task& f_tasks(int index) const;
  inline ::pb_prj_t_task* mutable_f_tasks(int index);
  inline ::pb_prj_t_task* add_f_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
      f_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
      mutable_f_tasks();

  // repeated .pb_prj_t_task f_owner_tasks = 23;
  inline int f_owner_tasks_size() const;
  inline void clear_f_owner_tasks();
  static const int kFOwnerTasksFieldNumber = 23;
  inline const ::pb_prj_t_task& f_owner_tasks(int index) const;
  inline ::pb_prj_t_task* mutable_f_owner_tasks(int index);
  inline ::pb_prj_t_task* add_f_owner_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
      f_owner_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
      mutable_f_owner_tasks();

  // optional int32 f_owner_tasks_cnt = 24;
  inline bool has_f_owner_tasks_cnt() const;
  inline void clear_f_owner_tasks_cnt();
  static const int kFOwnerTasksCntFieldNumber = 24;
  inline ::google::protobuf::int32 f_owner_tasks_cnt() const;
  inline void set_f_owner_tasks_cnt(::google::protobuf::int32 value);

  // optional int32 f_add_time = 25;
  inline bool has_f_add_time() const;
  inline void clear_f_add_time();
  static const int kFAddTimeFieldNumber = 25;
  inline ::google::protobuf::int32 f_add_time() const;
  inline void set_f_add_time(::google::protobuf::int32 value);

  // optional int32 f_creater_uin = 26;
  inline bool has_f_creater_uin() const;
  inline void clear_f_creater_uin();
  static const int kFCreaterUinFieldNumber = 26;
  inline ::google::protobuf::int32 f_creater_uin() const;
  inline void set_f_creater_uin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_prj_t_info)
 private:
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_prj_name();
  inline void clear_has_f_prj_name();
  inline void set_has_f_prj_type();
  inline void clear_has_f_prj_type();
  inline void set_has_f_prj_image();
  inline void clear_has_f_prj_image();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_province();
  inline void clear_has_f_province();
  inline void set_has_f_city();
  inline void clear_has_f_city();
  inline void set_has_f_prj_address();
  inline void clear_has_f_prj_address();
  inline void set_has_f_member_count();
  inline void clear_has_f_member_count();
  inline void set_has_f_floor_area();
  inline void clear_has_f_floor_area();
  inline void set_has_f_prj_begin();
  inline void clear_has_f_prj_begin();
  inline void set_has_f_prj_end();
  inline void clear_has_f_prj_end();
  inline void set_has_f_jianzhu_danwei();
  inline void clear_has_f_jianzhu_danwei();
  inline void set_has_f_shigong_danwei();
  inline void clear_has_f_shigong_danwei();
  inline void set_has_f_jianli_danwei();
  inline void clear_has_f_jianli_danwei();
  inline void set_has_f_fenbao_danwei();
  inline void clear_has_f_fenbao_danwei();
  inline void set_has_f_lat();
  inline void clear_has_f_lat();
  inline void set_has_f_lon();
  inline void clear_has_f_lon();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_other_info();
  inline void clear_has_f_other_info();
  inline void set_has_f_sms_msg();
  inline void clear_has_f_sms_msg();
  inline void set_has_f_owner_tasks_cnt();
  inline void clear_has_f_owner_tasks_cnt();
  inline void set_has_f_add_time();
  inline void clear_has_f_add_time();
  inline void set_has_f_creater_uin();
  inline void clear_has_f_creater_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_prj_id_;
  ::std::string* f_prj_name_;
  ::std::string* f_prj_image_;
  ::std::string* f_group_id_;
  ::std::string* f_province_;
  ::google::protobuf::int32 f_prj_type_;
  ::google::protobuf::int32 f_member_count_;
  ::std::string* f_city_;
  ::std::string* f_prj_address_;
  ::google::protobuf::int32 f_floor_area_;
  ::google::protobuf::int32 f_prj_begin_;
  ::std::string* f_jianzhu_danwei_;
  ::std::string* f_shigong_danwei_;
  ::std::string* f_jianli_danwei_;
  ::std::string* f_fenbao_danwei_;
  double f_lat_;
  double f_lon_;
  ::google::protobuf::int32 f_prj_end_;
  ::google::protobuf::int32 f_owner_tasks_cnt_;
  ::std::string* f_job_type_;
  ::std::string* f_other_info_;
  ::std::string* f_sms_msg_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task > f_tasks_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task > f_owner_tasks_;
  ::google::protobuf::int32 f_add_time_;
  ::google::protobuf::int32 f_creater_uin_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_log : public ::google::protobuf::Message {
 public:
  pb_prj_t_log();
  virtual ~pb_prj_t_log();

  pb_prj_t_log(const pb_prj_t_log& from);

  inline pb_prj_t_log& operator=(const pb_prj_t_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_log& default_instance();

  void Swap(pb_prj_t_log* other);

  // implements Message ----------------------------------------------

  pb_prj_t_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_log& from);
  void MergeFrom(const pb_prj_t_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_log_content = 1;
  inline bool has_f_log_content() const;
  inline void clear_f_log_content();
  static const int kFLogContentFieldNumber = 1;
  inline const ::std::string& f_log_content() const;
  inline void set_f_log_content(const ::std::string& value);
  inline void set_f_log_content(const char* value);
  inline void set_f_log_content(const char* value, size_t size);
  inline ::std::string* mutable_f_log_content();
  inline ::std::string* release_f_log_content();
  inline void set_allocated_f_log_content(::std::string* f_log_content);

  // optional int32 f_add_time = 2;
  inline bool has_f_add_time() const;
  inline void clear_f_add_time();
  static const int kFAddTimeFieldNumber = 2;
  inline ::google::protobuf::int32 f_add_time() const;
  inline void set_f_add_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_prj_t_log)
 private:
  inline void set_has_f_log_content();
  inline void clear_has_f_log_content();
  inline void set_has_f_add_time();
  inline void clear_has_f_add_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_log_content_;
  ::google::protobuf::int32 f_add_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_log* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_over_view : public ::google::protobuf::Message {
 public:
  pb_prj_t_over_view();
  virtual ~pb_prj_t_over_view();

  pb_prj_t_over_view(const pb_prj_t_over_view& from);

  inline pb_prj_t_over_view& operator=(const pb_prj_t_over_view& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_over_view& default_instance();

  void Swap(pb_prj_t_over_view* other);

  // implements Message ----------------------------------------------

  pb_prj_t_over_view* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_over_view& from);
  void MergeFrom(const pb_prj_t_over_view& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_prj_id = 1;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 1;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional string f_prj_name = 2;
  inline bool has_f_prj_name() const;
  inline void clear_f_prj_name();
  static const int kFPrjNameFieldNumber = 2;
  inline const ::std::string& f_prj_name() const;
  inline void set_f_prj_name(const ::std::string& value);
  inline void set_f_prj_name(const char* value);
  inline void set_f_prj_name(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_name();
  inline ::std::string* release_f_prj_name();
  inline void set_allocated_f_prj_name(::std::string* f_prj_name);

  // optional string f_prj_code = 3;
  inline bool has_f_prj_code() const;
  inline void clear_f_prj_code();
  static const int kFPrjCodeFieldNumber = 3;
  inline const ::std::string& f_prj_code() const;
  inline void set_f_prj_code(const ::std::string& value);
  inline void set_f_prj_code(const char* value);
  inline void set_f_prj_code(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_code();
  inline ::std::string* release_f_prj_code();
  inline void set_allocated_f_prj_code(::std::string* f_prj_code);

  // optional int32 f_prj_member_count = 4;
  inline bool has_f_prj_member_count() const;
  inline void clear_f_prj_member_count();
  static const int kFPrjMemberCountFieldNumber = 4;
  inline ::google::protobuf::int32 f_prj_member_count() const;
  inline void set_f_prj_member_count(::google::protobuf::int32 value);

  // optional string f_prj_my_job = 5;
  inline bool has_f_prj_my_job() const;
  inline void clear_f_prj_my_job();
  static const int kFPrjMyJobFieldNumber = 5;
  inline const ::std::string& f_prj_my_job() const;
  inline void set_f_prj_my_job(const ::std::string& value);
  inline void set_f_prj_my_job(const char* value);
  inline void set_f_prj_my_job(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_my_job();
  inline ::std::string* release_f_prj_my_job();
  inline void set_allocated_f_prj_my_job(::std::string* f_prj_my_job);

  // optional int32 f_prj_begin = 6;
  inline bool has_f_prj_begin() const;
  inline void clear_f_prj_begin();
  static const int kFPrjBeginFieldNumber = 6;
  inline ::google::protobuf::int32 f_prj_begin() const;
  inline void set_f_prj_begin(::google::protobuf::int32 value);

  // optional int32 f_prj_end = 7;
  inline bool has_f_prj_end() const;
  inline void clear_f_prj_end();
  static const int kFPrjEndFieldNumber = 7;
  inline ::google::protobuf::int32 f_prj_end() const;
  inline void set_f_prj_end(::google::protobuf::int32 value);

  // optional int32 f_prj_task_count = 8;
  inline bool has_f_prj_task_count() const;
  inline void clear_f_prj_task_count();
  static const int kFPrjTaskCountFieldNumber = 8;
  inline ::google::protobuf::int32 f_prj_task_count() const;
  inline void set_f_prj_task_count(::google::protobuf::int32 value);

  // repeated .pb_prj_t_log f_prj_log = 9;
  inline int f_prj_log_size() const;
  inline void clear_f_prj_log();
  static const int kFPrjLogFieldNumber = 9;
  inline const ::pb_prj_t_log& f_prj_log(int index) const;
  inline ::pb_prj_t_log* mutable_f_prj_log(int index);
  inline ::pb_prj_t_log* add_f_prj_log();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_log >&
      f_prj_log() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_log >*
      mutable_f_prj_log();

  // optional .pb_clt_t_friend f_frd = 10;
  inline bool has_f_frd() const;
  inline void clear_f_frd();
  static const int kFFrdFieldNumber = 10;
  inline const ::pb_clt_t_friend& f_frd() const;
  inline ::pb_clt_t_friend* mutable_f_frd();
  inline ::pb_clt_t_friend* release_f_frd();
  inline void set_allocated_f_frd(::pb_clt_t_friend* f_frd);

  // @@protoc_insertion_point(class_scope:pb_prj_t_over_view)
 private:
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_prj_name();
  inline void clear_has_f_prj_name();
  inline void set_has_f_prj_code();
  inline void clear_has_f_prj_code();
  inline void set_has_f_prj_member_count();
  inline void clear_has_f_prj_member_count();
  inline void set_has_f_prj_my_job();
  inline void clear_has_f_prj_my_job();
  inline void set_has_f_prj_begin();
  inline void clear_has_f_prj_begin();
  inline void set_has_f_prj_end();
  inline void clear_has_f_prj_end();
  inline void set_has_f_prj_task_count();
  inline void clear_has_f_prj_task_count();
  inline void set_has_f_frd();
  inline void clear_has_f_frd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_prj_id_;
  ::std::string* f_prj_name_;
  ::std::string* f_prj_code_;
  ::std::string* f_prj_my_job_;
  ::google::protobuf::int32 f_prj_member_count_;
  ::google::protobuf::int32 f_prj_begin_;
  ::google::protobuf::int32 f_prj_end_;
  ::google::protobuf::int32 f_prj_task_count_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_log > f_prj_log_;
  ::pb_clt_t_friend* f_frd_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_over_view* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_prj : public ::google::protobuf::Message {
 public:
  pb_prj_t_prj();
  virtual ~pb_prj_t_prj();

  pb_prj_t_prj(const pb_prj_t_prj& from);

  inline pb_prj_t_prj& operator=(const pb_prj_t_prj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_prj& default_instance();

  void Swap(pb_prj_t_prj* other);

  // implements Message ----------------------------------------------

  pb_prj_t_prj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_prj& from);
  void MergeFrom(const pb_prj_t_prj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // repeated .pb_prj_t_info f_prjs = 2;
  inline int f_prjs_size() const;
  inline void clear_f_prjs();
  static const int kFPrjsFieldNumber = 2;
  inline const ::pb_prj_t_info& f_prjs(int index) const;
  inline ::pb_prj_t_info* mutable_f_prjs(int index);
  inline ::pb_prj_t_info* add_f_prjs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_info >&
      f_prjs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_info >*
      mutable_f_prjs();

  // @@protoc_insertion_point(class_scope:pb_prj_t_prj)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_info > f_prjs_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_prj* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_recommend_info : public ::google::protobuf::Message {
 public:
  pb_prj_t_recommend_info();
  virtual ~pb_prj_t_recommend_info();

  pb_prj_t_recommend_info(const pb_prj_t_recommend_info& from);

  inline pb_prj_t_recommend_info& operator=(const pb_prj_t_recommend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_recommend_info& default_instance();

  void Swap(pb_prj_t_recommend_info* other);

  // implements Message ----------------------------------------------

  pb_prj_t_recommend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_recommend_info& from);
  void MergeFrom(const pb_prj_t_recommend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_prj_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_prj_t_info& f_info() const;
  inline ::pb_prj_t_info* mutable_f_info();
  inline ::pb_prj_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_prj_t_info* f_info);

  // optional uint32 f_type = 2;
  inline bool has_f_type() const;
  inline void clear_f_type();
  static const int kFTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 f_type() const;
  inline void set_f_type(::google::protobuf::uint32 value);

  // optional int32 f_weight = 3;
  inline bool has_f_weight() const;
  inline void clear_f_weight();
  static const int kFWeightFieldNumber = 3;
  inline ::google::protobuf::int32 f_weight() const;
  inline void set_f_weight(::google::protobuf::int32 value);

  // optional string f_other_info = 4;
  inline bool has_f_other_info() const;
  inline void clear_f_other_info();
  static const int kFOtherInfoFieldNumber = 4;
  inline const ::std::string& f_other_info() const;
  inline void set_f_other_info(const ::std::string& value);
  inline void set_f_other_info(const char* value);
  inline void set_f_other_info(const char* value, size_t size);
  inline ::std::string* mutable_f_other_info();
  inline ::std::string* release_f_other_info();
  inline void set_allocated_f_other_info(::std::string* f_other_info);

  // @@protoc_insertion_point(class_scope:pb_prj_t_recommend_info)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();
  inline void set_has_f_type();
  inline void clear_has_f_type();
  inline void set_has_f_weight();
  inline void clear_has_f_weight();
  inline void set_has_f_other_info();
  inline void clear_has_f_other_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_prj_t_info* f_info_;
  ::google::protobuf::uint32 f_type_;
  ::google::protobuf::int32 f_weight_;
  ::std::string* f_other_info_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_recommend_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_recommend_prj : public ::google::protobuf::Message {
 public:
  pb_prj_t_recommend_prj();
  virtual ~pb_prj_t_recommend_prj();

  pb_prj_t_recommend_prj(const pb_prj_t_recommend_prj& from);

  inline pb_prj_t_recommend_prj& operator=(const pb_prj_t_recommend_prj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_recommend_prj& default_instance();

  void Swap(pb_prj_t_recommend_prj* other);

  // implements Message ----------------------------------------------

  pb_prj_t_recommend_prj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_recommend_prj& from);
  void MergeFrom(const pb_prj_t_recommend_prj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_update_type = 1;
  inline bool has_f_update_type() const;
  inline void clear_f_update_type();
  static const int kFUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_update_type() const;
  inline void set_f_update_type(::google::protobuf::int32 value);

  // repeated .pb_prj_t_recommend_info f_prjs = 2;
  inline int f_prjs_size() const;
  inline void clear_f_prjs();
  static const int kFPrjsFieldNumber = 2;
  inline const ::pb_prj_t_recommend_info& f_prjs(int index) const;
  inline ::pb_prj_t_recommend_info* mutable_f_prjs(int index);
  inline ::pb_prj_t_recommend_info* add_f_prjs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >&
      f_prjs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >*
      mutable_f_prjs();

  // @@protoc_insertion_point(class_scope:pb_prj_t_recommend_prj)
 private:
  inline void set_has_f_update_type();
  inline void clear_has_f_update_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info > f_prjs_;
  ::google::protobuf::int32 f_update_type_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_recommend_prj* default_instance_;
};
// -------------------------------------------------------------------

class pb_prj_t_details : public ::google::protobuf::Message {
 public:
  pb_prj_t_details();
  virtual ~pb_prj_t_details();

  pb_prj_t_details(const pb_prj_t_details& from);

  inline pb_prj_t_details& operator=(const pb_prj_t_details& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_prj_t_details& default_instance();

  void Swap(pb_prj_t_details* other);

  // implements Message ----------------------------------------------

  pb_prj_t_details* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_prj_t_details& from);
  void MergeFrom(const pb_prj_t_details& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_prj_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_prj_t_info& f_info() const;
  inline ::pb_prj_t_info* mutable_f_info();
  inline ::pb_prj_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_prj_t_info* f_info);

  // optional .pb_clt_t_group f_im_group = 2;
  inline bool has_f_im_group() const;
  inline void clear_f_im_group();
  static const int kFImGroupFieldNumber = 2;
  inline const ::pb_clt_t_group& f_im_group() const;
  inline ::pb_clt_t_group* mutable_f_im_group();
  inline ::pb_clt_t_group* release_f_im_group();
  inline void set_allocated_f_im_group(::pb_clt_t_group* f_im_group);

  // optional .pb_prj_t_task_details f_task_details = 3;
  inline bool has_f_task_details() const;
  inline void clear_f_task_details();
  static const int kFTaskDetailsFieldNumber = 3;
  inline const ::pb_prj_t_task_details& f_task_details() const;
  inline ::pb_prj_t_task_details* mutable_f_task_details();
  inline ::pb_prj_t_task_details* release_f_task_details();
  inline void set_allocated_f_task_details(::pb_prj_t_task_details* f_task_details);

  // repeated .pb_prj_t_task f_tasks = 4;
  inline int f_tasks_size() const;
  inline void clear_f_tasks();
  static const int kFTasksFieldNumber = 4;
  inline const ::pb_prj_t_task& f_tasks(int index) const;
  inline ::pb_prj_t_task* mutable_f_tasks(int index);
  inline ::pb_prj_t_task* add_f_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
      f_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
      mutable_f_tasks();

  // optional int32 f_task_total_count = 5;
  inline bool has_f_task_total_count() const;
  inline void clear_f_task_total_count();
  static const int kFTaskTotalCountFieldNumber = 5;
  inline ::google::protobuf::int32 f_task_total_count() const;
  inline void set_f_task_total_count(::google::protobuf::int32 value);

  // optional int32 f_task_unfinished_count = 6;
  inline bool has_f_task_unfinished_count() const;
  inline void clear_f_task_unfinished_count();
  static const int kFTaskUnfinishedCountFieldNumber = 6;
  inline ::google::protobuf::int32 f_task_unfinished_count() const;
  inline void set_f_task_unfinished_count(::google::protobuf::int32 value);

  // optional int32 f_task_delay_count = 7;
  inline bool has_f_task_delay_count() const;
  inline void clear_f_task_delay_count();
  static const int kFTaskDelayCountFieldNumber = 7;
  inline ::google::protobuf::int32 f_task_delay_count() const;
  inline void set_f_task_delay_count(::google::protobuf::int32 value);

  // repeated .pb_prj_t_user f_users = 8;
  inline int f_users_size() const;
  inline void clear_f_users();
  static const int kFUsersFieldNumber = 8;
  inline const ::pb_prj_t_user& f_users(int index) const;
  inline ::pb_prj_t_user* mutable_f_users(int index);
  inline ::pb_prj_t_user* add_f_users();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
      f_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
      mutable_f_users();

  // repeated .pb_prj_t_user f_app_users = 9;
  inline int f_app_users_size() const;
  inline void clear_f_app_users();
  static const int kFAppUsersFieldNumber = 9;
  inline const ::pb_prj_t_user& f_app_users(int index) const;
  inline ::pb_prj_t_user* mutable_f_app_users(int index);
  inline ::pb_prj_t_user* add_f_app_users();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
      f_app_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
      mutable_f_app_users();

  // optional .pb_clt_t_friend f_frd = 10;
  inline bool has_f_frd() const;
  inline void clear_f_frd();
  static const int kFFrdFieldNumber = 10;
  inline const ::pb_clt_t_friend& f_frd() const;
  inline ::pb_clt_t_friend* mutable_f_frd();
  inline ::pb_clt_t_friend* release_f_frd();
  inline void set_allocated_f_frd(::pb_clt_t_friend* f_frd);

  // repeated .pb_prj_t_feed f_feeds = 11;
  inline int f_feeds_size() const;
  inline void clear_f_feeds();
  static const int kFFeedsFieldNumber = 11;
  inline const ::pb_prj_t_feed& f_feeds(int index) const;
  inline ::pb_prj_t_feed* mutable_f_feeds(int index);
  inline ::pb_prj_t_feed* add_f_feeds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_feed >&
      f_feeds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_feed >*
      mutable_f_feeds();

  // optional .pb_prj_t_over_view f_prj_over_view = 12;
  inline bool has_f_prj_over_view() const;
  inline void clear_f_prj_over_view();
  static const int kFPrjOverViewFieldNumber = 12;
  inline const ::pb_prj_t_over_view& f_prj_over_view() const;
  inline ::pb_prj_t_over_view* mutable_f_prj_over_view();
  inline ::pb_prj_t_over_view* release_f_prj_over_view();
  inline void set_allocated_f_prj_over_view(::pb_prj_t_over_view* f_prj_over_view);

  // @@protoc_insertion_point(class_scope:pb_prj_t_details)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();
  inline void set_has_f_im_group();
  inline void clear_has_f_im_group();
  inline void set_has_f_task_details();
  inline void clear_has_f_task_details();
  inline void set_has_f_task_total_count();
  inline void clear_has_f_task_total_count();
  inline void set_has_f_task_unfinished_count();
  inline void clear_has_f_task_unfinished_count();
  inline void set_has_f_task_delay_count();
  inline void clear_has_f_task_delay_count();
  inline void set_has_f_frd();
  inline void clear_has_f_frd();
  inline void set_has_f_prj_over_view();
  inline void clear_has_f_prj_over_view();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_prj_t_info* f_info_;
  ::pb_clt_t_group* f_im_group_;
  ::pb_prj_t_task_details* f_task_details_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task > f_tasks_;
  ::google::protobuf::int32 f_task_total_count_;
  ::google::protobuf::int32 f_task_unfinished_count_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user > f_users_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user > f_app_users_;
  ::pb_clt_t_friend* f_frd_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_feed > f_feeds_;
  ::pb_prj_t_over_view* f_prj_over_view_;
  ::google::protobuf::int32 f_task_delay_count_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_prj_t_details* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_info : public ::google::protobuf::Message {
 public:
  pb_user_t_info();
  virtual ~pb_user_t_info();

  pb_user_t_info(const pb_user_t_info& from);

  inline pb_user_t_info& operator=(const pb_user_t_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_info& default_instance();

  void Swap(pb_user_t_info* other);

  // implements Message ----------------------------------------------

  pb_user_t_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_info& from);
  void MergeFrom(const pb_user_t_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_province = 2;
  inline bool has_f_province() const;
  inline void clear_f_province();
  static const int kFProvinceFieldNumber = 2;
  inline const ::std::string& f_province() const;
  inline void set_f_province(const ::std::string& value);
  inline void set_f_province(const char* value);
  inline void set_f_province(const char* value, size_t size);
  inline ::std::string* mutable_f_province();
  inline ::std::string* release_f_province();
  inline void set_allocated_f_province(::std::string* f_province);

  // optional string f_city = 3;
  inline bool has_f_city() const;
  inline void clear_f_city();
  static const int kFCityFieldNumber = 3;
  inline const ::std::string& f_city() const;
  inline void set_f_city(const ::std::string& value);
  inline void set_f_city(const char* value);
  inline void set_f_city(const char* value, size_t size);
  inline ::std::string* mutable_f_city();
  inline ::std::string* release_f_city();
  inline void set_allocated_f_city(::std::string* f_city);

  // optional string f_phone = 4;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 4;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional string f_name = 5;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 5;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_company_type = 6;
  inline bool has_f_company_type() const;
  inline void clear_f_company_type();
  static const int kFCompanyTypeFieldNumber = 6;
  inline const ::std::string& f_company_type() const;
  inline void set_f_company_type(const ::std::string& value);
  inline void set_f_company_type(const char* value);
  inline void set_f_company_type(const char* value, size_t size);
  inline ::std::string* mutable_f_company_type();
  inline ::std::string* release_f_company_type();
  inline void set_allocated_f_company_type(::std::string* f_company_type);

  // optional string f_company = 7;
  inline bool has_f_company() const;
  inline void clear_f_company();
  static const int kFCompanyFieldNumber = 7;
  inline const ::std::string& f_company() const;
  inline void set_f_company(const ::std::string& value);
  inline void set_f_company(const char* value);
  inline void set_f_company(const char* value, size_t size);
  inline ::std::string* mutable_f_company();
  inline ::std::string* release_f_company();
  inline void set_allocated_f_company(::std::string* f_company);

  // optional string f_years_of_working = 8;
  inline bool has_f_years_of_working() const;
  inline void clear_f_years_of_working();
  static const int kFYearsOfWorkingFieldNumber = 8;
  inline const ::std::string& f_years_of_working() const;
  inline void set_f_years_of_working(const ::std::string& value);
  inline void set_f_years_of_working(const char* value);
  inline void set_f_years_of_working(const char* value, size_t size);
  inline ::std::string* mutable_f_years_of_working();
  inline ::std::string* release_f_years_of_working();
  inline void set_allocated_f_years_of_working(::std::string* f_years_of_working);

  // optional string f_job_type = 9;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 9;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional string f_job_title = 10;
  inline bool has_f_job_title() const;
  inline void clear_f_job_title();
  static const int kFJobTitleFieldNumber = 10;
  inline const ::std::string& f_job_title() const;
  inline void set_f_job_title(const ::std::string& value);
  inline void set_f_job_title(const char* value);
  inline void set_f_job_title(const char* value, size_t size);
  inline ::std::string* mutable_f_job_title();
  inline ::std::string* release_f_job_title();
  inline void set_allocated_f_job_title(::std::string* f_job_title);

  // optional int32 f_influence = 11;
  inline bool has_f_influence() const;
  inline void clear_f_influence();
  static const int kFInfluenceFieldNumber = 11;
  inline ::google::protobuf::int32 f_influence() const;
  inline void set_f_influence(::google::protobuf::int32 value);

  // optional int32 f_setting = 12;
  inline bool has_f_setting() const;
  inline void clear_f_setting();
  static const int kFSettingFieldNumber = 12;
  inline ::google::protobuf::int32 f_setting() const;
  inline void set_f_setting(::google::protobuf::int32 value);

  // optional string f_name_pinyin = 13;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 13;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // optional string f_name_pinyin_j = 14;
  inline bool has_f_name_pinyin_j() const;
  inline void clear_f_name_pinyin_j();
  static const int kFNamePinyinJFieldNumber = 14;
  inline const ::std::string& f_name_pinyin_j() const;
  inline void set_f_name_pinyin_j(const ::std::string& value);
  inline void set_f_name_pinyin_j(const char* value);
  inline void set_f_name_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin_j();
  inline ::std::string* release_f_name_pinyin_j();
  inline void set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j);

  // @@protoc_insertion_point(class_scope:pb_user_t_info)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_province();
  inline void clear_has_f_province();
  inline void set_has_f_city();
  inline void clear_has_f_city();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_company_type();
  inline void clear_has_f_company_type();
  inline void set_has_f_company();
  inline void clear_has_f_company();
  inline void set_has_f_years_of_working();
  inline void clear_has_f_years_of_working();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_job_title();
  inline void clear_has_f_job_title();
  inline void set_has_f_influence();
  inline void clear_has_f_influence();
  inline void set_has_f_setting();
  inline void clear_has_f_setting();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();
  inline void set_has_f_name_pinyin_j();
  inline void clear_has_f_name_pinyin_j();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_province_;
  ::std::string* f_city_;
  ::std::string* f_phone_;
  ::std::string* f_name_;
  ::std::string* f_company_type_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::int32 f_influence_;
  ::std::string* f_company_;
  ::std::string* f_years_of_working_;
  ::std::string* f_job_type_;
  ::std::string* f_job_title_;
  ::std::string* f_name_pinyin_;
  ::std::string* f_name_pinyin_j_;
  ::google::protobuf::int32 f_setting_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_extra : public ::google::protobuf::Message {
 public:
  pb_user_t_extra();
  virtual ~pb_user_t_extra();

  pb_user_t_extra(const pb_user_t_extra& from);

  inline pb_user_t_extra& operator=(const pb_user_t_extra& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_extra& default_instance();

  void Swap(pb_user_t_extra* other);

  // implements Message ----------------------------------------------

  pb_user_t_extra* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_extra& from);
  void MergeFrom(const pb_user_t_extra& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_auto_inc_id = 1;
  inline bool has_f_auto_inc_id() const;
  inline void clear_f_auto_inc_id();
  static const int kFAutoIncIdFieldNumber = 1;
  inline ::google::protobuf::int32 f_auto_inc_id() const;
  inline void set_f_auto_inc_id(::google::protobuf::int32 value);

  // optional int32 f_last_req_time = 2;
  inline bool has_f_last_req_time() const;
  inline void clear_f_last_req_time();
  static const int kFLastReqTimeFieldNumber = 2;
  inline ::google::protobuf::int32 f_last_req_time() const;
  inline void set_f_last_req_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_user_t_extra)
 private:
  inline void set_has_f_auto_inc_id();
  inline void clear_has_f_auto_inc_id();
  inline void set_has_f_last_req_time();
  inline void clear_has_f_last_req_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 f_auto_inc_id_;
  ::google::protobuf::int32 f_last_req_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_extra* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_friend : public ::google::protobuf::Message {
 public:
  pb_user_t_friend();
  virtual ~pb_user_t_friend();

  pb_user_t_friend(const pb_user_t_friend& from);

  inline pb_user_t_friend& operator=(const pb_user_t_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_friend& default_instance();

  void Swap(pb_user_t_friend* other);

  // implements Message ----------------------------------------------

  pb_user_t_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_friend& from);
  void MergeFrom(const pb_user_t_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_remark = 3;
  inline bool has_f_remark() const;
  inline void clear_f_remark();
  static const int kFRemarkFieldNumber = 3;
  inline const ::std::string& f_remark() const;
  inline void set_f_remark(const ::std::string& value);
  inline void set_f_remark(const char* value);
  inline void set_f_remark(const char* value, size_t size);
  inline ::std::string* mutable_f_remark();
  inline ::std::string* release_f_remark();
  inline void set_allocated_f_remark(::std::string* f_remark);

  // optional string f_phone = 4;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 4;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional string f_msg = 5;
  inline bool has_f_msg() const;
  inline void clear_f_msg();
  static const int kFMsgFieldNumber = 5;
  inline const ::std::string& f_msg() const;
  inline void set_f_msg(const ::std::string& value);
  inline void set_f_msg(const char* value);
  inline void set_f_msg(const char* value, size_t size);
  inline ::std::string* mutable_f_msg();
  inline ::std::string* release_f_msg();
  inline void set_allocated_f_msg(::std::string* f_msg);

  // optional int32 f_flag = 6;
  inline bool has_f_flag() const;
  inline void clear_f_flag();
  static const int kFFlagFieldNumber = 6;
  inline ::google::protobuf::int32 f_flag() const;
  inline void set_f_flag(::google::protobuf::int32 value);

  // optional string f_group_id = 7;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 7;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional string f_initial = 8;
  inline bool has_f_initial() const;
  inline void clear_f_initial();
  static const int kFInitialFieldNumber = 8;
  inline const ::std::string& f_initial() const;
  inline void set_f_initial(const ::std::string& value);
  inline void set_f_initial(const char* value);
  inline void set_f_initial(const char* value, size_t size);
  inline ::std::string* mutable_f_initial();
  inline ::std::string* release_f_initial();
  inline void set_allocated_f_initial(::std::string* f_initial);

  // optional int32 f_weight = 9;
  inline bool has_f_weight() const;
  inline void clear_f_weight();
  static const int kFWeightFieldNumber = 9;
  inline ::google::protobuf::int32 f_weight() const;
  inline void set_f_weight(::google::protobuf::int32 value);

  // optional string f_name_pinyin = 10;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 10;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // optional string f_name_pinyin_j = 11;
  inline bool has_f_name_pinyin_j() const;
  inline void clear_f_name_pinyin_j();
  static const int kFNamePinyinJFieldNumber = 11;
  inline const ::std::string& f_name_pinyin_j() const;
  inline void set_f_name_pinyin_j(const ::std::string& value);
  inline void set_f_name_pinyin_j(const char* value);
  inline void set_f_name_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin_j();
  inline ::std::string* release_f_name_pinyin_j();
  inline void set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j);

  // optional string f_remark_pinyin = 12;
  inline bool has_f_remark_pinyin() const;
  inline void clear_f_remark_pinyin();
  static const int kFRemarkPinyinFieldNumber = 12;
  inline const ::std::string& f_remark_pinyin() const;
  inline void set_f_remark_pinyin(const ::std::string& value);
  inline void set_f_remark_pinyin(const char* value);
  inline void set_f_remark_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_remark_pinyin();
  inline ::std::string* release_f_remark_pinyin();
  inline void set_allocated_f_remark_pinyin(::std::string* f_remark_pinyin);

  // optional string f_remark_pinyin_j = 13;
  inline bool has_f_remark_pinyin_j() const;
  inline void clear_f_remark_pinyin_j();
  static const int kFRemarkPinyinJFieldNumber = 13;
  inline const ::std::string& f_remark_pinyin_j() const;
  inline void set_f_remark_pinyin_j(const ::std::string& value);
  inline void set_f_remark_pinyin_j(const char* value);
  inline void set_f_remark_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_remark_pinyin_j();
  inline ::std::string* release_f_remark_pinyin_j();
  inline void set_allocated_f_remark_pinyin_j(::std::string* f_remark_pinyin_j);

  // @@protoc_insertion_point(class_scope:pb_user_t_friend)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_remark();
  inline void clear_has_f_remark();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_msg();
  inline void clear_has_f_msg();
  inline void set_has_f_flag();
  inline void clear_has_f_flag();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_initial();
  inline void clear_has_f_initial();
  inline void set_has_f_weight();
  inline void clear_has_f_weight();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();
  inline void set_has_f_name_pinyin_j();
  inline void clear_has_f_name_pinyin_j();
  inline void set_has_f_remark_pinyin();
  inline void clear_has_f_remark_pinyin();
  inline void set_has_f_remark_pinyin_j();
  inline void clear_has_f_remark_pinyin_j();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::std::string* f_remark_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::int32 f_flag_;
  ::std::string* f_phone_;
  ::std::string* f_msg_;
  ::std::string* f_group_id_;
  ::std::string* f_initial_;
  ::std::string* f_name_pinyin_;
  ::std::string* f_name_pinyin_j_;
  ::std::string* f_remark_pinyin_;
  ::std::string* f_remark_pinyin_j_;
  ::google::protobuf::int32 f_weight_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_friend* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_recommend_friend : public ::google::protobuf::Message {
 public:
  pb_user_t_recommend_friend();
  virtual ~pb_user_t_recommend_friend();

  pb_user_t_recommend_friend(const pb_user_t_recommend_friend& from);

  inline pb_user_t_recommend_friend& operator=(const pb_user_t_recommend_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_recommend_friend& default_instance();

  void Swap(pb_user_t_recommend_friend* other);

  // implements Message ----------------------------------------------

  pb_user_t_recommend_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_recommend_friend& from);
  void MergeFrom(const pb_user_t_recommend_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional uint32 f_type = 3;
  inline bool has_f_type() const;
  inline void clear_f_type();
  static const int kFTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 f_type() const;
  inline void set_f_type(::google::protobuf::uint32 value);

  // optional int32 f_weight = 4;
  inline bool has_f_weight() const;
  inline void clear_f_weight();
  static const int kFWeightFieldNumber = 4;
  inline ::google::protobuf::int32 f_weight() const;
  inline void set_f_weight(::google::protobuf::int32 value);

  // optional string f_name_pinyin = 5;
  inline bool has_f_name_pinyin() const;
  inline void clear_f_name_pinyin();
  static const int kFNamePinyinFieldNumber = 5;
  inline const ::std::string& f_name_pinyin() const;
  inline void set_f_name_pinyin(const ::std::string& value);
  inline void set_f_name_pinyin(const char* value);
  inline void set_f_name_pinyin(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin();
  inline ::std::string* release_f_name_pinyin();
  inline void set_allocated_f_name_pinyin(::std::string* f_name_pinyin);

  // optional string f_name_pinyin_j = 6;
  inline bool has_f_name_pinyin_j() const;
  inline void clear_f_name_pinyin_j();
  static const int kFNamePinyinJFieldNumber = 6;
  inline const ::std::string& f_name_pinyin_j() const;
  inline void set_f_name_pinyin_j(const ::std::string& value);
  inline void set_f_name_pinyin_j(const char* value);
  inline void set_f_name_pinyin_j(const char* value, size_t size);
  inline ::std::string* mutable_f_name_pinyin_j();
  inline ::std::string* release_f_name_pinyin_j();
  inline void set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j);

  // optional string f_company_type = 7;
  inline bool has_f_company_type() const;
  inline void clear_f_company_type();
  static const int kFCompanyTypeFieldNumber = 7;
  inline const ::std::string& f_company_type() const;
  inline void set_f_company_type(const ::std::string& value);
  inline void set_f_company_type(const char* value);
  inline void set_f_company_type(const char* value, size_t size);
  inline ::std::string* mutable_f_company_type();
  inline ::std::string* release_f_company_type();
  inline void set_allocated_f_company_type(::std::string* f_company_type);

  // optional string f_company = 8;
  inline bool has_f_company() const;
  inline void clear_f_company();
  static const int kFCompanyFieldNumber = 8;
  inline const ::std::string& f_company() const;
  inline void set_f_company(const ::std::string& value);
  inline void set_f_company(const char* value);
  inline void set_f_company(const char* value, size_t size);
  inline ::std::string* mutable_f_company();
  inline ::std::string* release_f_company();
  inline void set_allocated_f_company(::std::string* f_company);

  // optional string f_other_info = 9;
  inline bool has_f_other_info() const;
  inline void clear_f_other_info();
  static const int kFOtherInfoFieldNumber = 9;
  inline const ::std::string& f_other_info() const;
  inline void set_f_other_info(const ::std::string& value);
  inline void set_f_other_info(const char* value);
  inline void set_f_other_info(const char* value, size_t size);
  inline ::std::string* mutable_f_other_info();
  inline ::std::string* release_f_other_info();
  inline void set_allocated_f_other_info(::std::string* f_other_info);

  // @@protoc_insertion_point(class_scope:pb_user_t_recommend_friend)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_type();
  inline void clear_has_f_type();
  inline void set_has_f_weight();
  inline void clear_has_f_weight();
  inline void set_has_f_name_pinyin();
  inline void clear_has_f_name_pinyin();
  inline void set_has_f_name_pinyin_j();
  inline void clear_has_f_name_pinyin_j();
  inline void set_has_f_company_type();
  inline void clear_has_f_company_type();
  inline void set_has_f_company();
  inline void clear_has_f_company();
  inline void set_has_f_other_info();
  inline void clear_has_f_other_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::uint32 f_type_;
  ::std::string* f_name_pinyin_;
  ::std::string* f_name_pinyin_j_;
  ::std::string* f_company_type_;
  ::std::string* f_company_;
  ::std::string* f_other_info_;
  ::google::protobuf::int32 f_weight_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_recommend_friend* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_phone_address : public ::google::protobuf::Message {
 public:
  pb_user_t_phone_address();
  virtual ~pb_user_t_phone_address();

  pb_user_t_phone_address(const pb_user_t_phone_address& from);

  inline pb_user_t_phone_address& operator=(const pb_user_t_phone_address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_phone_address& default_instance();

  void Swap(pb_user_t_phone_address* other);

  // implements Message ----------------------------------------------

  pb_user_t_phone_address* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_phone_address& from);
  void MergeFrom(const pb_user_t_phone_address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_name = 1;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 1;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_phone = 2;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 2;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // @@protoc_insertion_point(class_scope:pb_user_t_phone_address)
 private:
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::std::string* f_phone_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_phone_address* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_im_group : public ::google::protobuf::Message {
 public:
  pb_user_t_im_group();
  virtual ~pb_user_t_im_group();

  pb_user_t_im_group(const pb_user_t_im_group& from);

  inline pb_user_t_im_group& operator=(const pb_user_t_im_group& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_im_group& default_instance();

  void Swap(pb_user_t_im_group* other);

  // implements Message ----------------------------------------------

  pb_user_t_im_group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_im_group& from);
  void MergeFrom(const pb_user_t_im_group& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_group_id = 1;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 1;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional int32 f_group_flag = 2;
  inline bool has_f_group_flag() const;
  inline void clear_f_group_flag();
  static const int kFGroupFlagFieldNumber = 2;
  inline ::google::protobuf::int32 f_group_flag() const;
  inline void set_f_group_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_user_t_im_group)
 private:
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_group_flag();
  inline void clear_has_f_group_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_group_id_;
  ::google::protobuf::int32 f_group_flag_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_im_group* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_prj : public ::google::protobuf::Message {
 public:
  pb_user_t_prj();
  virtual ~pb_user_t_prj();

  pb_user_t_prj(const pb_user_t_prj& from);

  inline pb_user_t_prj& operator=(const pb_user_t_prj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_prj& default_instance();

  void Swap(pb_user_t_prj* other);

  // implements Message ----------------------------------------------

  pb_user_t_prj* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_prj& from);
  void MergeFrom(const pb_user_t_prj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_prj_id = 1;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 1;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional string f_group_id = 2;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 2;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // @@protoc_insertion_point(class_scope:pb_user_t_prj)
 private:
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_prj_id_;
  ::std::string* f_group_id_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_prj* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_data : public ::google::protobuf::Message {
 public:
  pb_user_t_data();
  virtual ~pb_user_t_data();

  pb_user_t_data(const pb_user_t_data& from);

  inline pb_user_t_data& operator=(const pb_user_t_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_data& default_instance();

  void Swap(pb_user_t_data* other);

  // implements Message ----------------------------------------------

  pb_user_t_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_data& from);
  void MergeFrom(const pb_user_t_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_user_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_user_t_info& f_info() const;
  inline ::pb_user_t_info* mutable_f_info();
  inline ::pb_user_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_user_t_info* f_info);

  // optional .pb_user_t_extra f_extra = 2;
  inline bool has_f_extra() const;
  inline void clear_f_extra();
  static const int kFExtraFieldNumber = 2;
  inline const ::pb_user_t_extra& f_extra() const;
  inline ::pb_user_t_extra* mutable_f_extra();
  inline ::pb_user_t_extra* release_f_extra();
  inline void set_allocated_f_extra(::pb_user_t_extra* f_extra);

  // repeated .pb_user_t_friend f_friend_list = 3;
  inline int f_friend_list_size() const;
  inline void clear_f_friend_list();
  static const int kFFriendListFieldNumber = 3;
  inline const ::pb_user_t_friend& f_friend_list(int index) const;
  inline ::pb_user_t_friend* mutable_f_friend_list(int index);
  inline ::pb_user_t_friend* add_f_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
      f_friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
      mutable_f_friend_list();

  // repeated .pb_user_t_friend f_friend_validation_list = 4;
  inline int f_friend_validation_list_size() const;
  inline void clear_f_friend_validation_list();
  static const int kFFriendValidationListFieldNumber = 4;
  inline const ::pb_user_t_friend& f_friend_validation_list(int index) const;
  inline ::pb_user_t_friend* mutable_f_friend_validation_list(int index);
  inline ::pb_user_t_friend* add_f_friend_validation_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
      f_friend_validation_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
      mutable_f_friend_validation_list();

  // repeated .pb_user_t_friend f_friend_recommend_list = 5;
  inline int f_friend_recommend_list_size() const;
  inline void clear_f_friend_recommend_list();
  static const int kFFriendRecommendListFieldNumber = 5;
  inline const ::pb_user_t_friend& f_friend_recommend_list(int index) const;
  inline ::pb_user_t_friend* mutable_f_friend_recommend_list(int index);
  inline ::pb_user_t_friend* add_f_friend_recommend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
      f_friend_recommend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
      mutable_f_friend_recommend_list();

  // repeated .pb_user_t_im_group f_im_group = 6;
  inline int f_im_group_size() const;
  inline void clear_f_im_group();
  static const int kFImGroupFieldNumber = 6;
  inline const ::pb_user_t_im_group& f_im_group(int index) const;
  inline ::pb_user_t_im_group* mutable_f_im_group(int index);
  inline ::pb_user_t_im_group* add_f_im_group();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_im_group >&
      f_im_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_im_group >*
      mutable_f_im_group();

  // optional .pb_user_t_info f_other_info = 7;
  inline bool has_f_other_info() const;
  inline void clear_f_other_info();
  static const int kFOtherInfoFieldNumber = 7;
  inline const ::pb_user_t_info& f_other_info() const;
  inline ::pb_user_t_info* mutable_f_other_info();
  inline ::pb_user_t_info* release_f_other_info();
  inline void set_allocated_f_other_info(::pb_user_t_info* f_other_info);

  // repeated .pb_user_t_prj f_prj_list = 8;
  inline int f_prj_list_size() const;
  inline void clear_f_prj_list();
  static const int kFPrjListFieldNumber = 8;
  inline const ::pb_user_t_prj& f_prj_list(int index) const;
  inline ::pb_user_t_prj* mutable_f_prj_list(int index);
  inline ::pb_user_t_prj* add_f_prj_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_prj >&
      f_prj_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_prj >*
      mutable_f_prj_list();

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
  inline int f_recommend_friends_size() const;
  inline void clear_f_recommend_friends();
  static const int kFRecommendFriendsFieldNumber = 9;
  inline const ::pb_user_t_recommend_friend& f_recommend_friends(int index) const;
  inline ::pb_user_t_recommend_friend* mutable_f_recommend_friends(int index);
  inline ::pb_user_t_recommend_friend* add_f_recommend_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >&
      f_recommend_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >*
      mutable_f_recommend_friends();

  // repeated .pb_prj_t_recommend_info f_prjs = 10;
  inline int f_prjs_size() const;
  inline void clear_f_prjs();
  static const int kFPrjsFieldNumber = 10;
  inline const ::pb_prj_t_recommend_info& f_prjs(int index) const;
  inline ::pb_prj_t_recommend_info* mutable_f_prjs(int index);
  inline ::pb_prj_t_recommend_info* add_f_prjs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >&
      f_prjs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >*
      mutable_f_prjs();

  // @@protoc_insertion_point(class_scope:pb_user_t_data)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();
  inline void set_has_f_extra();
  inline void clear_has_f_extra();
  inline void set_has_f_other_info();
  inline void clear_has_f_other_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_user_t_info* f_info_;
  ::pb_user_t_extra* f_extra_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend > f_friend_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend > f_friend_validation_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend > f_friend_recommend_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_im_group > f_im_group_;
  ::pb_user_t_info* f_other_info_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_prj > f_prj_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend > f_recommend_friends_;
  ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info > f_prjs_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_data* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_clt_t_friend

// optional int32 f_update_type = 1;
inline bool pb_clt_t_friend::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_friend::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_friend::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_friend::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_clt_t_friend::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_friend.f_update_type)
  return f_update_type_;
}
inline void pb_clt_t_friend::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_friend.f_update_type)
}

// repeated .pb_user_t_friend f_friends = 2;
inline int pb_clt_t_friend::f_friends_size() const {
  return f_friends_.size();
}
inline void pb_clt_t_friend::clear_f_friends() {
  f_friends_.Clear();
}
inline const ::pb_user_t_friend& pb_clt_t_friend::f_friends(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_friend.f_friends)
  return f_friends_.Get(index);
}
inline ::pb_user_t_friend* pb_clt_t_friend::mutable_f_friends(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_friend.f_friends)
  return f_friends_.Mutable(index);
}
inline ::pb_user_t_friend* pb_clt_t_friend::add_f_friends() {
  // @@protoc_insertion_point(field_add:pb_clt_t_friend.f_friends)
  return f_friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
pb_clt_t_friend::f_friends() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_friend.f_friends)
  return f_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
pb_clt_t_friend::mutable_f_friends() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_friend.f_friends)
  return &f_friends_;
}

// -------------------------------------------------------------------

// pb_clt_t_recommend_friend

// optional int32 f_update_type = 1;
inline bool pb_clt_t_recommend_friend::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_recommend_friend::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_recommend_friend::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_recommend_friend::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_clt_t_recommend_friend::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_recommend_friend.f_update_type)
  return f_update_type_;
}
inline void pb_clt_t_recommend_friend::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_recommend_friend.f_update_type)
}

// repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
inline int pb_clt_t_recommend_friend::f_recommend_friends_size() const {
  return f_recommend_friends_.size();
}
inline void pb_clt_t_recommend_friend::clear_f_recommend_friends() {
  f_recommend_friends_.Clear();
}
inline const ::pb_user_t_recommend_friend& pb_clt_t_recommend_friend::f_recommend_friends(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_recommend_friend.f_recommend_friends)
  return f_recommend_friends_.Get(index);
}
inline ::pb_user_t_recommend_friend* pb_clt_t_recommend_friend::mutable_f_recommend_friends(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_recommend_friend.f_recommend_friends)
  return f_recommend_friends_.Mutable(index);
}
inline ::pb_user_t_recommend_friend* pb_clt_t_recommend_friend::add_f_recommend_friends() {
  // @@protoc_insertion_point(field_add:pb_clt_t_recommend_friend.f_recommend_friends)
  return f_recommend_friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >&
pb_clt_t_recommend_friend::f_recommend_friends() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_recommend_friend.f_recommend_friends)
  return f_recommend_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >*
pb_clt_t_recommend_friend::mutable_f_recommend_friends() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_recommend_friend.f_recommend_friends)
  return &f_recommend_friends_;
}

// -------------------------------------------------------------------

// pb_clt_t_group_user

// optional uint32 f_uin = 1;
inline bool pb_clt_t_group_user::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_group_user::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_group_user::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_clt_t_group_user::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_uin)
  return f_uin_;
}
inline void pb_clt_t_group_user::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_uin)
}

// optional string f_name = 2;
inline bool pb_clt_t_group_user::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_clt_t_group_user::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_clt_t_group_user::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_clt_t_group_user::f_name() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_name)
  return *f_name_;
}
inline void pb_clt_t_group_user::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_name)
}
inline void pb_clt_t_group_user::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_user.f_name)
}
inline void pb_clt_t_group_user::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_user.f_name)
}
inline ::std::string* pb_clt_t_group_user::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_user.f_name)
  return f_name_;
}
inline ::std::string* pb_clt_t_group_user::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_user::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_user.f_name)
}

// optional string f_remark = 3;
inline bool pb_clt_t_group_user::has_f_remark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_remark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_clt_t_group_user::clear_has_f_remark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_clt_t_group_user::clear_f_remark() {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_->clear();
  }
  clear_has_f_remark();
}
inline const ::std::string& pb_clt_t_group_user::f_remark() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_remark)
  return *f_remark_;
}
inline void pb_clt_t_group_user::set_f_remark(const ::std::string& value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_remark)
}
inline void pb_clt_t_group_user::set_f_remark(const char* value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_user.f_remark)
}
inline void pb_clt_t_group_user::set_f_remark(const char* value, size_t size) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_user.f_remark)
}
inline ::std::string* pb_clt_t_group_user::mutable_f_remark() {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_user.f_remark)
  return f_remark_;
}
inline ::std::string* pb_clt_t_group_user::release_f_remark() {
  clear_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_remark_;
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_user::set_allocated_f_remark(::std::string* f_remark) {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_remark) {
    set_has_f_remark();
    f_remark_ = f_remark;
  } else {
    clear_has_f_remark();
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_user.f_remark)
}

// optional int32 f_title = 4;
inline bool pb_clt_t_group_user::has_f_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_clt_t_group_user::clear_has_f_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_clt_t_group_user::clear_f_title() {
  f_title_ = 0;
  clear_has_f_title();
}
inline ::google::protobuf::int32 pb_clt_t_group_user::f_title() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_title)
  return f_title_;
}
inline void pb_clt_t_group_user::set_f_title(::google::protobuf::int32 value) {
  set_has_f_title();
  f_title_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_title)
}

// optional string f_initial = 5;
inline bool pb_clt_t_group_user::has_f_initial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_initial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_clt_t_group_user::clear_has_f_initial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_clt_t_group_user::clear_f_initial() {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_->clear();
  }
  clear_has_f_initial();
}
inline const ::std::string& pb_clt_t_group_user::f_initial() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_initial)
  return *f_initial_;
}
inline void pb_clt_t_group_user::set_f_initial(const ::std::string& value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_initial)
}
inline void pb_clt_t_group_user::set_f_initial(const char* value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_user.f_initial)
}
inline void pb_clt_t_group_user::set_f_initial(const char* value, size_t size) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_user.f_initial)
}
inline ::std::string* pb_clt_t_group_user::mutable_f_initial() {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_user.f_initial)
  return f_initial_;
}
inline ::std::string* pb_clt_t_group_user::release_f_initial() {
  clear_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_initial_;
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_user::set_allocated_f_initial(::std::string* f_initial) {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_initial) {
    set_has_f_initial();
    f_initial_ = f_initial;
  } else {
    clear_has_f_initial();
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_user.f_initial)
}

// optional int32 f_weight = 6;
inline bool pb_clt_t_group_user::has_f_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_clt_t_group_user::clear_has_f_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_clt_t_group_user::clear_f_weight() {
  f_weight_ = 0;
  clear_has_f_weight();
}
inline ::google::protobuf::int32 pb_clt_t_group_user::f_weight() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_weight)
  return f_weight_;
}
inline void pb_clt_t_group_user::set_f_weight(::google::protobuf::int32 value) {
  set_has_f_weight();
  f_weight_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_weight)
}

// optional string f_name_pinyin = 7;
inline bool pb_clt_t_group_user::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_clt_t_group_user::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_clt_t_group_user::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_clt_t_group_user::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_clt_t_group_user::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_name_pinyin)
}
inline void pb_clt_t_group_user::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_user.f_name_pinyin)
}
inline void pb_clt_t_group_user::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_user.f_name_pinyin)
}
inline ::std::string* pb_clt_t_group_user::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_user.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_clt_t_group_user::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_user::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_user.f_name_pinyin)
}

// optional string f_name_pinyin_j = 8;
inline bool pb_clt_t_group_user::has_f_name_pinyin_j() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_clt_t_group_user::set_has_f_name_pinyin_j() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_clt_t_group_user::clear_has_f_name_pinyin_j() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_clt_t_group_user::clear_f_name_pinyin_j() {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_->clear();
  }
  clear_has_f_name_pinyin_j();
}
inline const ::std::string& pb_clt_t_group_user::f_name_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_user.f_name_pinyin_j)
  return *f_name_pinyin_j_;
}
inline void pb_clt_t_group_user::set_f_name_pinyin_j(const ::std::string& value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_user.f_name_pinyin_j)
}
inline void pb_clt_t_group_user::set_f_name_pinyin_j(const char* value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_user.f_name_pinyin_j)
}
inline void pb_clt_t_group_user::set_f_name_pinyin_j(const char* value, size_t size) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_user.f_name_pinyin_j)
}
inline ::std::string* pb_clt_t_group_user::mutable_f_name_pinyin_j() {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_user.f_name_pinyin_j)
  return f_name_pinyin_j_;
}
inline ::std::string* pb_clt_t_group_user::release_f_name_pinyin_j() {
  clear_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_j_;
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_user::set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j) {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_name_pinyin_j) {
    set_has_f_name_pinyin_j();
    f_name_pinyin_j_ = f_name_pinyin_j;
  } else {
    clear_has_f_name_pinyin_j();
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_user.f_name_pinyin_j)
}

// -------------------------------------------------------------------

// pb_clt_t_group_item

// optional string f_group_id = 1;
inline bool pb_clt_t_group_item::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_group_item::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_group_item::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_clt_t_group_item::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_group_id)
  return *f_group_id_;
}
inline void pb_clt_t_group_item::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_group_id)
}
inline void pb_clt_t_group_item::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_group_id)
}
inline void pb_clt_t_group_item::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_group_id)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_clt_t_group_item::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_group_id)
}

// optional string f_group_name = 2;
inline bool pb_clt_t_group_item::has_f_group_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_group_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_clt_t_group_item::clear_has_f_group_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_clt_t_group_item::clear_f_group_name() {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_->clear();
  }
  clear_has_f_group_name();
}
inline const ::std::string& pb_clt_t_group_item::f_group_name() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_group_name)
  return *f_group_name_;
}
inline void pb_clt_t_group_item::set_f_group_name(const ::std::string& value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_group_name)
}
inline void pb_clt_t_group_item::set_f_group_name(const char* value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_group_name)
}
inline void pb_clt_t_group_item::set_f_group_name(const char* value, size_t size) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_group_name)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_group_name() {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_group_name)
  return f_group_name_;
}
inline ::std::string* pb_clt_t_group_item::release_f_group_name() {
  clear_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_name_;
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_group_name(::std::string* f_group_name) {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_name_;
  }
  if (f_group_name) {
    set_has_f_group_name();
    f_group_name_ = f_group_name;
  } else {
    clear_has_f_group_name();
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_group_name)
}

// optional string f_group_desc = 3;
inline bool pb_clt_t_group_item::has_f_group_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_group_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_clt_t_group_item::clear_has_f_group_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_clt_t_group_item::clear_f_group_desc() {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_->clear();
  }
  clear_has_f_group_desc();
}
inline const ::std::string& pb_clt_t_group_item::f_group_desc() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_group_desc)
  return *f_group_desc_;
}
inline void pb_clt_t_group_item::set_f_group_desc(const ::std::string& value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_group_desc)
}
inline void pb_clt_t_group_item::set_f_group_desc(const char* value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_group_desc)
}
inline void pb_clt_t_group_item::set_f_group_desc(const char* value, size_t size) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_group_desc)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_group_desc() {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_group_desc)
  return f_group_desc_;
}
inline ::std::string* pb_clt_t_group_item::release_f_group_desc() {
  clear_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_desc_;
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_group_desc(::std::string* f_group_desc) {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_desc_;
  }
  if (f_group_desc) {
    set_has_f_group_desc();
    f_group_desc_ = f_group_desc;
  } else {
    clear_has_f_group_desc();
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_group_desc)
}

// optional int32 f_group_type = 4;
inline bool pb_clt_t_group_item::has_f_group_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_group_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_clt_t_group_item::clear_has_f_group_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_clt_t_group_item::clear_f_group_type() {
  f_group_type_ = 0;
  clear_has_f_group_type();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_group_type() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_group_type)
  return f_group_type_;
}
inline void pb_clt_t_group_item::set_f_group_type(::google::protobuf::int32 value) {
  set_has_f_group_type();
  f_group_type_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_group_type)
}

// optional int32 f_seq = 5;
inline bool pb_clt_t_group_item::has_f_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_clt_t_group_item::clear_has_f_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_clt_t_group_item::clear_f_seq() {
  f_seq_ = 0;
  clear_has_f_seq();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_seq() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_seq)
  return f_seq_;
}
inline void pb_clt_t_group_item::set_f_seq(::google::protobuf::int32 value) {
  set_has_f_seq();
  f_seq_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_seq)
}

// optional string f_last_msg = 6;
inline bool pb_clt_t_group_item::has_f_last_msg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_last_msg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_clt_t_group_item::clear_has_f_last_msg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_clt_t_group_item::clear_f_last_msg() {
  if (f_last_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_msg_->clear();
  }
  clear_has_f_last_msg();
}
inline const ::std::string& pb_clt_t_group_item::f_last_msg() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_last_msg)
  return *f_last_msg_;
}
inline void pb_clt_t_group_item::set_f_last_msg(const ::std::string& value) {
  set_has_f_last_msg();
  if (f_last_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_msg_ = new ::std::string;
  }
  f_last_msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_last_msg)
}
inline void pb_clt_t_group_item::set_f_last_msg(const char* value) {
  set_has_f_last_msg();
  if (f_last_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_msg_ = new ::std::string;
  }
  f_last_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_last_msg)
}
inline void pb_clt_t_group_item::set_f_last_msg(const char* value, size_t size) {
  set_has_f_last_msg();
  if (f_last_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_msg_ = new ::std::string;
  }
  f_last_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_last_msg)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_last_msg() {
  set_has_f_last_msg();
  if (f_last_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_last_msg)
  return f_last_msg_;
}
inline ::std::string* pb_clt_t_group_item::release_f_last_msg() {
  clear_has_f_last_msg();
  if (f_last_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_last_msg_;
    f_last_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_last_msg(::std::string* f_last_msg) {
  if (f_last_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_msg_;
  }
  if (f_last_msg) {
    set_has_f_last_msg();
    f_last_msg_ = f_last_msg;
  } else {
    clear_has_f_last_msg();
    f_last_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_last_msg)
}

// optional int32 f_last_msg_time = 7;
inline bool pb_clt_t_group_item::has_f_last_msg_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_last_msg_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_clt_t_group_item::clear_has_f_last_msg_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_clt_t_group_item::clear_f_last_msg_time() {
  f_last_msg_time_ = 0;
  clear_has_f_last_msg_time();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_last_msg_time() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_last_msg_time)
  return f_last_msg_time_;
}
inline void pb_clt_t_group_item::set_f_last_msg_time(::google::protobuf::int32 value) {
  set_has_f_last_msg_time();
  f_last_msg_time_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_last_msg_time)
}

// optional int32 f_last_msg_type = 8;
inline bool pb_clt_t_group_item::has_f_last_msg_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_last_msg_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_clt_t_group_item::clear_has_f_last_msg_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_clt_t_group_item::clear_f_last_msg_type() {
  f_last_msg_type_ = 0;
  clear_has_f_last_msg_type();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_last_msg_type() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_last_msg_type)
  return f_last_msg_type_;
}
inline void pb_clt_t_group_item::set_f_last_msg_type(::google::protobuf::int32 value) {
  set_has_f_last_msg_type();
  f_last_msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_last_msg_type)
}

// optional int32 f_last_sender_id = 9;
inline bool pb_clt_t_group_item::has_f_last_sender_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_last_sender_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_clt_t_group_item::clear_has_f_last_sender_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_clt_t_group_item::clear_f_last_sender_id() {
  f_last_sender_id_ = 0;
  clear_has_f_last_sender_id();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_last_sender_id() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_last_sender_id)
  return f_last_sender_id_;
}
inline void pb_clt_t_group_item::set_f_last_sender_id(::google::protobuf::int32 value) {
  set_has_f_last_sender_id();
  f_last_sender_id_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_last_sender_id)
}

// optional string f_last_sender_name = 10;
inline bool pb_clt_t_group_item::has_f_last_sender_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_last_sender_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_clt_t_group_item::clear_has_f_last_sender_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_clt_t_group_item::clear_f_last_sender_name() {
  if (f_last_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_sender_name_->clear();
  }
  clear_has_f_last_sender_name();
}
inline const ::std::string& pb_clt_t_group_item::f_last_sender_name() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_last_sender_name)
  return *f_last_sender_name_;
}
inline void pb_clt_t_group_item::set_f_last_sender_name(const ::std::string& value) {
  set_has_f_last_sender_name();
  if (f_last_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_sender_name_ = new ::std::string;
  }
  f_last_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_last_sender_name)
}
inline void pb_clt_t_group_item::set_f_last_sender_name(const char* value) {
  set_has_f_last_sender_name();
  if (f_last_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_sender_name_ = new ::std::string;
  }
  f_last_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_last_sender_name)
}
inline void pb_clt_t_group_item::set_f_last_sender_name(const char* value, size_t size) {
  set_has_f_last_sender_name();
  if (f_last_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_sender_name_ = new ::std::string;
  }
  f_last_sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_last_sender_name)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_last_sender_name() {
  set_has_f_last_sender_name();
  if (f_last_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_last_sender_name)
  return f_last_sender_name_;
}
inline ::std::string* pb_clt_t_group_item::release_f_last_sender_name() {
  clear_has_f_last_sender_name();
  if (f_last_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_last_sender_name_;
    f_last_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_last_sender_name(::std::string* f_last_sender_name) {
  if (f_last_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_sender_name_;
  }
  if (f_last_sender_name) {
    set_has_f_last_sender_name();
    f_last_sender_name_ = f_last_sender_name;
  } else {
    clear_has_f_last_sender_name();
    f_last_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_last_sender_name)
}

// repeated string f_avatar = 11;
inline int pb_clt_t_group_item::f_avatar_size() const {
  return f_avatar_.size();
}
inline void pb_clt_t_group_item::clear_f_avatar() {
  f_avatar_.Clear();
}
inline const ::std::string& pb_clt_t_group_item::f_avatar(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_avatar)
  return f_avatar_.Get(index);
}
inline ::std::string* pb_clt_t_group_item::mutable_f_avatar(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_avatar)
  return f_avatar_.Mutable(index);
}
inline void pb_clt_t_group_item::set_f_avatar(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_avatar)
  f_avatar_.Mutable(index)->assign(value);
}
inline void pb_clt_t_group_item::set_f_avatar(int index, const char* value) {
  f_avatar_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_avatar)
}
inline void pb_clt_t_group_item::set_f_avatar(int index, const char* value, size_t size) {
  f_avatar_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_avatar)
}
inline ::std::string* pb_clt_t_group_item::add_f_avatar() {
  return f_avatar_.Add();
}
inline void pb_clt_t_group_item::add_f_avatar(const ::std::string& value) {
  f_avatar_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_clt_t_group_item.f_avatar)
}
inline void pb_clt_t_group_item::add_f_avatar(const char* value) {
  f_avatar_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_clt_t_group_item.f_avatar)
}
inline void pb_clt_t_group_item::add_f_avatar(const char* value, size_t size) {
  f_avatar_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_clt_t_group_item.f_avatar)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pb_clt_t_group_item::f_avatar() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_group_item.f_avatar)
  return f_avatar_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pb_clt_t_group_item::mutable_f_avatar() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_group_item.f_avatar)
  return &f_avatar_;
}

// optional int32 f_is_screen = 12;
inline bool pb_clt_t_group_item::has_f_is_screen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_is_screen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_clt_t_group_item::clear_has_f_is_screen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_clt_t_group_item::clear_f_is_screen() {
  f_is_screen_ = 0;
  clear_has_f_is_screen();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_is_screen() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_is_screen)
  return f_is_screen_;
}
inline void pb_clt_t_group_item::set_f_is_screen(::google::protobuf::int32 value) {
  set_has_f_is_screen();
  f_is_screen_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_is_screen)
}

// optional int32 f_is_remind = 13;
inline bool pb_clt_t_group_item::has_f_is_remind() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_is_remind() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_clt_t_group_item::clear_has_f_is_remind() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_clt_t_group_item::clear_f_is_remind() {
  f_is_remind_ = 0;
  clear_has_f_is_remind();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_is_remind() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_is_remind)
  return f_is_remind_;
}
inline void pb_clt_t_group_item::set_f_is_remind(::google::protobuf::int32 value) {
  set_has_f_is_remind();
  f_is_remind_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_is_remind)
}

// optional string f_remark = 14;
inline bool pb_clt_t_group_item::has_f_remark() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_remark() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_clt_t_group_item::clear_has_f_remark() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_clt_t_group_item::clear_f_remark() {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_->clear();
  }
  clear_has_f_remark();
}
inline const ::std::string& pb_clt_t_group_item::f_remark() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_remark)
  return *f_remark_;
}
inline void pb_clt_t_group_item::set_f_remark(const ::std::string& value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_remark)
}
inline void pb_clt_t_group_item::set_f_remark(const char* value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_remark)
}
inline void pb_clt_t_group_item::set_f_remark(const char* value, size_t size) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_remark)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_remark() {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_remark)
  return f_remark_;
}
inline ::std::string* pb_clt_t_group_item::release_f_remark() {
  clear_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_remark_;
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_remark(::std::string* f_remark) {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_remark) {
    set_has_f_remark();
    f_remark_ = f_remark;
  } else {
    clear_has_f_remark();
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_remark)
}

// optional string f_initial = 15;
inline bool pb_clt_t_group_item::has_f_initial() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_initial() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pb_clt_t_group_item::clear_has_f_initial() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pb_clt_t_group_item::clear_f_initial() {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_->clear();
  }
  clear_has_f_initial();
}
inline const ::std::string& pb_clt_t_group_item::f_initial() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_initial)
  return *f_initial_;
}
inline void pb_clt_t_group_item::set_f_initial(const ::std::string& value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_initial)
}
inline void pb_clt_t_group_item::set_f_initial(const char* value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_initial)
}
inline void pb_clt_t_group_item::set_f_initial(const char* value, size_t size) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_initial)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_initial() {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_initial)
  return f_initial_;
}
inline ::std::string* pb_clt_t_group_item::release_f_initial() {
  clear_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_initial_;
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_initial(::std::string* f_initial) {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_initial) {
    set_has_f_initial();
    f_initial_ = f_initial;
  } else {
    clear_has_f_initial();
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_initial)
}

// optional int32 f_weight = 16;
inline bool pb_clt_t_group_item::has_f_weight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_weight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pb_clt_t_group_item::clear_has_f_weight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pb_clt_t_group_item::clear_f_weight() {
  f_weight_ = 0;
  clear_has_f_weight();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_weight() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_weight)
  return f_weight_;
}
inline void pb_clt_t_group_item::set_f_weight(::google::protobuf::int32 value) {
  set_has_f_weight();
  f_weight_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_weight)
}

// optional string f_name_pinyin = 17;
inline bool pb_clt_t_group_item::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pb_clt_t_group_item::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pb_clt_t_group_item::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_clt_t_group_item::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_clt_t_group_item::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_name_pinyin)
}
inline void pb_clt_t_group_item::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_name_pinyin)
}
inline void pb_clt_t_group_item::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_name_pinyin)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_clt_t_group_item::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_name_pinyin)
}

// optional string f_name_pinyin_j = 18;
inline bool pb_clt_t_group_item::has_f_name_pinyin_j() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_name_pinyin_j() {
  _has_bits_[0] |= 0x00020000u;
}
inline void pb_clt_t_group_item::clear_has_f_name_pinyin_j() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void pb_clt_t_group_item::clear_f_name_pinyin_j() {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_->clear();
  }
  clear_has_f_name_pinyin_j();
}
inline const ::std::string& pb_clt_t_group_item::f_name_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_name_pinyin_j)
  return *f_name_pinyin_j_;
}
inline void pb_clt_t_group_item::set_f_name_pinyin_j(const ::std::string& value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_name_pinyin_j)
}
inline void pb_clt_t_group_item::set_f_name_pinyin_j(const char* value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group_item.f_name_pinyin_j)
}
inline void pb_clt_t_group_item::set_f_name_pinyin_j(const char* value, size_t size) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group_item.f_name_pinyin_j)
}
inline ::std::string* pb_clt_t_group_item::mutable_f_name_pinyin_j() {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_item.f_name_pinyin_j)
  return f_name_pinyin_j_;
}
inline ::std::string* pb_clt_t_group_item::release_f_name_pinyin_j() {
  clear_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_j_;
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group_item::set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j) {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_name_pinyin_j) {
    set_has_f_name_pinyin_j();
    f_name_pinyin_j_ = f_name_pinyin_j;
  } else {
    clear_has_f_name_pinyin_j();
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_item.f_name_pinyin_j)
}

// optional int32 f_member_count = 19;
inline bool pb_clt_t_group_item::has_f_member_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void pb_clt_t_group_item::set_has_f_member_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void pb_clt_t_group_item::clear_has_f_member_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void pb_clt_t_group_item::clear_f_member_count() {
  f_member_count_ = 0;
  clear_has_f_member_count();
}
inline ::google::protobuf::int32 pb_clt_t_group_item::f_member_count() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_item.f_member_count)
  return f_member_count_;
}
inline void pb_clt_t_group_item::set_f_member_count(::google::protobuf::int32 value) {
  set_has_f_member_count();
  f_member_count_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group_item.f_member_count)
}

// -------------------------------------------------------------------

// pb_clt_t_group_details

// optional .pb_clt_t_group_item f_group_info = 1;
inline bool pb_clt_t_group_details::has_f_group_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_group_details::set_has_f_group_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_group_details::clear_has_f_group_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_group_details::clear_f_group_info() {
  if (f_group_info_ != NULL) f_group_info_->::pb_clt_t_group_item::Clear();
  clear_has_f_group_info();
}
inline const ::pb_clt_t_group_item& pb_clt_t_group_details::f_group_info() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_details.f_group_info)
  return f_group_info_ != NULL ? *f_group_info_ : *default_instance_->f_group_info_;
}
inline ::pb_clt_t_group_item* pb_clt_t_group_details::mutable_f_group_info() {
  set_has_f_group_info();
  if (f_group_info_ == NULL) f_group_info_ = new ::pb_clt_t_group_item;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_details.f_group_info)
  return f_group_info_;
}
inline ::pb_clt_t_group_item* pb_clt_t_group_details::release_f_group_info() {
  clear_has_f_group_info();
  ::pb_clt_t_group_item* temp = f_group_info_;
  f_group_info_ = NULL;
  return temp;
}
inline void pb_clt_t_group_details::set_allocated_f_group_info(::pb_clt_t_group_item* f_group_info) {
  delete f_group_info_;
  f_group_info_ = f_group_info;
  if (f_group_info) {
    set_has_f_group_info();
  } else {
    clear_has_f_group_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group_details.f_group_info)
}

// repeated .pb_clt_t_group_user f_members = 2;
inline int pb_clt_t_group_details::f_members_size() const {
  return f_members_.size();
}
inline void pb_clt_t_group_details::clear_f_members() {
  f_members_.Clear();
}
inline const ::pb_clt_t_group_user& pb_clt_t_group_details::f_members(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group_details.f_members)
  return f_members_.Get(index);
}
inline ::pb_clt_t_group_user* pb_clt_t_group_details::mutable_f_members(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group_details.f_members)
  return f_members_.Mutable(index);
}
inline ::pb_clt_t_group_user* pb_clt_t_group_details::add_f_members() {
  // @@protoc_insertion_point(field_add:pb_clt_t_group_details.f_members)
  return f_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_user >&
pb_clt_t_group_details::f_members() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_group_details.f_members)
  return f_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_user >*
pb_clt_t_group_details::mutable_f_members() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_group_details.f_members)
  return &f_members_;
}

// -------------------------------------------------------------------

// pb_clt_t_group

// optional int32 f_update_type = 1;
inline bool pb_clt_t_group::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_group::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_group::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_group::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_clt_t_group::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group.f_update_type)
  return f_update_type_;
}
inline void pb_clt_t_group::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_group.f_update_type)
}

// optional string f_last_update_gid = 2;
inline bool pb_clt_t_group::has_f_last_update_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_clt_t_group::set_has_f_last_update_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_clt_t_group::clear_has_f_last_update_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_clt_t_group::clear_f_last_update_gid() {
  if (f_last_update_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_update_gid_->clear();
  }
  clear_has_f_last_update_gid();
}
inline const ::std::string& pb_clt_t_group::f_last_update_gid() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group.f_last_update_gid)
  return *f_last_update_gid_;
}
inline void pb_clt_t_group::set_f_last_update_gid(const ::std::string& value) {
  set_has_f_last_update_gid();
  if (f_last_update_gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_update_gid_ = new ::std::string;
  }
  f_last_update_gid_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_group.f_last_update_gid)
}
inline void pb_clt_t_group::set_f_last_update_gid(const char* value) {
  set_has_f_last_update_gid();
  if (f_last_update_gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_update_gid_ = new ::std::string;
  }
  f_last_update_gid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_group.f_last_update_gid)
}
inline void pb_clt_t_group::set_f_last_update_gid(const char* value, size_t size) {
  set_has_f_last_update_gid();
  if (f_last_update_gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_update_gid_ = new ::std::string;
  }
  f_last_update_gid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_group.f_last_update_gid)
}
inline ::std::string* pb_clt_t_group::mutable_f_last_update_gid() {
  set_has_f_last_update_gid();
  if (f_last_update_gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_last_update_gid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group.f_last_update_gid)
  return f_last_update_gid_;
}
inline ::std::string* pb_clt_t_group::release_f_last_update_gid() {
  clear_has_f_last_update_gid();
  if (f_last_update_gid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_last_update_gid_;
    f_last_update_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_group::set_allocated_f_last_update_gid(::std::string* f_last_update_gid) {
  if (f_last_update_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_update_gid_;
  }
  if (f_last_update_gid) {
    set_has_f_last_update_gid();
    f_last_update_gid_ = f_last_update_gid;
  } else {
    clear_has_f_last_update_gid();
    f_last_update_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_group.f_last_update_gid)
}

// repeated .pb_clt_t_group_item f_im_group = 3;
inline int pb_clt_t_group::f_im_group_size() const {
  return f_im_group_.size();
}
inline void pb_clt_t_group::clear_f_im_group() {
  f_im_group_.Clear();
}
inline const ::pb_clt_t_group_item& pb_clt_t_group::f_im_group(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_group.f_im_group)
  return f_im_group_.Get(index);
}
inline ::pb_clt_t_group_item* pb_clt_t_group::mutable_f_im_group(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_group.f_im_group)
  return f_im_group_.Mutable(index);
}
inline ::pb_clt_t_group_item* pb_clt_t_group::add_f_im_group() {
  // @@protoc_insertion_point(field_add:pb_clt_t_group.f_im_group)
  return f_im_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_item >&
pb_clt_t_group::f_im_group() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_group.f_im_group)
  return f_im_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_clt_t_group_item >*
pb_clt_t_group::mutable_f_im_group() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_group.f_im_group)
  return &f_im_group_;
}

// -------------------------------------------------------------------

// pb_clt_t_version

// optional int32 f_version_id = 1;
inline bool pb_clt_t_version::has_f_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_version::set_has_f_version_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_version::clear_has_f_version_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_version::clear_f_version_id() {
  f_version_id_ = 0;
  clear_has_f_version_id();
}
inline ::google::protobuf::int32 pb_clt_t_version::f_version_id() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_version.f_version_id)
  return f_version_id_;
}
inline void pb_clt_t_version::set_f_version_id(::google::protobuf::int32 value) {
  set_has_f_version_id();
  f_version_id_ = value;
  // @@protoc_insertion_point(field_set:pb_clt_t_version.f_version_id)
}

// optional string f_version_msg = 2;
inline bool pb_clt_t_version::has_f_version_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_clt_t_version::set_has_f_version_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_clt_t_version::clear_has_f_version_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_clt_t_version::clear_f_version_msg() {
  if (f_version_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_version_msg_->clear();
  }
  clear_has_f_version_msg();
}
inline const ::std::string& pb_clt_t_version::f_version_msg() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_version.f_version_msg)
  return *f_version_msg_;
}
inline void pb_clt_t_version::set_f_version_msg(const ::std::string& value) {
  set_has_f_version_msg();
  if (f_version_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_version_msg_ = new ::std::string;
  }
  f_version_msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb_clt_t_version.f_version_msg)
}
inline void pb_clt_t_version::set_f_version_msg(const char* value) {
  set_has_f_version_msg();
  if (f_version_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_version_msg_ = new ::std::string;
  }
  f_version_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_clt_t_version.f_version_msg)
}
inline void pb_clt_t_version::set_f_version_msg(const char* value, size_t size) {
  set_has_f_version_msg();
  if (f_version_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_version_msg_ = new ::std::string;
  }
  f_version_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_clt_t_version.f_version_msg)
}
inline ::std::string* pb_clt_t_version::mutable_f_version_msg() {
  set_has_f_version_msg();
  if (f_version_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_version_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_clt_t_version.f_version_msg)
  return f_version_msg_;
}
inline ::std::string* pb_clt_t_version::release_f_version_msg() {
  clear_has_f_version_msg();
  if (f_version_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_version_msg_;
    f_version_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_clt_t_version::set_allocated_f_version_msg(::std::string* f_version_msg) {
  if (f_version_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_version_msg_;
  }
  if (f_version_msg) {
    set_has_f_version_msg();
    f_version_msg_ = f_version_msg;
  } else {
    clear_has_f_version_msg();
    f_version_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_version.f_version_msg)
}

// -------------------------------------------------------------------

// pb_clt_t_user

// optional .pb_user_t_info f_info = 1;
inline bool pb_clt_t_user::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_user::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_user::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_user::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_user_t_info& pb_clt_t_user::f_info() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_info)
  return f_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::release_f_info() {
  clear_has_f_info();
  ::pb_user_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_info(::pb_user_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_info)
}

// optional .pb_clt_t_friend f_friend_list = 2;
inline bool pb_clt_t_user::has_f_friend_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_clt_t_user::set_has_f_friend_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_clt_t_user::clear_has_f_friend_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_clt_t_user::clear_f_friend_list() {
  if (f_friend_list_ != NULL) f_friend_list_->::pb_clt_t_friend::Clear();
  clear_has_f_friend_list();
}
inline const ::pb_clt_t_friend& pb_clt_t_user::f_friend_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_friend_list)
  return f_friend_list_ != NULL ? *f_friend_list_ : *default_instance_->f_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::mutable_f_friend_list() {
  set_has_f_friend_list();
  if (f_friend_list_ == NULL) f_friend_list_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_friend_list)
  return f_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::release_f_friend_list() {
  clear_has_f_friend_list();
  ::pb_clt_t_friend* temp = f_friend_list_;
  f_friend_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_friend_list(::pb_clt_t_friend* f_friend_list) {
  delete f_friend_list_;
  f_friend_list_ = f_friend_list;
  if (f_friend_list) {
    set_has_f_friend_list();
  } else {
    clear_has_f_friend_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_friend_list)
}

// optional .pb_clt_t_friend f_search_friend_list = 3;
inline bool pb_clt_t_user::has_f_search_friend_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_clt_t_user::set_has_f_search_friend_list() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_clt_t_user::clear_has_f_search_friend_list() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_clt_t_user::clear_f_search_friend_list() {
  if (f_search_friend_list_ != NULL) f_search_friend_list_->::pb_clt_t_friend::Clear();
  clear_has_f_search_friend_list();
}
inline const ::pb_clt_t_friend& pb_clt_t_user::f_search_friend_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_search_friend_list)
  return f_search_friend_list_ != NULL ? *f_search_friend_list_ : *default_instance_->f_search_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::mutable_f_search_friend_list() {
  set_has_f_search_friend_list();
  if (f_search_friend_list_ == NULL) f_search_friend_list_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_search_friend_list)
  return f_search_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::release_f_search_friend_list() {
  clear_has_f_search_friend_list();
  ::pb_clt_t_friend* temp = f_search_friend_list_;
  f_search_friend_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_search_friend_list(::pb_clt_t_friend* f_search_friend_list) {
  delete f_search_friend_list_;
  f_search_friend_list_ = f_search_friend_list;
  if (f_search_friend_list) {
    set_has_f_search_friend_list();
  } else {
    clear_has_f_search_friend_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_search_friend_list)
}

// optional .pb_clt_t_friend f_validation_friend_list = 4;
inline bool pb_clt_t_user::has_f_validation_friend_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_clt_t_user::set_has_f_validation_friend_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_clt_t_user::clear_has_f_validation_friend_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_clt_t_user::clear_f_validation_friend_list() {
  if (f_validation_friend_list_ != NULL) f_validation_friend_list_->::pb_clt_t_friend::Clear();
  clear_has_f_validation_friend_list();
}
inline const ::pb_clt_t_friend& pb_clt_t_user::f_validation_friend_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_validation_friend_list)
  return f_validation_friend_list_ != NULL ? *f_validation_friend_list_ : *default_instance_->f_validation_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::mutable_f_validation_friend_list() {
  set_has_f_validation_friend_list();
  if (f_validation_friend_list_ == NULL) f_validation_friend_list_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_validation_friend_list)
  return f_validation_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::release_f_validation_friend_list() {
  clear_has_f_validation_friend_list();
  ::pb_clt_t_friend* temp = f_validation_friend_list_;
  f_validation_friend_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_validation_friend_list(::pb_clt_t_friend* f_validation_friend_list) {
  delete f_validation_friend_list_;
  f_validation_friend_list_ = f_validation_friend_list;
  if (f_validation_friend_list) {
    set_has_f_validation_friend_list();
  } else {
    clear_has_f_validation_friend_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_validation_friend_list)
}

// optional .pb_clt_t_friend f_recommend_friend_list = 5;
inline bool pb_clt_t_user::has_f_recommend_friend_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_clt_t_user::set_has_f_recommend_friend_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_clt_t_user::clear_has_f_recommend_friend_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_clt_t_user::clear_f_recommend_friend_list() {
  if (f_recommend_friend_list_ != NULL) f_recommend_friend_list_->::pb_clt_t_friend::Clear();
  clear_has_f_recommend_friend_list();
}
inline const ::pb_clt_t_friend& pb_clt_t_user::f_recommend_friend_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_recommend_friend_list)
  return f_recommend_friend_list_ != NULL ? *f_recommend_friend_list_ : *default_instance_->f_recommend_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::mutable_f_recommend_friend_list() {
  set_has_f_recommend_friend_list();
  if (f_recommend_friend_list_ == NULL) f_recommend_friend_list_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_recommend_friend_list)
  return f_recommend_friend_list_;
}
inline ::pb_clt_t_friend* pb_clt_t_user::release_f_recommend_friend_list() {
  clear_has_f_recommend_friend_list();
  ::pb_clt_t_friend* temp = f_recommend_friend_list_;
  f_recommend_friend_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_recommend_friend_list(::pb_clt_t_friend* f_recommend_friend_list) {
  delete f_recommend_friend_list_;
  f_recommend_friend_list_ = f_recommend_friend_list;
  if (f_recommend_friend_list) {
    set_has_f_recommend_friend_list();
  } else {
    clear_has_f_recommend_friend_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_recommend_friend_list)
}

// optional .pb_clt_t_group f_im_group = 6;
inline bool pb_clt_t_user::has_f_im_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_clt_t_user::set_has_f_im_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_clt_t_user::clear_has_f_im_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_clt_t_user::clear_f_im_group() {
  if (f_im_group_ != NULL) f_im_group_->::pb_clt_t_group::Clear();
  clear_has_f_im_group();
}
inline const ::pb_clt_t_group& pb_clt_t_user::f_im_group() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_im_group)
  return f_im_group_ != NULL ? *f_im_group_ : *default_instance_->f_im_group_;
}
inline ::pb_clt_t_group* pb_clt_t_user::mutable_f_im_group() {
  set_has_f_im_group();
  if (f_im_group_ == NULL) f_im_group_ = new ::pb_clt_t_group;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_im_group)
  return f_im_group_;
}
inline ::pb_clt_t_group* pb_clt_t_user::release_f_im_group() {
  clear_has_f_im_group();
  ::pb_clt_t_group* temp = f_im_group_;
  f_im_group_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_im_group(::pb_clt_t_group* f_im_group) {
  delete f_im_group_;
  f_im_group_ = f_im_group;
  if (f_im_group) {
    set_has_f_im_group();
  } else {
    clear_has_f_im_group();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_im_group)
}

// optional .pb_user_t_info f_friend_info = 7;
inline bool pb_clt_t_user::has_f_friend_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_clt_t_user::set_has_f_friend_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_clt_t_user::clear_has_f_friend_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_clt_t_user::clear_f_friend_info() {
  if (f_friend_info_ != NULL) f_friend_info_->::pb_user_t_info::Clear();
  clear_has_f_friend_info();
}
inline const ::pb_user_t_info& pb_clt_t_user::f_friend_info() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_friend_info)
  return f_friend_info_ != NULL ? *f_friend_info_ : *default_instance_->f_friend_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::mutable_f_friend_info() {
  set_has_f_friend_info();
  if (f_friend_info_ == NULL) f_friend_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_friend_info)
  return f_friend_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::release_f_friend_info() {
  clear_has_f_friend_info();
  ::pb_user_t_info* temp = f_friend_info_;
  f_friend_info_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_friend_info(::pb_user_t_info* f_friend_info) {
  delete f_friend_info_;
  f_friend_info_ = f_friend_info;
  if (f_friend_info) {
    set_has_f_friend_info();
  } else {
    clear_has_f_friend_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_friend_info)
}

// optional .pb_im_t_msg f_im_msg = 8;
inline bool pb_clt_t_user::has_f_im_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_clt_t_user::set_has_f_im_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_clt_t_user::clear_has_f_im_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_clt_t_user::clear_f_im_msg() {
  if (f_im_msg_ != NULL) f_im_msg_->::pb_im_t_msg::Clear();
  clear_has_f_im_msg();
}
inline const ::pb_im_t_msg& pb_clt_t_user::f_im_msg() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_im_msg)
  return f_im_msg_ != NULL ? *f_im_msg_ : *default_instance_->f_im_msg_;
}
inline ::pb_im_t_msg* pb_clt_t_user::mutable_f_im_msg() {
  set_has_f_im_msg();
  if (f_im_msg_ == NULL) f_im_msg_ = new ::pb_im_t_msg;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_im_msg)
  return f_im_msg_;
}
inline ::pb_im_t_msg* pb_clt_t_user::release_f_im_msg() {
  clear_has_f_im_msg();
  ::pb_im_t_msg* temp = f_im_msg_;
  f_im_msg_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_im_msg(::pb_im_t_msg* f_im_msg) {
  delete f_im_msg_;
  f_im_msg_ = f_im_msg;
  if (f_im_msg) {
    set_has_f_im_msg();
  } else {
    clear_has_f_im_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_im_msg)
}

// optional .pb_clt_t_group_details f_im_group_details = 9;
inline bool pb_clt_t_user::has_f_im_group_details() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_clt_t_user::set_has_f_im_group_details() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_clt_t_user::clear_has_f_im_group_details() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_clt_t_user::clear_f_im_group_details() {
  if (f_im_group_details_ != NULL) f_im_group_details_->::pb_clt_t_group_details::Clear();
  clear_has_f_im_group_details();
}
inline const ::pb_clt_t_group_details& pb_clt_t_user::f_im_group_details() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_im_group_details)
  return f_im_group_details_ != NULL ? *f_im_group_details_ : *default_instance_->f_im_group_details_;
}
inline ::pb_clt_t_group_details* pb_clt_t_user::mutable_f_im_group_details() {
  set_has_f_im_group_details();
  if (f_im_group_details_ == NULL) f_im_group_details_ = new ::pb_clt_t_group_details;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_im_group_details)
  return f_im_group_details_;
}
inline ::pb_clt_t_group_details* pb_clt_t_user::release_f_im_group_details() {
  clear_has_f_im_group_details();
  ::pb_clt_t_group_details* temp = f_im_group_details_;
  f_im_group_details_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_im_group_details(::pb_clt_t_group_details* f_im_group_details) {
  delete f_im_group_details_;
  f_im_group_details_ = f_im_group_details;
  if (f_im_group_details) {
    set_has_f_im_group_details();
  } else {
    clear_has_f_im_group_details();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_im_group_details)
}

// optional .pb_prj_t_prj f_prj_list = 10;
inline bool pb_clt_t_user::has_f_prj_list() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_clt_t_user::set_has_f_prj_list() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_clt_t_user::clear_has_f_prj_list() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_clt_t_user::clear_f_prj_list() {
  if (f_prj_list_ != NULL) f_prj_list_->::pb_prj_t_prj::Clear();
  clear_has_f_prj_list();
}
inline const ::pb_prj_t_prj& pb_clt_t_user::f_prj_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_prj_list)
  return f_prj_list_ != NULL ? *f_prj_list_ : *default_instance_->f_prj_list_;
}
inline ::pb_prj_t_prj* pb_clt_t_user::mutable_f_prj_list() {
  set_has_f_prj_list();
  if (f_prj_list_ == NULL) f_prj_list_ = new ::pb_prj_t_prj;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_prj_list)
  return f_prj_list_;
}
inline ::pb_prj_t_prj* pb_clt_t_user::release_f_prj_list() {
  clear_has_f_prj_list();
  ::pb_prj_t_prj* temp = f_prj_list_;
  f_prj_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_prj_list(::pb_prj_t_prj* f_prj_list) {
  delete f_prj_list_;
  f_prj_list_ = f_prj_list;
  if (f_prj_list) {
    set_has_f_prj_list();
  } else {
    clear_has_f_prj_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_prj_list)
}

// optional .pb_prj_t_details f_prj_details = 11;
inline bool pb_clt_t_user::has_f_prj_details() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_clt_t_user::set_has_f_prj_details() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_clt_t_user::clear_has_f_prj_details() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_clt_t_user::clear_f_prj_details() {
  if (f_prj_details_ != NULL) f_prj_details_->::pb_prj_t_details::Clear();
  clear_has_f_prj_details();
}
inline const ::pb_prj_t_details& pb_clt_t_user::f_prj_details() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_prj_details)
  return f_prj_details_ != NULL ? *f_prj_details_ : *default_instance_->f_prj_details_;
}
inline ::pb_prj_t_details* pb_clt_t_user::mutable_f_prj_details() {
  set_has_f_prj_details();
  if (f_prj_details_ == NULL) f_prj_details_ = new ::pb_prj_t_details;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_prj_details)
  return f_prj_details_;
}
inline ::pb_prj_t_details* pb_clt_t_user::release_f_prj_details() {
  clear_has_f_prj_details();
  ::pb_prj_t_details* temp = f_prj_details_;
  f_prj_details_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_prj_details(::pb_prj_t_details* f_prj_details) {
  delete f_prj_details_;
  f_prj_details_ = f_prj_details;
  if (f_prj_details) {
    set_has_f_prj_details();
  } else {
    clear_has_f_prj_details();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_prj_details)
}

// optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 12;
inline bool pb_clt_t_user::has_f_n_recommend_friend_list() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_clt_t_user::set_has_f_n_recommend_friend_list() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_clt_t_user::clear_has_f_n_recommend_friend_list() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_clt_t_user::clear_f_n_recommend_friend_list() {
  if (f_n_recommend_friend_list_ != NULL) f_n_recommend_friend_list_->::pb_clt_t_recommend_friend::Clear();
  clear_has_f_n_recommend_friend_list();
}
inline const ::pb_clt_t_recommend_friend& pb_clt_t_user::f_n_recommend_friend_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_n_recommend_friend_list)
  return f_n_recommend_friend_list_ != NULL ? *f_n_recommend_friend_list_ : *default_instance_->f_n_recommend_friend_list_;
}
inline ::pb_clt_t_recommend_friend* pb_clt_t_user::mutable_f_n_recommend_friend_list() {
  set_has_f_n_recommend_friend_list();
  if (f_n_recommend_friend_list_ == NULL) f_n_recommend_friend_list_ = new ::pb_clt_t_recommend_friend;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_n_recommend_friend_list)
  return f_n_recommend_friend_list_;
}
inline ::pb_clt_t_recommend_friend* pb_clt_t_user::release_f_n_recommend_friend_list() {
  clear_has_f_n_recommend_friend_list();
  ::pb_clt_t_recommend_friend* temp = f_n_recommend_friend_list_;
  f_n_recommend_friend_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_n_recommend_friend_list(::pb_clt_t_recommend_friend* f_n_recommend_friend_list) {
  delete f_n_recommend_friend_list_;
  f_n_recommend_friend_list_ = f_n_recommend_friend_list;
  if (f_n_recommend_friend_list) {
    set_has_f_n_recommend_friend_list();
  } else {
    clear_has_f_n_recommend_friend_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_n_recommend_friend_list)
}

// optional .pb_prj_t_recommend_prj f_recommend_prj_list = 13;
inline bool pb_clt_t_user::has_f_recommend_prj_list() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_clt_t_user::set_has_f_recommend_prj_list() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_clt_t_user::clear_has_f_recommend_prj_list() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_clt_t_user::clear_f_recommend_prj_list() {
  if (f_recommend_prj_list_ != NULL) f_recommend_prj_list_->::pb_prj_t_recommend_prj::Clear();
  clear_has_f_recommend_prj_list();
}
inline const ::pb_prj_t_recommend_prj& pb_clt_t_user::f_recommend_prj_list() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_recommend_prj_list)
  return f_recommend_prj_list_ != NULL ? *f_recommend_prj_list_ : *default_instance_->f_recommend_prj_list_;
}
inline ::pb_prj_t_recommend_prj* pb_clt_t_user::mutable_f_recommend_prj_list() {
  set_has_f_recommend_prj_list();
  if (f_recommend_prj_list_ == NULL) f_recommend_prj_list_ = new ::pb_prj_t_recommend_prj;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_recommend_prj_list)
  return f_recommend_prj_list_;
}
inline ::pb_prj_t_recommend_prj* pb_clt_t_user::release_f_recommend_prj_list() {
  clear_has_f_recommend_prj_list();
  ::pb_prj_t_recommend_prj* temp = f_recommend_prj_list_;
  f_recommend_prj_list_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_recommend_prj_list(::pb_prj_t_recommend_prj* f_recommend_prj_list) {
  delete f_recommend_prj_list_;
  f_recommend_prj_list_ = f_recommend_prj_list;
  if (f_recommend_prj_list) {
    set_has_f_recommend_prj_list();
  } else {
    clear_has_f_recommend_prj_list();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_recommend_prj_list)
}

// repeated .pb_prj_t_user f_prj_user = 14;
inline int pb_clt_t_user::f_prj_user_size() const {
  return f_prj_user_.size();
}
inline void pb_clt_t_user::clear_f_prj_user() {
  f_prj_user_.Clear();
}
inline const ::pb_prj_t_user& pb_clt_t_user::f_prj_user(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_prj_user)
  return f_prj_user_.Get(index);
}
inline ::pb_prj_t_user* pb_clt_t_user::mutable_f_prj_user(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_prj_user)
  return f_prj_user_.Mutable(index);
}
inline ::pb_prj_t_user* pb_clt_t_user::add_f_prj_user() {
  // @@protoc_insertion_point(field_add:pb_clt_t_user.f_prj_user)
  return f_prj_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
pb_clt_t_user::f_prj_user() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_user.f_prj_user)
  return f_prj_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
pb_clt_t_user::mutable_f_prj_user() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_user.f_prj_user)
  return &f_prj_user_;
}

// repeated .pb_prj_t_user f_prj_join_user = 15;
inline int pb_clt_t_user::f_prj_join_user_size() const {
  return f_prj_join_user_.size();
}
inline void pb_clt_t_user::clear_f_prj_join_user() {
  f_prj_join_user_.Clear();
}
inline const ::pb_prj_t_user& pb_clt_t_user::f_prj_join_user(int index) const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_prj_join_user)
  return f_prj_join_user_.Get(index);
}
inline ::pb_prj_t_user* pb_clt_t_user::mutable_f_prj_join_user(int index) {
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_prj_join_user)
  return f_prj_join_user_.Mutable(index);
}
inline ::pb_prj_t_user* pb_clt_t_user::add_f_prj_join_user() {
  // @@protoc_insertion_point(field_add:pb_clt_t_user.f_prj_join_user)
  return f_prj_join_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
pb_clt_t_user::f_prj_join_user() const {
  // @@protoc_insertion_point(field_list:pb_clt_t_user.f_prj_join_user)
  return f_prj_join_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
pb_clt_t_user::mutable_f_prj_join_user() {
  // @@protoc_insertion_point(field_mutable_list:pb_clt_t_user.f_prj_join_user)
  return &f_prj_join_user_;
}

// optional .pb_prj_t_over_view f_prj_over_view = 16;
inline bool pb_clt_t_user::has_f_prj_over_view() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pb_clt_t_user::set_has_f_prj_over_view() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pb_clt_t_user::clear_has_f_prj_over_view() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pb_clt_t_user::clear_f_prj_over_view() {
  if (f_prj_over_view_ != NULL) f_prj_over_view_->::pb_prj_t_over_view::Clear();
  clear_has_f_prj_over_view();
}
inline const ::pb_prj_t_over_view& pb_clt_t_user::f_prj_over_view() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_prj_over_view)
  return f_prj_over_view_ != NULL ? *f_prj_over_view_ : *default_instance_->f_prj_over_view_;
}
inline ::pb_prj_t_over_view* pb_clt_t_user::mutable_f_prj_over_view() {
  set_has_f_prj_over_view();
  if (f_prj_over_view_ == NULL) f_prj_over_view_ = new ::pb_prj_t_over_view;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_prj_over_view)
  return f_prj_over_view_;
}
inline ::pb_prj_t_over_view* pb_clt_t_user::release_f_prj_over_view() {
  clear_has_f_prj_over_view();
  ::pb_prj_t_over_view* temp = f_prj_over_view_;
  f_prj_over_view_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_prj_over_view(::pb_prj_t_over_view* f_prj_over_view) {
  delete f_prj_over_view_;
  f_prj_over_view_ = f_prj_over_view;
  if (f_prj_over_view) {
    set_has_f_prj_over_view();
  } else {
    clear_has_f_prj_over_view();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_prj_over_view)
}

// optional .pb_clt_t_version f_version = 17;
inline bool pb_clt_t_user::has_f_version() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pb_clt_t_user::set_has_f_version() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pb_clt_t_user::clear_has_f_version() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pb_clt_t_user::clear_f_version() {
  if (f_version_ != NULL) f_version_->::pb_clt_t_version::Clear();
  clear_has_f_version();
}
inline const ::pb_clt_t_version& pb_clt_t_user::f_version() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_version)
  return f_version_ != NULL ? *f_version_ : *default_instance_->f_version_;
}
inline ::pb_clt_t_version* pb_clt_t_user::mutable_f_version() {
  set_has_f_version();
  if (f_version_ == NULL) f_version_ = new ::pb_clt_t_version;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_version)
  return f_version_;
}
inline ::pb_clt_t_version* pb_clt_t_user::release_f_version() {
  clear_has_f_version();
  ::pb_clt_t_version* temp = f_version_;
  f_version_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_version(::pb_clt_t_version* f_version) {
  delete f_version_;
  f_version_ = f_version;
  if (f_version) {
    set_has_f_version();
  } else {
    clear_has_f_version();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_version)
}

// -------------------------------------------------------------------

// pb_im_t_msg_attach

// optional string f_attach_name = 1;
inline bool pb_im_t_msg_attach::has_f_attach_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_im_t_msg_attach::clear_f_attach_name() {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_->clear();
  }
  clear_has_f_attach_name();
}
inline const ::std::string& pb_im_t_msg_attach::f_attach_name() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_name)
  return *f_attach_name_;
}
inline void pb_im_t_msg_attach::set_f_attach_name(const ::std::string& value) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_name)
}
inline void pb_im_t_msg_attach::set_f_attach_name(const char* value) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_attach.f_attach_name)
}
inline void pb_im_t_msg_attach::set_f_attach_name(const char* value, size_t size) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_attach.f_attach_name)
}
inline ::std::string* pb_im_t_msg_attach::mutable_f_attach_name() {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_attach.f_attach_name)
  return f_attach_name_;
}
inline ::std::string* pb_im_t_msg_attach::release_f_attach_name() {
  clear_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_attach_name_;
    f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_attach::set_allocated_f_attach_name(::std::string* f_attach_name) {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_;
  }
  if (f_attach_name) {
    set_has_f_attach_name();
    f_attach_name_ = f_attach_name;
  } else {
    clear_has_f_attach_name();
    f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_attach.f_attach_name)
}

// optional int32 f_attach_type = 2;
inline bool pb_im_t_msg_attach::has_f_attach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_im_t_msg_attach::clear_f_attach_type() {
  f_attach_type_ = 0;
  clear_has_f_attach_type();
}
inline ::google::protobuf::int32 pb_im_t_msg_attach::f_attach_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_type)
  return f_attach_type_;
}
inline void pb_im_t_msg_attach::set_f_attach_type(::google::protobuf::int32 value) {
  set_has_f_attach_type();
  f_attach_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_type)
}

// optional string f_attach_url = 3;
inline bool pb_im_t_msg_attach::has_f_attach_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_im_t_msg_attach::clear_f_attach_url() {
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_->clear();
  }
  clear_has_f_attach_url();
}
inline const ::std::string& pb_im_t_msg_attach::f_attach_url() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_url)
  return *f_attach_url_;
}
inline void pb_im_t_msg_attach::set_f_attach_url(const ::std::string& value) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_url)
}
inline void pb_im_t_msg_attach::set_f_attach_url(const char* value) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_attach.f_attach_url)
}
inline void pb_im_t_msg_attach::set_f_attach_url(const char* value, size_t size) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_attach.f_attach_url)
}
inline ::std::string* pb_im_t_msg_attach::mutable_f_attach_url() {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_attach.f_attach_url)
  return f_attach_url_;
}
inline ::std::string* pb_im_t_msg_attach::release_f_attach_url() {
  clear_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_attach_url_;
    f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_attach::set_allocated_f_attach_url(::std::string* f_attach_url) {
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_url_;
  }
  if (f_attach_url) {
    set_has_f_attach_url();
    f_attach_url_ = f_attach_url;
  } else {
    clear_has_f_attach_url();
    f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_attach.f_attach_url)
}

// optional int32 f_attach_size = 4;
inline bool pb_im_t_msg_attach::has_f_attach_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_im_t_msg_attach::clear_f_attach_size() {
  f_attach_size_ = 0;
  clear_has_f_attach_size();
}
inline ::google::protobuf::int32 pb_im_t_msg_attach::f_attach_size() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_size)
  return f_attach_size_;
}
inline void pb_im_t_msg_attach::set_f_attach_size(::google::protobuf::int32 value) {
  set_has_f_attach_size();
  f_attach_size_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_size)
}

// optional int32 f_attach_playtime = 5;
inline bool pb_im_t_msg_attach::has_f_attach_playtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_playtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_playtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_im_t_msg_attach::clear_f_attach_playtime() {
  f_attach_playtime_ = 0;
  clear_has_f_attach_playtime();
}
inline ::google::protobuf::int32 pb_im_t_msg_attach::f_attach_playtime() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_playtime)
  return f_attach_playtime_;
}
inline void pb_im_t_msg_attach::set_f_attach_playtime(::google::protobuf::int32 value) {
  set_has_f_attach_playtime();
  f_attach_playtime_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_playtime)
}

// optional int32 f_attach_uploadtime = 6;
inline bool pb_im_t_msg_attach::has_f_attach_uploadtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_im_t_msg_attach::set_has_f_attach_uploadtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_im_t_msg_attach::clear_has_f_attach_uploadtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_im_t_msg_attach::clear_f_attach_uploadtime() {
  f_attach_uploadtime_ = 0;
  clear_has_f_attach_uploadtime();
}
inline ::google::protobuf::int32 pb_im_t_msg_attach::f_attach_uploadtime() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_attach.f_attach_uploadtime)
  return f_attach_uploadtime_;
}
inline void pb_im_t_msg_attach::set_f_attach_uploadtime(::google::protobuf::int32 value) {
  set_has_f_attach_uploadtime();
  f_attach_uploadtime_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_attach.f_attach_uploadtime)
}

// -------------------------------------------------------------------

// pb_im_t_msg_task

// optional string f_task_id = 1;
inline bool pb_im_t_msg_task::has_f_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_im_t_msg_task::clear_has_f_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_im_t_msg_task::clear_f_task_id() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_->clear();
  }
  clear_has_f_task_id();
}
inline const ::std::string& pb_im_t_msg_task::f_task_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_task_id)
  return *f_task_id_;
}
inline void pb_im_t_msg_task::set_f_task_id(const ::std::string& value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_task_id)
}
inline void pb_im_t_msg_task::set_f_task_id(const char* value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_task.f_task_id)
}
inline void pb_im_t_msg_task::set_f_task_id(const char* value, size_t size) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_task.f_task_id)
}
inline ::std::string* pb_im_t_msg_task::mutable_f_task_id() {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_task.f_task_id)
  return f_task_id_;
}
inline ::std::string* pb_im_t_msg_task::release_f_task_id() {
  clear_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_id_;
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_task::set_allocated_f_task_id(::std::string* f_task_id) {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_task_id) {
    set_has_f_task_id();
    f_task_id_ = f_task_id;
  } else {
    clear_has_f_task_id();
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_task.f_task_id)
}

// optional string f_prj_id = 2;
inline bool pb_im_t_msg_task::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_im_t_msg_task::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_im_t_msg_task::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_im_t_msg_task::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_prj_id)
  return *f_prj_id_;
}
inline void pb_im_t_msg_task::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_prj_id)
}
inline void pb_im_t_msg_task::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_task.f_prj_id)
}
inline void pb_im_t_msg_task::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_task.f_prj_id)
}
inline ::std::string* pb_im_t_msg_task::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_task.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_im_t_msg_task::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_task::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_task.f_prj_id)
}

// optional int32 f_task_type = 3;
inline bool pb_im_t_msg_task::has_f_task_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_task_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_im_t_msg_task::clear_has_f_task_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_im_t_msg_task::clear_f_task_type() {
  f_task_type_ = 0;
  clear_has_f_task_type();
}
inline ::google::protobuf::int32 pb_im_t_msg_task::f_task_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_task_type)
  return f_task_type_;
}
inline void pb_im_t_msg_task::set_f_task_type(::google::protobuf::int32 value) {
  set_has_f_task_type();
  f_task_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_task_type)
}

// optional string f_task_desc = 4;
inline bool pb_im_t_msg_task::has_f_task_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_task_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_im_t_msg_task::clear_has_f_task_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_im_t_msg_task::clear_f_task_desc() {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_->clear();
  }
  clear_has_f_task_desc();
}
inline const ::std::string& pb_im_t_msg_task::f_task_desc() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_task_desc)
  return *f_task_desc_;
}
inline void pb_im_t_msg_task::set_f_task_desc(const ::std::string& value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_task_desc)
}
inline void pb_im_t_msg_task::set_f_task_desc(const char* value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_task.f_task_desc)
}
inline void pb_im_t_msg_task::set_f_task_desc(const char* value, size_t size) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_task.f_task_desc)
}
inline ::std::string* pb_im_t_msg_task::mutable_f_task_desc() {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_task.f_task_desc)
  return f_task_desc_;
}
inline ::std::string* pb_im_t_msg_task::release_f_task_desc() {
  clear_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_desc_;
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_task::set_allocated_f_task_desc(::std::string* f_task_desc) {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_task_desc) {
    set_has_f_task_desc();
    f_task_desc_ = f_task_desc;
  } else {
    clear_has_f_task_desc();
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_task.f_task_desc)
}

// optional int32 f_task_desc_type = 5;
inline bool pb_im_t_msg_task::has_f_task_desc_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_task_desc_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_im_t_msg_task::clear_has_f_task_desc_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_im_t_msg_task::clear_f_task_desc_type() {
  f_task_desc_type_ = 0;
  clear_has_f_task_desc_type();
}
inline ::google::protobuf::int32 pb_im_t_msg_task::f_task_desc_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_task_desc_type)
  return f_task_desc_type_;
}
inline void pb_im_t_msg_task::set_f_task_desc_type(::google::protobuf::int32 value) {
  set_has_f_task_desc_type();
  f_task_desc_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_task_desc_type)
}

// optional string f_position = 6;
inline bool pb_im_t_msg_task::has_f_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_im_t_msg_task::clear_has_f_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_im_t_msg_task::clear_f_position() {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_->clear();
  }
  clear_has_f_position();
}
inline const ::std::string& pb_im_t_msg_task::f_position() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_position)
  return *f_position_;
}
inline void pb_im_t_msg_task::set_f_position(const ::std::string& value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_position)
}
inline void pb_im_t_msg_task::set_f_position(const char* value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_task.f_position)
}
inline void pb_im_t_msg_task::set_f_position(const char* value, size_t size) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_task.f_position)
}
inline ::std::string* pb_im_t_msg_task::mutable_f_position() {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_task.f_position)
  return f_position_;
}
inline ::std::string* pb_im_t_msg_task::release_f_position() {
  clear_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_position_;
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_task::set_allocated_f_position(::std::string* f_position) {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (f_position) {
    set_has_f_position();
    f_position_ = f_position;
  } else {
    clear_has_f_position();
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_task.f_position)
}

// repeated int32 f_receiver_uin = 7;
inline int pb_im_t_msg_task::f_receiver_uin_size() const {
  return f_receiver_uin_.size();
}
inline void pb_im_t_msg_task::clear_f_receiver_uin() {
  f_receiver_uin_.Clear();
}
inline ::google::protobuf::int32 pb_im_t_msg_task::f_receiver_uin(int index) const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_receiver_uin)
  return f_receiver_uin_.Get(index);
}
inline void pb_im_t_msg_task::set_f_receiver_uin(int index, ::google::protobuf::int32 value) {
  f_receiver_uin_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_receiver_uin)
}
inline void pb_im_t_msg_task::add_f_receiver_uin(::google::protobuf::int32 value) {
  f_receiver_uin_.Add(value);
  // @@protoc_insertion_point(field_add:pb_im_t_msg_task.f_receiver_uin)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pb_im_t_msg_task::f_receiver_uin() const {
  // @@protoc_insertion_point(field_list:pb_im_t_msg_task.f_receiver_uin)
  return f_receiver_uin_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pb_im_t_msg_task::mutable_f_receiver_uin() {
  // @@protoc_insertion_point(field_mutable_list:pb_im_t_msg_task.f_receiver_uin)
  return &f_receiver_uin_;
}

// optional int32 f_operate_type = 8;
inline bool pb_im_t_msg_task::has_f_operate_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_operate_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_im_t_msg_task::clear_has_f_operate_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_im_t_msg_task::clear_f_operate_type() {
  f_operate_type_ = 0;
  clear_has_f_operate_type();
}
inline ::google::protobuf::int32 pb_im_t_msg_task::f_operate_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_operate_type)
  return f_operate_type_;
}
inline void pb_im_t_msg_task::set_f_operate_type(::google::protobuf::int32 value) {
  set_has_f_operate_type();
  f_operate_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_operate_type)
}

// optional string f_assign_desc = 9;
inline bool pb_im_t_msg_task::has_f_assign_desc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_assign_desc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_im_t_msg_task::clear_has_f_assign_desc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_im_t_msg_task::clear_f_assign_desc() {
  if (f_assign_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_assign_desc_->clear();
  }
  clear_has_f_assign_desc();
}
inline const ::std::string& pb_im_t_msg_task::f_assign_desc() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_assign_desc)
  return *f_assign_desc_;
}
inline void pb_im_t_msg_task::set_f_assign_desc(const ::std::string& value) {
  set_has_f_assign_desc();
  if (f_assign_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_assign_desc_ = new ::std::string;
  }
  f_assign_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_assign_desc)
}
inline void pb_im_t_msg_task::set_f_assign_desc(const char* value) {
  set_has_f_assign_desc();
  if (f_assign_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_assign_desc_ = new ::std::string;
  }
  f_assign_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_task.f_assign_desc)
}
inline void pb_im_t_msg_task::set_f_assign_desc(const char* value, size_t size) {
  set_has_f_assign_desc();
  if (f_assign_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_assign_desc_ = new ::std::string;
  }
  f_assign_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_task.f_assign_desc)
}
inline ::std::string* pb_im_t_msg_task::mutable_f_assign_desc() {
  set_has_f_assign_desc();
  if (f_assign_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_assign_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_task.f_assign_desc)
  return f_assign_desc_;
}
inline ::std::string* pb_im_t_msg_task::release_f_assign_desc() {
  clear_has_f_assign_desc();
  if (f_assign_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_assign_desc_;
    f_assign_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_task::set_allocated_f_assign_desc(::std::string* f_assign_desc) {
  if (f_assign_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_assign_desc_;
  }
  if (f_assign_desc) {
    set_has_f_assign_desc();
    f_assign_desc_ = f_assign_desc;
  } else {
    clear_has_f_assign_desc();
    f_assign_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_task.f_assign_desc)
}

// optional int32 f_task_end = 10;
inline bool pb_im_t_msg_task::has_f_task_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_im_t_msg_task::set_has_f_task_end() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_im_t_msg_task::clear_has_f_task_end() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_im_t_msg_task::clear_f_task_end() {
  f_task_end_ = 0;
  clear_has_f_task_end();
}
inline ::google::protobuf::int32 pb_im_t_msg_task::f_task_end() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_task.f_task_end)
  return f_task_end_;
}
inline void pb_im_t_msg_task::set_f_task_end(::google::protobuf::int32 value) {
  set_has_f_task_end();
  f_task_end_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_task.f_task_end)
}

// -------------------------------------------------------------------

// pb_im_t_msg_item

// optional string f_msg_id = 1;
inline bool pb_im_t_msg_item::has_f_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_im_t_msg_item::clear_has_f_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_im_t_msg_item::clear_f_msg_id() {
  if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_->clear();
  }
  clear_has_f_msg_id();
}
inline const ::std::string& pb_im_t_msg_item::f_msg_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_msg_id)
  return *f_msg_id_;
}
inline void pb_im_t_msg_item::set_f_msg_id(const ::std::string& value) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_msg_id)
}
inline void pb_im_t_msg_item::set_f_msg_id(const char* value) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_msg_id)
}
inline void pb_im_t_msg_item::set_f_msg_id(const char* value, size_t size) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_msg_id)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_msg_id() {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_msg_id)
  return f_msg_id_;
}
inline ::std::string* pb_im_t_msg_item::release_f_msg_id() {
  clear_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_id_;
    f_msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_msg_id(::std::string* f_msg_id) {
  if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_id_;
  }
  if (f_msg_id) {
    set_has_f_msg_id();
    f_msg_id_ = f_msg_id;
  } else {
    clear_has_f_msg_id();
    f_msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_msg_id)
}

// optional uint32 f_msg_type = 2;
inline bool pb_im_t_msg_item::has_f_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_im_t_msg_item::clear_has_f_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_im_t_msg_item::clear_f_msg_type() {
  f_msg_type_ = 0u;
  clear_has_f_msg_type();
}
inline ::google::protobuf::uint32 pb_im_t_msg_item::f_msg_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_msg_type)
  return f_msg_type_;
}
inline void pb_im_t_msg_item::set_f_msg_type(::google::protobuf::uint32 value) {
  set_has_f_msg_type();
  f_msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_msg_type)
}

// optional string f_msg_body = 3;
inline bool pb_im_t_msg_item::has_f_msg_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_msg_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_im_t_msg_item::clear_has_f_msg_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_im_t_msg_item::clear_f_msg_body() {
  if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_->clear();
  }
  clear_has_f_msg_body();
}
inline const ::std::string& pb_im_t_msg_item::f_msg_body() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_msg_body)
  return *f_msg_body_;
}
inline void pb_im_t_msg_item::set_f_msg_body(const ::std::string& value) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_msg_body)
}
inline void pb_im_t_msg_item::set_f_msg_body(const char* value) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_msg_body)
}
inline void pb_im_t_msg_item::set_f_msg_body(const char* value, size_t size) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_msg_body)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_msg_body() {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_msg_body)
  return f_msg_body_;
}
inline ::std::string* pb_im_t_msg_item::release_f_msg_body() {
  clear_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_body_;
    f_msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_msg_body(::std::string* f_msg_body) {
  if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_body_;
  }
  if (f_msg_body) {
    set_has_f_msg_body();
    f_msg_body_ = f_msg_body;
  } else {
    clear_has_f_msg_body();
    f_msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_msg_body)
}

// optional int32 f_sender_id = 4;
inline bool pb_im_t_msg_item::has_f_sender_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_sender_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_im_t_msg_item::clear_has_f_sender_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_im_t_msg_item::clear_f_sender_id() {
  f_sender_id_ = 0;
  clear_has_f_sender_id();
}
inline ::google::protobuf::int32 pb_im_t_msg_item::f_sender_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_sender_id)
  return f_sender_id_;
}
inline void pb_im_t_msg_item::set_f_sender_id(::google::protobuf::int32 value) {
  set_has_f_sender_id();
  f_sender_id_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_sender_id)
}

// optional string f_sender_name = 5;
inline bool pb_im_t_msg_item::has_f_sender_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_sender_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_im_t_msg_item::clear_has_f_sender_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_im_t_msg_item::clear_f_sender_name() {
  if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_->clear();
  }
  clear_has_f_sender_name();
}
inline const ::std::string& pb_im_t_msg_item::f_sender_name() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_sender_name)
  return *f_sender_name_;
}
inline void pb_im_t_msg_item::set_f_sender_name(const ::std::string& value) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_sender_name)
}
inline void pb_im_t_msg_item::set_f_sender_name(const char* value) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_sender_name)
}
inline void pb_im_t_msg_item::set_f_sender_name(const char* value, size_t size) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_sender_name)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_sender_name() {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_sender_name)
  return f_sender_name_;
}
inline ::std::string* pb_im_t_msg_item::release_f_sender_name() {
  clear_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_name_;
    f_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_sender_name(::std::string* f_sender_name) {
  if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_name_;
  }
  if (f_sender_name) {
    set_has_f_sender_name();
    f_sender_name_ = f_sender_name;
  } else {
    clear_has_f_sender_name();
    f_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_sender_name)
}

// optional string f_sender_remark = 6;
inline bool pb_im_t_msg_item::has_f_sender_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_sender_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_im_t_msg_item::clear_has_f_sender_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_im_t_msg_item::clear_f_sender_remark() {
  if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_->clear();
  }
  clear_has_f_sender_remark();
}
inline const ::std::string& pb_im_t_msg_item::f_sender_remark() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_sender_remark)
  return *f_sender_remark_;
}
inline void pb_im_t_msg_item::set_f_sender_remark(const ::std::string& value) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_sender_remark)
}
inline void pb_im_t_msg_item::set_f_sender_remark(const char* value) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_sender_remark)
}
inline void pb_im_t_msg_item::set_f_sender_remark(const char* value, size_t size) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_sender_remark)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_sender_remark() {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_sender_remark)
  return f_sender_remark_;
}
inline ::std::string* pb_im_t_msg_item::release_f_sender_remark() {
  clear_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_remark_;
    f_sender_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_sender_remark(::std::string* f_sender_remark) {
  if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_remark_;
  }
  if (f_sender_remark) {
    set_has_f_sender_remark();
    f_sender_remark_ = f_sender_remark;
  } else {
    clear_has_f_sender_remark();
    f_sender_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_sender_remark)
}

// optional string f_sender_avatar = 7;
inline bool pb_im_t_msg_item::has_f_sender_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_sender_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_im_t_msg_item::clear_has_f_sender_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_im_t_msg_item::clear_f_sender_avatar() {
  if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_->clear();
  }
  clear_has_f_sender_avatar();
}
inline const ::std::string& pb_im_t_msg_item::f_sender_avatar() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_sender_avatar)
  return *f_sender_avatar_;
}
inline void pb_im_t_msg_item::set_f_sender_avatar(const ::std::string& value) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_sender_avatar)
}
inline void pb_im_t_msg_item::set_f_sender_avatar(const char* value) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_sender_avatar)
}
inline void pb_im_t_msg_item::set_f_sender_avatar(const char* value, size_t size) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_sender_avatar)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_sender_avatar() {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_sender_avatar)
  return f_sender_avatar_;
}
inline ::std::string* pb_im_t_msg_item::release_f_sender_avatar() {
  clear_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_avatar_;
    f_sender_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_sender_avatar(::std::string* f_sender_avatar) {
  if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_avatar_;
  }
  if (f_sender_avatar) {
    set_has_f_sender_avatar();
    f_sender_avatar_ = f_sender_avatar;
  } else {
    clear_has_f_sender_avatar();
    f_sender_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_sender_avatar)
}

// optional string f_group_id = 8;
inline bool pb_im_t_msg_item::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_im_t_msg_item::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_im_t_msg_item::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_im_t_msg_item::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_group_id)
  return *f_group_id_;
}
inline void pb_im_t_msg_item::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_group_id)
}
inline void pb_im_t_msg_item::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_group_id)
}
inline void pb_im_t_msg_item::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_group_id)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_im_t_msg_item::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_group_id)
}

// optional uint32 f_group_type = 9;
inline bool pb_im_t_msg_item::has_f_group_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_group_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_im_t_msg_item::clear_has_f_group_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_im_t_msg_item::clear_f_group_type() {
  f_group_type_ = 0u;
  clear_has_f_group_type();
}
inline ::google::protobuf::uint32 pb_im_t_msg_item::f_group_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_group_type)
  return f_group_type_;
}
inline void pb_im_t_msg_item::set_f_group_type(::google::protobuf::uint32 value) {
  set_has_f_group_type();
  f_group_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_group_type)
}

// optional string f_group_name = 10;
inline bool pb_im_t_msg_item::has_f_group_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_group_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_im_t_msg_item::clear_has_f_group_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_im_t_msg_item::clear_f_group_name() {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_->clear();
  }
  clear_has_f_group_name();
}
inline const ::std::string& pb_im_t_msg_item::f_group_name() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_group_name)
  return *f_group_name_;
}
inline void pb_im_t_msg_item::set_f_group_name(const ::std::string& value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_group_name)
}
inline void pb_im_t_msg_item::set_f_group_name(const char* value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_group_name)
}
inline void pb_im_t_msg_item::set_f_group_name(const char* value, size_t size) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_group_name)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_group_name() {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_group_name)
  return f_group_name_;
}
inline ::std::string* pb_im_t_msg_item::release_f_group_name() {
  clear_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_name_;
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_group_name(::std::string* f_group_name) {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_name_;
  }
  if (f_group_name) {
    set_has_f_group_name();
    f_group_name_ = f_group_name;
  } else {
    clear_has_f_group_name();
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_group_name)
}

// optional string f_group_desc = 11;
inline bool pb_im_t_msg_item::has_f_group_desc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_group_desc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_im_t_msg_item::clear_has_f_group_desc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_im_t_msg_item::clear_f_group_desc() {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_->clear();
  }
  clear_has_f_group_desc();
}
inline const ::std::string& pb_im_t_msg_item::f_group_desc() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_group_desc)
  return *f_group_desc_;
}
inline void pb_im_t_msg_item::set_f_group_desc(const ::std::string& value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_group_desc)
}
inline void pb_im_t_msg_item::set_f_group_desc(const char* value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg_item.f_group_desc)
}
inline void pb_im_t_msg_item::set_f_group_desc(const char* value, size_t size) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg_item.f_group_desc)
}
inline ::std::string* pb_im_t_msg_item::mutable_f_group_desc() {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_group_desc)
  return f_group_desc_;
}
inline ::std::string* pb_im_t_msg_item::release_f_group_desc() {
  clear_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_desc_;
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg_item::set_allocated_f_group_desc(::std::string* f_group_desc) {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_desc_;
  }
  if (f_group_desc) {
    set_has_f_group_desc();
    f_group_desc_ = f_group_desc;
  } else {
    clear_has_f_group_desc();
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_group_desc)
}

// optional int32 f_send_time = 12;
inline bool pb_im_t_msg_item::has_f_send_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_send_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_im_t_msg_item::clear_has_f_send_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_im_t_msg_item::clear_f_send_time() {
  f_send_time_ = 0;
  clear_has_f_send_time();
}
inline ::google::protobuf::int32 pb_im_t_msg_item::f_send_time() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_send_time)
  return f_send_time_;
}
inline void pb_im_t_msg_item::set_f_send_time(::google::protobuf::int32 value) {
  set_has_f_send_time();
  f_send_time_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_send_time)
}

// optional int32 f_msg_seq_id = 13;
inline bool pb_im_t_msg_item::has_f_msg_seq_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_msg_seq_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_im_t_msg_item::clear_has_f_msg_seq_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_im_t_msg_item::clear_f_msg_seq_id() {
  f_msg_seq_id_ = 0;
  clear_has_f_msg_seq_id();
}
inline ::google::protobuf::int32 pb_im_t_msg_item::f_msg_seq_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_msg_seq_id)
  return f_msg_seq_id_;
}
inline void pb_im_t_msg_item::set_f_msg_seq_id(::google::protobuf::int32 value) {
  set_has_f_msg_seq_id();
  f_msg_seq_id_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg_item.f_msg_seq_id)
}

// repeated .pb_im_t_msg_attach f_attch = 14;
inline int pb_im_t_msg_item::f_attch_size() const {
  return f_attch_.size();
}
inline void pb_im_t_msg_item::clear_f_attch() {
  f_attch_.Clear();
}
inline const ::pb_im_t_msg_attach& pb_im_t_msg_item::f_attch(int index) const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_attch)
  return f_attch_.Get(index);
}
inline ::pb_im_t_msg_attach* pb_im_t_msg_item::mutable_f_attch(int index) {
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_attch)
  return f_attch_.Mutable(index);
}
inline ::pb_im_t_msg_attach* pb_im_t_msg_item::add_f_attch() {
  // @@protoc_insertion_point(field_add:pb_im_t_msg_item.f_attch)
  return f_attch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
pb_im_t_msg_item::f_attch() const {
  // @@protoc_insertion_point(field_list:pb_im_t_msg_item.f_attch)
  return f_attch_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
pb_im_t_msg_item::mutable_f_attch() {
  // @@protoc_insertion_point(field_mutable_list:pb_im_t_msg_item.f_attch)
  return &f_attch_;
}

// optional .pb_im_t_msg_task f_msg_task = 15;
inline bool pb_im_t_msg_item::has_f_msg_task() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pb_im_t_msg_item::set_has_f_msg_task() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pb_im_t_msg_item::clear_has_f_msg_task() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pb_im_t_msg_item::clear_f_msg_task() {
  if (f_msg_task_ != NULL) f_msg_task_->::pb_im_t_msg_task::Clear();
  clear_has_f_msg_task();
}
inline const ::pb_im_t_msg_task& pb_im_t_msg_item::f_msg_task() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg_item.f_msg_task)
  return f_msg_task_ != NULL ? *f_msg_task_ : *default_instance_->f_msg_task_;
}
inline ::pb_im_t_msg_task* pb_im_t_msg_item::mutable_f_msg_task() {
  set_has_f_msg_task();
  if (f_msg_task_ == NULL) f_msg_task_ = new ::pb_im_t_msg_task;
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg_item.f_msg_task)
  return f_msg_task_;
}
inline ::pb_im_t_msg_task* pb_im_t_msg_item::release_f_msg_task() {
  clear_has_f_msg_task();
  ::pb_im_t_msg_task* temp = f_msg_task_;
  f_msg_task_ = NULL;
  return temp;
}
inline void pb_im_t_msg_item::set_allocated_f_msg_task(::pb_im_t_msg_task* f_msg_task) {
  delete f_msg_task_;
  f_msg_task_ = f_msg_task;
  if (f_msg_task) {
    set_has_f_msg_task();
  } else {
    clear_has_f_msg_task();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg_item.f_msg_task)
}

// -------------------------------------------------------------------

// pb_im_t_msg

// optional int32 f_update_type = 1;
inline bool pb_im_t_msg::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_im_t_msg::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_im_t_msg::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_im_t_msg::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_im_t_msg::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg.f_update_type)
  return f_update_type_;
}
inline void pb_im_t_msg::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_im_t_msg.f_update_type)
}

// optional string f_group_id = 2;
inline bool pb_im_t_msg::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_im_t_msg::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_im_t_msg::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_im_t_msg::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_im_t_msg::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg.f_group_id)
  return *f_group_id_;
}
inline void pb_im_t_msg::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_im_t_msg.f_group_id)
}
inline void pb_im_t_msg::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_im_t_msg.f_group_id)
}
inline void pb_im_t_msg::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_im_t_msg.f_group_id)
}
inline ::std::string* pb_im_t_msg::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_im_t_msg::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_im_t_msg::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_im_t_msg.f_group_id)
}

// repeated .pb_im_t_msg_item f_msg = 3;
inline int pb_im_t_msg::f_msg_size() const {
  return f_msg_.size();
}
inline void pb_im_t_msg::clear_f_msg() {
  f_msg_.Clear();
}
inline const ::pb_im_t_msg_item& pb_im_t_msg::f_msg(int index) const {
  // @@protoc_insertion_point(field_get:pb_im_t_msg.f_msg)
  return f_msg_.Get(index);
}
inline ::pb_im_t_msg_item* pb_im_t_msg::mutable_f_msg(int index) {
  // @@protoc_insertion_point(field_mutable:pb_im_t_msg.f_msg)
  return f_msg_.Mutable(index);
}
inline ::pb_im_t_msg_item* pb_im_t_msg::add_f_msg() {
  // @@protoc_insertion_point(field_add:pb_im_t_msg.f_msg)
  return f_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_item >&
pb_im_t_msg::f_msg() const {
  // @@protoc_insertion_point(field_list:pb_im_t_msg.f_msg)
  return f_msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_item >*
pb_im_t_msg::mutable_f_msg() {
  // @@protoc_insertion_point(field_mutable_list:pb_im_t_msg.f_msg)
  return &f_msg_;
}

// -------------------------------------------------------------------

// pb_prj_t_user

// optional int32 f_uid = 1;
inline bool pb_prj_t_user::has_f_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_user::set_has_f_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_user::clear_has_f_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_user::clear_f_uid() {
  f_uid_ = 0;
  clear_has_f_uid();
}
inline ::google::protobuf::int32 pb_prj_t_user::f_uid() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_uid)
  return f_uid_;
}
inline void pb_prj_t_user::set_f_uid(::google::protobuf::int32 value) {
  set_has_f_uid();
  f_uid_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_uid)
}

// optional string f_name = 2;
inline bool pb_prj_t_user::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_user::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_user::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_user::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_prj_t_user::f_name() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_name)
  return *f_name_;
}
inline void pb_prj_t_user::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_name)
}
inline void pb_prj_t_user::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_user.f_name)
}
inline void pb_prj_t_user::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_user.f_name)
}
inline ::std::string* pb_prj_t_user::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_user.f_name)
  return f_name_;
}
inline ::std::string* pb_prj_t_user::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_user::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_user.f_name)
}

// optional string f_phone = 3;
inline bool pb_prj_t_user::has_f_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_user::set_has_f_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_user::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_user::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_prj_t_user::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_phone)
  return *f_phone_;
}
inline void pb_prj_t_user::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_phone)
}
inline void pb_prj_t_user::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_user.f_phone)
}
inline void pb_prj_t_user::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_user.f_phone)
}
inline ::std::string* pb_prj_t_user::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_user.f_phone)
  return f_phone_;
}
inline ::std::string* pb_prj_t_user::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_user::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_user.f_phone)
}

// optional string f_job_type = 4;
inline bool pb_prj_t_user::has_f_job_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_user::set_has_f_job_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_user::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_user::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_prj_t_user::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_job_type)
  return *f_job_type_;
}
inline void pb_prj_t_user::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_job_type)
}
inline void pb_prj_t_user::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_user.f_job_type)
}
inline void pb_prj_t_user::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_user.f_job_type)
}
inline ::std::string* pb_prj_t_user::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_user.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_prj_t_user::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_user::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_user.f_job_type)
}

// optional int32 f_add_time = 5;
inline bool pb_prj_t_user::has_f_add_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_user::set_has_f_add_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_user::clear_has_f_add_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_user::clear_f_add_time() {
  f_add_time_ = 0;
  clear_has_f_add_time();
}
inline ::google::protobuf::int32 pb_prj_t_user::f_add_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_add_time)
  return f_add_time_;
}
inline void pb_prj_t_user::set_f_add_time(::google::protobuf::int32 value) {
  set_has_f_add_time();
  f_add_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_add_time)
}

// optional int32 f_task_operate_status = 6;
inline bool pb_prj_t_user::has_f_task_operate_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_user::set_has_f_task_operate_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_user::clear_has_f_task_operate_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_user::clear_f_task_operate_status() {
  f_task_operate_status_ = 0;
  clear_has_f_task_operate_status();
}
inline ::google::protobuf::int32 pb_prj_t_user::f_task_operate_status() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_task_operate_status)
  return f_task_operate_status_;
}
inline void pb_prj_t_user::set_f_task_operate_status(::google::protobuf::int32 value) {
  set_has_f_task_operate_status();
  f_task_operate_status_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_task_operate_status)
}

// optional string f_join_content = 7;
inline bool pb_prj_t_user::has_f_join_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_prj_t_user::set_has_f_join_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_prj_t_user::clear_has_f_join_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_prj_t_user::clear_f_join_content() {
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_->clear();
  }
  clear_has_f_join_content();
}
inline const ::std::string& pb_prj_t_user::f_join_content() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_join_content)
  return *f_join_content_;
}
inline void pb_prj_t_user::set_f_join_content(const ::std::string& value) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_join_content)
}
inline void pb_prj_t_user::set_f_join_content(const char* value) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_user.f_join_content)
}
inline void pb_prj_t_user::set_f_join_content(const char* value, size_t size) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_user.f_join_content)
}
inline ::std::string* pb_prj_t_user::mutable_f_join_content() {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_user.f_join_content)
  return f_join_content_;
}
inline ::std::string* pb_prj_t_user::release_f_join_content() {
  clear_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_join_content_;
    f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_user::set_allocated_f_join_content(::std::string* f_join_content) {
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_join_content_;
  }
  if (f_join_content) {
    set_has_f_join_content();
    f_join_content_ = f_join_content;
  } else {
    clear_has_f_join_content();
    f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_user.f_join_content)
}

// optional string f_name_pinyin = 8;
inline bool pb_prj_t_user::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_prj_t_user::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_prj_t_user::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_prj_t_user::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_prj_t_user::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_user.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_prj_t_user::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_user.f_name_pinyin)
}
inline void pb_prj_t_user::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_user.f_name_pinyin)
}
inline void pb_prj_t_user::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_user.f_name_pinyin)
}
inline ::std::string* pb_prj_t_user::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_user.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_prj_t_user::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_user::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_user.f_name_pinyin)
}

// -------------------------------------------------------------------

// pb_prj_t_feed

// optional int32 f_time = 1;
inline bool pb_prj_t_feed::has_f_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_feed::set_has_f_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_feed::clear_has_f_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_feed::clear_f_time() {
  f_time_ = 0;
  clear_has_f_time();
}
inline ::google::protobuf::int32 pb_prj_t_feed::f_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_feed.f_time)
  return f_time_;
}
inline void pb_prj_t_feed::set_f_time(::google::protobuf::int32 value) {
  set_has_f_time();
  f_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_feed.f_time)
}

// optional string f_msg = 2;
inline bool pb_prj_t_feed::has_f_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_feed::set_has_f_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_feed::clear_has_f_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_feed::clear_f_msg() {
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_->clear();
  }
  clear_has_f_msg();
}
inline const ::std::string& pb_prj_t_feed::f_msg() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_feed.f_msg)
  return *f_msg_;
}
inline void pb_prj_t_feed::set_f_msg(const ::std::string& value) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_feed.f_msg)
}
inline void pb_prj_t_feed::set_f_msg(const char* value) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_feed.f_msg)
}
inline void pb_prj_t_feed::set_f_msg(const char* value, size_t size) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_feed.f_msg)
}
inline ::std::string* pb_prj_t_feed::mutable_f_msg() {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_feed.f_msg)
  return f_msg_;
}
inline ::std::string* pb_prj_t_feed::release_f_msg() {
  clear_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_;
    f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_feed::set_allocated_f_msg(::std::string* f_msg) {
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_;
  }
  if (f_msg) {
    set_has_f_msg();
    f_msg_ = f_msg;
  } else {
    clear_has_f_msg();
    f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_feed.f_msg)
}

// -------------------------------------------------------------------

// pb_prj_t_task

// optional string f_task_id = 1;
inline bool pb_prj_t_task::has_f_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_task::clear_has_f_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_task::clear_f_task_id() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_->clear();
  }
  clear_has_f_task_id();
}
inline const ::std::string& pb_prj_t_task::f_task_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_id)
  return *f_task_id_;
}
inline void pb_prj_t_task::set_f_task_id(const ::std::string& value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_id)
}
inline void pb_prj_t_task::set_f_task_id(const char* value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task.f_task_id)
}
inline void pb_prj_t_task::set_f_task_id(const char* value, size_t size) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task.f_task_id)
}
inline ::std::string* pb_prj_t_task::mutable_f_task_id() {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_task_id)
  return f_task_id_;
}
inline ::std::string* pb_prj_t_task::release_f_task_id() {
  clear_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_id_;
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task::set_allocated_f_task_id(::std::string* f_task_id) {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_task_id) {
    set_has_f_task_id();
    f_task_id_ = f_task_id;
  } else {
    clear_has_f_task_id();
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task.f_task_id)
}

// optional string f_prj_id = 2;
inline bool pb_prj_t_task::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_task::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_task::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_task::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_prj_t_task::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_prj_id)
  return *f_prj_id_;
}
inline void pb_prj_t_task::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_prj_id)
}
inline void pb_prj_t_task::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task.f_prj_id)
}
inline void pb_prj_t_task::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task.f_prj_id)
}
inline ::std::string* pb_prj_t_task::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_prj_t_task::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task.f_prj_id)
}

// optional int32 f_task_type = 3;
inline bool pb_prj_t_task::has_f_task_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_task::clear_has_f_task_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_task::clear_f_task_type() {
  f_task_type_ = 0;
  clear_has_f_task_type();
}
inline ::google::protobuf::int32 pb_prj_t_task::f_task_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_type)
  return f_task_type_;
}
inline void pb_prj_t_task::set_f_task_type(::google::protobuf::int32 value) {
  set_has_f_task_type();
  f_task_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_type)
}

// optional string f_task_desc = 4;
inline bool pb_prj_t_task::has_f_task_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_task::clear_has_f_task_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_task::clear_f_task_desc() {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_->clear();
  }
  clear_has_f_task_desc();
}
inline const ::std::string& pb_prj_t_task::f_task_desc() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_desc)
  return *f_task_desc_;
}
inline void pb_prj_t_task::set_f_task_desc(const ::std::string& value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_desc)
}
inline void pb_prj_t_task::set_f_task_desc(const char* value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task.f_task_desc)
}
inline void pb_prj_t_task::set_f_task_desc(const char* value, size_t size) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task.f_task_desc)
}
inline ::std::string* pb_prj_t_task::mutable_f_task_desc() {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_task_desc)
  return f_task_desc_;
}
inline ::std::string* pb_prj_t_task::release_f_task_desc() {
  clear_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_desc_;
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task::set_allocated_f_task_desc(::std::string* f_task_desc) {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_task_desc) {
    set_has_f_task_desc();
    f_task_desc_ = f_task_desc;
  } else {
    clear_has_f_task_desc();
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task.f_task_desc)
}

// optional int32 f_task_desc_type = 5;
inline bool pb_prj_t_task::has_f_task_desc_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_desc_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_task::clear_has_f_task_desc_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_task::clear_f_task_desc_type() {
  f_task_desc_type_ = 0;
  clear_has_f_task_desc_type();
}
inline ::google::protobuf::int32 pb_prj_t_task::f_task_desc_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_desc_type)
  return f_task_desc_type_;
}
inline void pb_prj_t_task::set_f_task_desc_type(::google::protobuf::int32 value) {
  set_has_f_task_desc_type();
  f_task_desc_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_desc_type)
}

// optional .pb_prj_t_user f_sponsor = 6;
inline bool pb_prj_t_task::has_f_sponsor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_task::set_has_f_sponsor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_task::clear_has_f_sponsor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_task::clear_f_sponsor() {
  if (f_sponsor_ != NULL) f_sponsor_->::pb_prj_t_user::Clear();
  clear_has_f_sponsor();
}
inline const ::pb_prj_t_user& pb_prj_t_task::f_sponsor() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_sponsor)
  return f_sponsor_ != NULL ? *f_sponsor_ : *default_instance_->f_sponsor_;
}
inline ::pb_prj_t_user* pb_prj_t_task::mutable_f_sponsor() {
  set_has_f_sponsor();
  if (f_sponsor_ == NULL) f_sponsor_ = new ::pb_prj_t_user;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_sponsor)
  return f_sponsor_;
}
inline ::pb_prj_t_user* pb_prj_t_task::release_f_sponsor() {
  clear_has_f_sponsor();
  ::pb_prj_t_user* temp = f_sponsor_;
  f_sponsor_ = NULL;
  return temp;
}
inline void pb_prj_t_task::set_allocated_f_sponsor(::pb_prj_t_user* f_sponsor) {
  delete f_sponsor_;
  f_sponsor_ = f_sponsor;
  if (f_sponsor) {
    set_has_f_sponsor();
  } else {
    clear_has_f_sponsor();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task.f_sponsor)
}

// repeated .pb_prj_t_user f_members = 7;
inline int pb_prj_t_task::f_members_size() const {
  return f_members_.size();
}
inline void pb_prj_t_task::clear_f_members() {
  f_members_.Clear();
}
inline const ::pb_prj_t_user& pb_prj_t_task::f_members(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_members)
  return f_members_.Get(index);
}
inline ::pb_prj_t_user* pb_prj_t_task::mutable_f_members(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_members)
  return f_members_.Mutable(index);
}
inline ::pb_prj_t_user* pb_prj_t_task::add_f_members() {
  // @@protoc_insertion_point(field_add:pb_prj_t_task.f_members)
  return f_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
pb_prj_t_task::f_members() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task.f_members)
  return f_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
pb_prj_t_task::mutable_f_members() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task.f_members)
  return &f_members_;
}

// optional int32 f_task_status = 8;
inline bool pb_prj_t_task::has_f_task_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_prj_t_task::clear_has_f_task_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_prj_t_task::clear_f_task_status() {
  f_task_status_ = 0;
  clear_has_f_task_status();
}
inline ::google::protobuf::int32 pb_prj_t_task::f_task_status() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_status)
  return f_task_status_;
}
inline void pb_prj_t_task::set_f_task_status(::google::protobuf::int32 value) {
  set_has_f_task_status();
  f_task_status_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_status)
}

// optional string f_position = 9;
inline bool pb_prj_t_task::has_f_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_prj_t_task::set_has_f_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_prj_t_task::clear_has_f_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_prj_t_task::clear_f_position() {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_->clear();
  }
  clear_has_f_position();
}
inline const ::std::string& pb_prj_t_task::f_position() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_position)
  return *f_position_;
}
inline void pb_prj_t_task::set_f_position(const ::std::string& value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_position)
}
inline void pb_prj_t_task::set_f_position(const char* value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task.f_position)
}
inline void pb_prj_t_task::set_f_position(const char* value, size_t size) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task.f_position)
}
inline ::std::string* pb_prj_t_task::mutable_f_position() {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_position)
  return f_position_;
}
inline ::std::string* pb_prj_t_task::release_f_position() {
  clear_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_position_;
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task::set_allocated_f_position(::std::string* f_position) {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (f_position) {
    set_has_f_position();
    f_position_ = f_position;
  } else {
    clear_has_f_position();
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task.f_position)
}

// repeated .pb_im_t_msg_attach f_attach_list = 10;
inline int pb_prj_t_task::f_attach_list_size() const {
  return f_attach_list_.size();
}
inline void pb_prj_t_task::clear_f_attach_list() {
  f_attach_list_.Clear();
}
inline const ::pb_im_t_msg_attach& pb_prj_t_task::f_attach_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_attach_list)
  return f_attach_list_.Get(index);
}
inline ::pb_im_t_msg_attach* pb_prj_t_task::mutable_f_attach_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task.f_attach_list)
  return f_attach_list_.Mutable(index);
}
inline ::pb_im_t_msg_attach* pb_prj_t_task::add_f_attach_list() {
  // @@protoc_insertion_point(field_add:pb_prj_t_task.f_attach_list)
  return f_attach_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
pb_prj_t_task::f_attach_list() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task.f_attach_list)
  return f_attach_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
pb_prj_t_task::mutable_f_attach_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task.f_attach_list)
  return &f_attach_list_;
}

// optional int32 f_task_begin = 11;
inline bool pb_prj_t_task::has_f_task_begin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_begin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_prj_t_task::clear_has_f_task_begin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_prj_t_task::clear_f_task_begin() {
  f_task_begin_ = 0;
  clear_has_f_task_begin();
}
inline ::google::protobuf::int32 pb_prj_t_task::f_task_begin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_begin)
  return f_task_begin_;
}
inline void pb_prj_t_task::set_f_task_begin(::google::protobuf::int32 value) {
  set_has_f_task_begin();
  f_task_begin_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_begin)
}

// optional int32 f_task_end = 12;
inline bool pb_prj_t_task::has_f_task_end() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_prj_t_task::set_has_f_task_end() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_prj_t_task::clear_has_f_task_end() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_prj_t_task::clear_f_task_end() {
  f_task_end_ = 0;
  clear_has_f_task_end();
}
inline ::google::protobuf::int32 pb_prj_t_task::f_task_end() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task.f_task_end)
  return f_task_end_;
}
inline void pb_prj_t_task::set_f_task_end(::google::protobuf::int32 value) {
  set_has_f_task_end();
  f_task_end_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task.f_task_end)
}

// -------------------------------------------------------------------

// pb_prj_t_task_report

// optional string f_report_id = 1;
inline bool pb_prj_t_task_report::has_f_report_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_report_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_task_report::clear_has_f_report_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_task_report::clear_f_report_id() {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_->clear();
  }
  clear_has_f_report_id();
}
inline const ::std::string& pb_prj_t_task_report::f_report_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_report_id)
  return *f_report_id_;
}
inline void pb_prj_t_task_report::set_f_report_id(const ::std::string& value) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task_report.f_report_id)
}
inline void pb_prj_t_task_report::set_f_report_id(const char* value) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_report.f_report_id)
}
inline void pb_prj_t_task_report::set_f_report_id(const char* value, size_t size) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_report.f_report_id)
}
inline ::std::string* pb_prj_t_task_report::mutable_f_report_id() {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_report_id)
  return f_report_id_;
}
inline ::std::string* pb_prj_t_task_report::release_f_report_id() {
  clear_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_report_id_;
    f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task_report::set_allocated_f_report_id(::std::string* f_report_id) {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_report_id_;
  }
  if (f_report_id) {
    set_has_f_report_id();
    f_report_id_ = f_report_id;
  } else {
    clear_has_f_report_id();
    f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_report.f_report_id)
}

// optional .pb_prj_t_user f_sponsor = 2;
inline bool pb_prj_t_task_report::has_f_sponsor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_sponsor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_task_report::clear_has_f_sponsor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_task_report::clear_f_sponsor() {
  if (f_sponsor_ != NULL) f_sponsor_->::pb_prj_t_user::Clear();
  clear_has_f_sponsor();
}
inline const ::pb_prj_t_user& pb_prj_t_task_report::f_sponsor() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_sponsor)
  return f_sponsor_ != NULL ? *f_sponsor_ : *default_instance_->f_sponsor_;
}
inline ::pb_prj_t_user* pb_prj_t_task_report::mutable_f_sponsor() {
  set_has_f_sponsor();
  if (f_sponsor_ == NULL) f_sponsor_ = new ::pb_prj_t_user;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_sponsor)
  return f_sponsor_;
}
inline ::pb_prj_t_user* pb_prj_t_task_report::release_f_sponsor() {
  clear_has_f_sponsor();
  ::pb_prj_t_user* temp = f_sponsor_;
  f_sponsor_ = NULL;
  return temp;
}
inline void pb_prj_t_task_report::set_allocated_f_sponsor(::pb_prj_t_user* f_sponsor) {
  delete f_sponsor_;
  f_sponsor_ = f_sponsor;
  if (f_sponsor) {
    set_has_f_sponsor();
  } else {
    clear_has_f_sponsor();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_report.f_sponsor)
}

// optional .pb_prj_t_user f_reply_to = 3;
inline bool pb_prj_t_task_report::has_f_reply_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_reply_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_task_report::clear_has_f_reply_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_task_report::clear_f_reply_to() {
  if (f_reply_to_ != NULL) f_reply_to_->::pb_prj_t_user::Clear();
  clear_has_f_reply_to();
}
inline const ::pb_prj_t_user& pb_prj_t_task_report::f_reply_to() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_reply_to)
  return f_reply_to_ != NULL ? *f_reply_to_ : *default_instance_->f_reply_to_;
}
inline ::pb_prj_t_user* pb_prj_t_task_report::mutable_f_reply_to() {
  set_has_f_reply_to();
  if (f_reply_to_ == NULL) f_reply_to_ = new ::pb_prj_t_user;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_reply_to)
  return f_reply_to_;
}
inline ::pb_prj_t_user* pb_prj_t_task_report::release_f_reply_to() {
  clear_has_f_reply_to();
  ::pb_prj_t_user* temp = f_reply_to_;
  f_reply_to_ = NULL;
  return temp;
}
inline void pb_prj_t_task_report::set_allocated_f_reply_to(::pb_prj_t_user* f_reply_to) {
  delete f_reply_to_;
  f_reply_to_ = f_reply_to;
  if (f_reply_to) {
    set_has_f_reply_to();
  } else {
    clear_has_f_reply_to();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_report.f_reply_to)
}

// optional string f_title = 4;
inline bool pb_prj_t_task_report::has_f_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_task_report::clear_has_f_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_task_report::clear_f_title() {
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_->clear();
  }
  clear_has_f_title();
}
inline const ::std::string& pb_prj_t_task_report::f_title() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_title)
  return *f_title_;
}
inline void pb_prj_t_task_report::set_f_title(const ::std::string& value) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task_report.f_title)
}
inline void pb_prj_t_task_report::set_f_title(const char* value) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_report.f_title)
}
inline void pb_prj_t_task_report::set_f_title(const char* value, size_t size) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_report.f_title)
}
inline ::std::string* pb_prj_t_task_report::mutable_f_title() {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_title)
  return f_title_;
}
inline ::std::string* pb_prj_t_task_report::release_f_title() {
  clear_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_title_;
    f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task_report::set_allocated_f_title(::std::string* f_title) {
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_title_;
  }
  if (f_title) {
    set_has_f_title();
    f_title_ = f_title;
  } else {
    clear_has_f_title();
    f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_report.f_title)
}

// optional string f_content = 5;
inline bool pb_prj_t_task_report::has_f_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_task_report::clear_has_f_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_task_report::clear_f_content() {
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_->clear();
  }
  clear_has_f_content();
}
inline const ::std::string& pb_prj_t_task_report::f_content() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_content)
  return *f_content_;
}
inline void pb_prj_t_task_report::set_f_content(const ::std::string& value) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task_report.f_content)
}
inline void pb_prj_t_task_report::set_f_content(const char* value) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_report.f_content)
}
inline void pb_prj_t_task_report::set_f_content(const char* value, size_t size) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_report.f_content)
}
inline ::std::string* pb_prj_t_task_report::mutable_f_content() {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_content)
  return f_content_;
}
inline ::std::string* pb_prj_t_task_report::release_f_content() {
  clear_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_content_;
    f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task_report::set_allocated_f_content(::std::string* f_content) {
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_content_;
  }
  if (f_content) {
    set_has_f_content();
    f_content_ = f_content;
  } else {
    clear_has_f_content();
    f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_report.f_content)
}

// optional int32 f_content_type = 6;
inline bool pb_prj_t_task_report::has_f_content_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_content_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_task_report::clear_has_f_content_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_task_report::clear_f_content_type() {
  f_content_type_ = 0;
  clear_has_f_content_type();
}
inline ::google::protobuf::int32 pb_prj_t_task_report::f_content_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_content_type)
  return f_content_type_;
}
inline void pb_prj_t_task_report::set_f_content_type(::google::protobuf::int32 value) {
  set_has_f_content_type();
  f_content_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_report.f_content_type)
}

// repeated .pb_im_t_msg_attach f_attach_list = 7;
inline int pb_prj_t_task_report::f_attach_list_size() const {
  return f_attach_list_.size();
}
inline void pb_prj_t_task_report::clear_f_attach_list() {
  f_attach_list_.Clear();
}
inline const ::pb_im_t_msg_attach& pb_prj_t_task_report::f_attach_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_attach_list)
  return f_attach_list_.Get(index);
}
inline ::pb_im_t_msg_attach* pb_prj_t_task_report::mutable_f_attach_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_report.f_attach_list)
  return f_attach_list_.Mutable(index);
}
inline ::pb_im_t_msg_attach* pb_prj_t_task_report::add_f_attach_list() {
  // @@protoc_insertion_point(field_add:pb_prj_t_task_report.f_attach_list)
  return f_attach_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >&
pb_prj_t_task_report::f_attach_list() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task_report.f_attach_list)
  return f_attach_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_im_t_msg_attach >*
pb_prj_t_task_report::mutable_f_attach_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task_report.f_attach_list)
  return &f_attach_list_;
}

// optional int32 f_report_time = 8;
inline bool pb_prj_t_task_report::has_f_report_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_prj_t_task_report::set_has_f_report_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_prj_t_task_report::clear_has_f_report_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_prj_t_task_report::clear_f_report_time() {
  f_report_time_ = 0;
  clear_has_f_report_time();
}
inline ::google::protobuf::int32 pb_prj_t_task_report::f_report_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_report.f_report_time)
  return f_report_time_;
}
inline void pb_prj_t_task_report::set_f_report_time(::google::protobuf::int32 value) {
  set_has_f_report_time();
  f_report_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_report.f_report_time)
}

// -------------------------------------------------------------------

// pb_prj_t_task_view

// optional int32 f_uin = 1;
inline bool pb_prj_t_task_view::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_task_view::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_task_view::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_task_view::clear_f_uin() {
  f_uin_ = 0;
  clear_has_f_uin();
}
inline ::google::protobuf::int32 pb_prj_t_task_view::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_view.f_uin)
  return f_uin_;
}
inline void pb_prj_t_task_view::set_f_uin(::google::protobuf::int32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_view.f_uin)
}

// optional string f_name = 2;
inline bool pb_prj_t_task_view::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_task_view::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_task_view::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_task_view::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_prj_t_task_view::f_name() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_view.f_name)
  return *f_name_;
}
inline void pb_prj_t_task_view::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task_view.f_name)
}
inline void pb_prj_t_task_view::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_view.f_name)
}
inline void pb_prj_t_task_view::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_view.f_name)
}
inline ::std::string* pb_prj_t_task_view::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_view.f_name)
  return f_name_;
}
inline ::std::string* pb_prj_t_task_view::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task_view::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_view.f_name)
}

// optional string f_avatar = 3;
inline bool pb_prj_t_task_view::has_f_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_task_view::set_has_f_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_task_view::clear_has_f_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_task_view::clear_f_avatar() {
  if (f_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_avatar_->clear();
  }
  clear_has_f_avatar();
}
inline const ::std::string& pb_prj_t_task_view::f_avatar() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_view.f_avatar)
  return *f_avatar_;
}
inline void pb_prj_t_task_view::set_f_avatar(const ::std::string& value) {
  set_has_f_avatar();
  if (f_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_avatar_ = new ::std::string;
  }
  f_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_task_view.f_avatar)
}
inline void pb_prj_t_task_view::set_f_avatar(const char* value) {
  set_has_f_avatar();
  if (f_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_avatar_ = new ::std::string;
  }
  f_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_view.f_avatar)
}
inline void pb_prj_t_task_view::set_f_avatar(const char* value, size_t size) {
  set_has_f_avatar();
  if (f_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_avatar_ = new ::std::string;
  }
  f_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_view.f_avatar)
}
inline ::std::string* pb_prj_t_task_view::mutable_f_avatar() {
  set_has_f_avatar();
  if (f_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_view.f_avatar)
  return f_avatar_;
}
inline ::std::string* pb_prj_t_task_view::release_f_avatar() {
  clear_has_f_avatar();
  if (f_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_avatar_;
    f_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_task_view::set_allocated_f_avatar(::std::string* f_avatar) {
  if (f_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_avatar_;
  }
  if (f_avatar) {
    set_has_f_avatar();
    f_avatar_ = f_avatar;
  } else {
    clear_has_f_avatar();
    f_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_view.f_avatar)
}

// optional int32 f_time = 4;
inline bool pb_prj_t_task_view::has_f_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_task_view::set_has_f_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_task_view::clear_has_f_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_task_view::clear_f_time() {
  f_time_ = 0;
  clear_has_f_time();
}
inline ::google::protobuf::int32 pb_prj_t_task_view::f_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_view.f_time)
  return f_time_;
}
inline void pb_prj_t_task_view::set_f_time(::google::protobuf::int32 value) {
  set_has_f_time();
  f_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_view.f_time)
}

// -------------------------------------------------------------------

// pb_prj_t_task_details

// optional .pb_prj_t_task f_task = 1;
inline bool pb_prj_t_task_details::has_f_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_task_details::set_has_f_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_task_details::clear_has_f_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_task_details::clear_f_task() {
  if (f_task_ != NULL) f_task_->::pb_prj_t_task::Clear();
  clear_has_f_task();
}
inline const ::pb_prj_t_task& pb_prj_t_task_details::f_task() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_task)
  return f_task_ != NULL ? *f_task_ : *default_instance_->f_task_;
}
inline ::pb_prj_t_task* pb_prj_t_task_details::mutable_f_task() {
  set_has_f_task();
  if (f_task_ == NULL) f_task_ = new ::pb_prj_t_task;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_details.f_task)
  return f_task_;
}
inline ::pb_prj_t_task* pb_prj_t_task_details::release_f_task() {
  clear_has_f_task();
  ::pb_prj_t_task* temp = f_task_;
  f_task_ = NULL;
  return temp;
}
inline void pb_prj_t_task_details::set_allocated_f_task(::pb_prj_t_task* f_task) {
  delete f_task_;
  f_task_ = f_task;
  if (f_task) {
    set_has_f_task();
  } else {
    clear_has_f_task();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_task_details.f_task)
}

// repeated .pb_prj_t_task_report f_report_list = 2;
inline int pb_prj_t_task_details::f_report_list_size() const {
  return f_report_list_.size();
}
inline void pb_prj_t_task_details::clear_f_report_list() {
  f_report_list_.Clear();
}
inline const ::pb_prj_t_task_report& pb_prj_t_task_details::f_report_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_report_list)
  return f_report_list_.Get(index);
}
inline ::pb_prj_t_task_report* pb_prj_t_task_details::mutable_f_report_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_details.f_report_list)
  return f_report_list_.Mutable(index);
}
inline ::pb_prj_t_task_report* pb_prj_t_task_details::add_f_report_list() {
  // @@protoc_insertion_point(field_add:pb_prj_t_task_details.f_report_list)
  return f_report_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_report >&
pb_prj_t_task_details::f_report_list() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task_details.f_report_list)
  return f_report_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_report >*
pb_prj_t_task_details::mutable_f_report_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task_details.f_report_list)
  return &f_report_list_;
}

// optional int32 f_report_count = 3;
inline bool pb_prj_t_task_details::has_f_report_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_task_details::set_has_f_report_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_task_details::clear_has_f_report_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_task_details::clear_f_report_count() {
  f_report_count_ = 0;
  clear_has_f_report_count();
}
inline ::google::protobuf::int32 pb_prj_t_task_details::f_report_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_report_count)
  return f_report_count_;
}
inline void pb_prj_t_task_details::set_f_report_count(::google::protobuf::int32 value) {
  set_has_f_report_count();
  f_report_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_details.f_report_count)
}

// repeated .pb_prj_t_task_view f_view_list = 4;
inline int pb_prj_t_task_details::f_view_list_size() const {
  return f_view_list_.size();
}
inline void pb_prj_t_task_details::clear_f_view_list() {
  f_view_list_.Clear();
}
inline const ::pb_prj_t_task_view& pb_prj_t_task_details::f_view_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_view_list)
  return f_view_list_.Get(index);
}
inline ::pb_prj_t_task_view* pb_prj_t_task_details::mutable_f_view_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_details.f_view_list)
  return f_view_list_.Mutable(index);
}
inline ::pb_prj_t_task_view* pb_prj_t_task_details::add_f_view_list() {
  // @@protoc_insertion_point(field_add:pb_prj_t_task_details.f_view_list)
  return f_view_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_view >&
pb_prj_t_task_details::f_view_list() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task_details.f_view_list)
  return f_view_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task_view >*
pb_prj_t_task_details::mutable_f_view_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task_details.f_view_list)
  return &f_view_list_;
}

// optional int32 f_view_count = 5;
inline bool pb_prj_t_task_details::has_f_view_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_task_details::set_has_f_view_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_task_details::clear_has_f_view_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_task_details::clear_f_view_count() {
  f_view_count_ = 0;
  clear_has_f_view_count();
}
inline ::google::protobuf::int32 pb_prj_t_task_details::f_view_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_view_count)
  return f_view_count_;
}
inline void pb_prj_t_task_details::set_f_view_count(::google::protobuf::int32 value) {
  set_has_f_view_count();
  f_view_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_task_details.f_view_count)
}

// repeated string f_position_list = 6;
inline int pb_prj_t_task_details::f_position_list_size() const {
  return f_position_list_.size();
}
inline void pb_prj_t_task_details::clear_f_position_list() {
  f_position_list_.Clear();
}
inline const ::std::string& pb_prj_t_task_details::f_position_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_task_details.f_position_list)
  return f_position_list_.Get(index);
}
inline ::std::string* pb_prj_t_task_details::mutable_f_position_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_task_details.f_position_list)
  return f_position_list_.Mutable(index);
}
inline void pb_prj_t_task_details::set_f_position_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_prj_t_task_details.f_position_list)
  f_position_list_.Mutable(index)->assign(value);
}
inline void pb_prj_t_task_details::set_f_position_list(int index, const char* value) {
  f_position_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_task_details.f_position_list)
}
inline void pb_prj_t_task_details::set_f_position_list(int index, const char* value, size_t size) {
  f_position_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_task_details.f_position_list)
}
inline ::std::string* pb_prj_t_task_details::add_f_position_list() {
  return f_position_list_.Add();
}
inline void pb_prj_t_task_details::add_f_position_list(const ::std::string& value) {
  f_position_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_prj_t_task_details.f_position_list)
}
inline void pb_prj_t_task_details::add_f_position_list(const char* value) {
  f_position_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_prj_t_task_details.f_position_list)
}
inline void pb_prj_t_task_details::add_f_position_list(const char* value, size_t size) {
  f_position_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_prj_t_task_details.f_position_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pb_prj_t_task_details::f_position_list() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_task_details.f_position_list)
  return f_position_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pb_prj_t_task_details::mutable_f_position_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_task_details.f_position_list)
  return &f_position_list_;
}

// -------------------------------------------------------------------

// pb_prj_t_info

// optional string f_prj_id = 1;
inline bool pb_prj_t_info::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_info::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_info::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_prj_t_info::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_id)
  return *f_prj_id_;
}
inline void pb_prj_t_info::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_id)
}
inline void pb_prj_t_info::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_prj_id)
}
inline void pb_prj_t_info::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_prj_id)
}
inline ::std::string* pb_prj_t_info::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_prj_t_info::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_prj_id)
}

// optional string f_prj_name = 2;
inline bool pb_prj_t_info::has_f_prj_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_info::clear_has_f_prj_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_info::clear_f_prj_name() {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_->clear();
  }
  clear_has_f_prj_name();
}
inline const ::std::string& pb_prj_t_info::f_prj_name() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_name)
  return *f_prj_name_;
}
inline void pb_prj_t_info::set_f_prj_name(const ::std::string& value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_name)
}
inline void pb_prj_t_info::set_f_prj_name(const char* value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_prj_name)
}
inline void pb_prj_t_info::set_f_prj_name(const char* value, size_t size) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_prj_name)
}
inline ::std::string* pb_prj_t_info::mutable_f_prj_name() {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_prj_name)
  return f_prj_name_;
}
inline ::std::string* pb_prj_t_info::release_f_prj_name() {
  clear_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_name_;
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_prj_name(::std::string* f_prj_name) {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_name) {
    set_has_f_prj_name();
    f_prj_name_ = f_prj_name;
  } else {
    clear_has_f_prj_name();
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_prj_name)
}

// optional int32 f_prj_type = 3;
inline bool pb_prj_t_info::has_f_prj_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_info::clear_has_f_prj_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_info::clear_f_prj_type() {
  f_prj_type_ = 0;
  clear_has_f_prj_type();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_prj_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_type)
  return f_prj_type_;
}
inline void pb_prj_t_info::set_f_prj_type(::google::protobuf::int32 value) {
  set_has_f_prj_type();
  f_prj_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_type)
}

// optional string f_prj_image = 4;
inline bool pb_prj_t_info::has_f_prj_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_info::clear_has_f_prj_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_info::clear_f_prj_image() {
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_->clear();
  }
  clear_has_f_prj_image();
}
inline const ::std::string& pb_prj_t_info::f_prj_image() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_image)
  return *f_prj_image_;
}
inline void pb_prj_t_info::set_f_prj_image(const ::std::string& value) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_image)
}
inline void pb_prj_t_info::set_f_prj_image(const char* value) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_prj_image)
}
inline void pb_prj_t_info::set_f_prj_image(const char* value, size_t size) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_prj_image)
}
inline ::std::string* pb_prj_t_info::mutable_f_prj_image() {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_prj_image)
  return f_prj_image_;
}
inline ::std::string* pb_prj_t_info::release_f_prj_image() {
  clear_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_image_;
    f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_prj_image(::std::string* f_prj_image) {
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_image_;
  }
  if (f_prj_image) {
    set_has_f_prj_image();
    f_prj_image_ = f_prj_image;
  } else {
    clear_has_f_prj_image();
    f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_prj_image)
}

// optional string f_group_id = 5;
inline bool pb_prj_t_info::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_info::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_info::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_info::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_prj_t_info::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_group_id)
  return *f_group_id_;
}
inline void pb_prj_t_info::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_group_id)
}
inline void pb_prj_t_info::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_group_id)
}
inline void pb_prj_t_info::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_group_id)
}
inline ::std::string* pb_prj_t_info::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_prj_t_info::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_group_id)
}

// optional string f_province = 6;
inline bool pb_prj_t_info::has_f_province() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_info::set_has_f_province() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_info::clear_has_f_province() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_info::clear_f_province() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_->clear();
  }
  clear_has_f_province();
}
inline const ::std::string& pb_prj_t_info::f_province() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_province)
  return *f_province_;
}
inline void pb_prj_t_info::set_f_province(const ::std::string& value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_province)
}
inline void pb_prj_t_info::set_f_province(const char* value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_province)
}
inline void pb_prj_t_info::set_f_province(const char* value, size_t size) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_province)
}
inline ::std::string* pb_prj_t_info::mutable_f_province() {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_province)
  return f_province_;
}
inline ::std::string* pb_prj_t_info::release_f_province() {
  clear_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_province_;
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_province(::std::string* f_province) {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_province) {
    set_has_f_province();
    f_province_ = f_province;
  } else {
    clear_has_f_province();
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_province)
}

// optional string f_city = 7;
inline bool pb_prj_t_info::has_f_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_prj_t_info::set_has_f_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_prj_t_info::clear_has_f_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_prj_t_info::clear_f_city() {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_->clear();
  }
  clear_has_f_city();
}
inline const ::std::string& pb_prj_t_info::f_city() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_city)
  return *f_city_;
}
inline void pb_prj_t_info::set_f_city(const ::std::string& value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_city)
}
inline void pb_prj_t_info::set_f_city(const char* value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_city)
}
inline void pb_prj_t_info::set_f_city(const char* value, size_t size) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_city)
}
inline ::std::string* pb_prj_t_info::mutable_f_city() {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_city)
  return f_city_;
}
inline ::std::string* pb_prj_t_info::release_f_city() {
  clear_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_city_;
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_city(::std::string* f_city) {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_city) {
    set_has_f_city();
    f_city_ = f_city;
  } else {
    clear_has_f_city();
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_city)
}

// optional string f_prj_address = 8;
inline bool pb_prj_t_info::has_f_prj_address() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_address() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_prj_t_info::clear_has_f_prj_address() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_prj_t_info::clear_f_prj_address() {
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_->clear();
  }
  clear_has_f_prj_address();
}
inline const ::std::string& pb_prj_t_info::f_prj_address() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_address)
  return *f_prj_address_;
}
inline void pb_prj_t_info::set_f_prj_address(const ::std::string& value) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_address)
}
inline void pb_prj_t_info::set_f_prj_address(const char* value) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_prj_address)
}
inline void pb_prj_t_info::set_f_prj_address(const char* value, size_t size) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_prj_address)
}
inline ::std::string* pb_prj_t_info::mutable_f_prj_address() {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_prj_address)
  return f_prj_address_;
}
inline ::std::string* pb_prj_t_info::release_f_prj_address() {
  clear_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_address_;
    f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_prj_address(::std::string* f_prj_address) {
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_address_;
  }
  if (f_prj_address) {
    set_has_f_prj_address();
    f_prj_address_ = f_prj_address;
  } else {
    clear_has_f_prj_address();
    f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_prj_address)
}

// optional int32 f_member_count = 9;
inline bool pb_prj_t_info::has_f_member_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_prj_t_info::set_has_f_member_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_prj_t_info::clear_has_f_member_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_prj_t_info::clear_f_member_count() {
  f_member_count_ = 0;
  clear_has_f_member_count();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_member_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_member_count)
  return f_member_count_;
}
inline void pb_prj_t_info::set_f_member_count(::google::protobuf::int32 value) {
  set_has_f_member_count();
  f_member_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_member_count)
}

// optional int32 f_floor_area = 10;
inline bool pb_prj_t_info::has_f_floor_area() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_prj_t_info::set_has_f_floor_area() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_prj_t_info::clear_has_f_floor_area() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_prj_t_info::clear_f_floor_area() {
  f_floor_area_ = 0;
  clear_has_f_floor_area();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_floor_area() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_floor_area)
  return f_floor_area_;
}
inline void pb_prj_t_info::set_f_floor_area(::google::protobuf::int32 value) {
  set_has_f_floor_area();
  f_floor_area_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_floor_area)
}

// optional int32 f_prj_begin = 11;
inline bool pb_prj_t_info::has_f_prj_begin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_begin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_prj_t_info::clear_has_f_prj_begin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_prj_t_info::clear_f_prj_begin() {
  f_prj_begin_ = 0;
  clear_has_f_prj_begin();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_prj_begin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_begin)
  return f_prj_begin_;
}
inline void pb_prj_t_info::set_f_prj_begin(::google::protobuf::int32 value) {
  set_has_f_prj_begin();
  f_prj_begin_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_begin)
}

// optional int32 f_prj_end = 12;
inline bool pb_prj_t_info::has_f_prj_end() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_prj_t_info::set_has_f_prj_end() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_prj_t_info::clear_has_f_prj_end() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_prj_t_info::clear_f_prj_end() {
  f_prj_end_ = 0;
  clear_has_f_prj_end();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_prj_end() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_prj_end)
  return f_prj_end_;
}
inline void pb_prj_t_info::set_f_prj_end(::google::protobuf::int32 value) {
  set_has_f_prj_end();
  f_prj_end_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_prj_end)
}

// optional string f_jianzhu_danwei = 13;
inline bool pb_prj_t_info::has_f_jianzhu_danwei() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_prj_t_info::set_has_f_jianzhu_danwei() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_prj_t_info::clear_has_f_jianzhu_danwei() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_prj_t_info::clear_f_jianzhu_danwei() {
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_->clear();
  }
  clear_has_f_jianzhu_danwei();
}
inline const ::std::string& pb_prj_t_info::f_jianzhu_danwei() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_jianzhu_danwei)
  return *f_jianzhu_danwei_;
}
inline void pb_prj_t_info::set_f_jianzhu_danwei(const ::std::string& value) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_jianzhu_danwei)
}
inline void pb_prj_t_info::set_f_jianzhu_danwei(const char* value) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_jianzhu_danwei)
}
inline void pb_prj_t_info::set_f_jianzhu_danwei(const char* value, size_t size) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_jianzhu_danwei)
}
inline ::std::string* pb_prj_t_info::mutable_f_jianzhu_danwei() {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_jianzhu_danwei)
  return f_jianzhu_danwei_;
}
inline ::std::string* pb_prj_t_info::release_f_jianzhu_danwei() {
  clear_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_jianzhu_danwei_;
    f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_jianzhu_danwei(::std::string* f_jianzhu_danwei) {
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianzhu_danwei_;
  }
  if (f_jianzhu_danwei) {
    set_has_f_jianzhu_danwei();
    f_jianzhu_danwei_ = f_jianzhu_danwei;
  } else {
    clear_has_f_jianzhu_danwei();
    f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_jianzhu_danwei)
}

// optional string f_shigong_danwei = 14;
inline bool pb_prj_t_info::has_f_shigong_danwei() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_prj_t_info::set_has_f_shigong_danwei() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_prj_t_info::clear_has_f_shigong_danwei() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_prj_t_info::clear_f_shigong_danwei() {
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_->clear();
  }
  clear_has_f_shigong_danwei();
}
inline const ::std::string& pb_prj_t_info::f_shigong_danwei() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_shigong_danwei)
  return *f_shigong_danwei_;
}
inline void pb_prj_t_info::set_f_shigong_danwei(const ::std::string& value) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_shigong_danwei)
}
inline void pb_prj_t_info::set_f_shigong_danwei(const char* value) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_shigong_danwei)
}
inline void pb_prj_t_info::set_f_shigong_danwei(const char* value, size_t size) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_shigong_danwei)
}
inline ::std::string* pb_prj_t_info::mutable_f_shigong_danwei() {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_shigong_danwei)
  return f_shigong_danwei_;
}
inline ::std::string* pb_prj_t_info::release_f_shigong_danwei() {
  clear_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_shigong_danwei_;
    f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_shigong_danwei(::std::string* f_shigong_danwei) {
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_shigong_danwei_;
  }
  if (f_shigong_danwei) {
    set_has_f_shigong_danwei();
    f_shigong_danwei_ = f_shigong_danwei;
  } else {
    clear_has_f_shigong_danwei();
    f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_shigong_danwei)
}

// optional string f_jianli_danwei = 15;
inline bool pb_prj_t_info::has_f_jianli_danwei() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pb_prj_t_info::set_has_f_jianli_danwei() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pb_prj_t_info::clear_has_f_jianli_danwei() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pb_prj_t_info::clear_f_jianli_danwei() {
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_->clear();
  }
  clear_has_f_jianli_danwei();
}
inline const ::std::string& pb_prj_t_info::f_jianli_danwei() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_jianli_danwei)
  return *f_jianli_danwei_;
}
inline void pb_prj_t_info::set_f_jianli_danwei(const ::std::string& value) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_jianli_danwei)
}
inline void pb_prj_t_info::set_f_jianli_danwei(const char* value) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_jianli_danwei)
}
inline void pb_prj_t_info::set_f_jianli_danwei(const char* value, size_t size) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_jianli_danwei)
}
inline ::std::string* pb_prj_t_info::mutable_f_jianli_danwei() {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_jianli_danwei)
  return f_jianli_danwei_;
}
inline ::std::string* pb_prj_t_info::release_f_jianli_danwei() {
  clear_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_jianli_danwei_;
    f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_jianli_danwei(::std::string* f_jianli_danwei) {
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianli_danwei_;
  }
  if (f_jianli_danwei) {
    set_has_f_jianli_danwei();
    f_jianli_danwei_ = f_jianli_danwei;
  } else {
    clear_has_f_jianli_danwei();
    f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_jianli_danwei)
}

// optional string f_fenbao_danwei = 16;
inline bool pb_prj_t_info::has_f_fenbao_danwei() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pb_prj_t_info::set_has_f_fenbao_danwei() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pb_prj_t_info::clear_has_f_fenbao_danwei() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pb_prj_t_info::clear_f_fenbao_danwei() {
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_->clear();
  }
  clear_has_f_fenbao_danwei();
}
inline const ::std::string& pb_prj_t_info::f_fenbao_danwei() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_fenbao_danwei)
  return *f_fenbao_danwei_;
}
inline void pb_prj_t_info::set_f_fenbao_danwei(const ::std::string& value) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_fenbao_danwei)
}
inline void pb_prj_t_info::set_f_fenbao_danwei(const char* value) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_fenbao_danwei)
}
inline void pb_prj_t_info::set_f_fenbao_danwei(const char* value, size_t size) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_fenbao_danwei)
}
inline ::std::string* pb_prj_t_info::mutable_f_fenbao_danwei() {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_fenbao_danwei)
  return f_fenbao_danwei_;
}
inline ::std::string* pb_prj_t_info::release_f_fenbao_danwei() {
  clear_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_fenbao_danwei_;
    f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_fenbao_danwei(::std::string* f_fenbao_danwei) {
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fenbao_danwei_;
  }
  if (f_fenbao_danwei) {
    set_has_f_fenbao_danwei();
    f_fenbao_danwei_ = f_fenbao_danwei;
  } else {
    clear_has_f_fenbao_danwei();
    f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_fenbao_danwei)
}

// optional double f_lat = 17;
inline bool pb_prj_t_info::has_f_lat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pb_prj_t_info::set_has_f_lat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pb_prj_t_info::clear_has_f_lat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pb_prj_t_info::clear_f_lat() {
  f_lat_ = 0;
  clear_has_f_lat();
}
inline double pb_prj_t_info::f_lat() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_lat)
  return f_lat_;
}
inline void pb_prj_t_info::set_f_lat(double value) {
  set_has_f_lat();
  f_lat_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_lat)
}

// optional double f_lon = 18;
inline bool pb_prj_t_info::has_f_lon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void pb_prj_t_info::set_has_f_lon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void pb_prj_t_info::clear_has_f_lon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void pb_prj_t_info::clear_f_lon() {
  f_lon_ = 0;
  clear_has_f_lon();
}
inline double pb_prj_t_info::f_lon() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_lon)
  return f_lon_;
}
inline void pb_prj_t_info::set_f_lon(double value) {
  set_has_f_lon();
  f_lon_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_lon)
}

// optional string f_job_type = 19;
inline bool pb_prj_t_info::has_f_job_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void pb_prj_t_info::set_has_f_job_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void pb_prj_t_info::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void pb_prj_t_info::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_prj_t_info::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_job_type)
  return *f_job_type_;
}
inline void pb_prj_t_info::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_job_type)
}
inline void pb_prj_t_info::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_job_type)
}
inline void pb_prj_t_info::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_job_type)
}
inline ::std::string* pb_prj_t_info::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_prj_t_info::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_job_type)
}

// optional string f_other_info = 20;
inline bool pb_prj_t_info::has_f_other_info() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void pb_prj_t_info::set_has_f_other_info() {
  _has_bits_[0] |= 0x00080000u;
}
inline void pb_prj_t_info::clear_has_f_other_info() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void pb_prj_t_info::clear_f_other_info() {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_->clear();
  }
  clear_has_f_other_info();
}
inline const ::std::string& pb_prj_t_info::f_other_info() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_other_info)
  return *f_other_info_;
}
inline void pb_prj_t_info::set_f_other_info(const ::std::string& value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_other_info)
}
inline void pb_prj_t_info::set_f_other_info(const char* value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_other_info)
}
inline void pb_prj_t_info::set_f_other_info(const char* value, size_t size) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_other_info)
}
inline ::std::string* pb_prj_t_info::mutable_f_other_info() {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_other_info)
  return f_other_info_;
}
inline ::std::string* pb_prj_t_info::release_f_other_info() {
  clear_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_other_info_;
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_other_info(::std::string* f_other_info) {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (f_other_info) {
    set_has_f_other_info();
    f_other_info_ = f_other_info;
  } else {
    clear_has_f_other_info();
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_other_info)
}

// optional string f_sms_msg = 21;
inline bool pb_prj_t_info::has_f_sms_msg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void pb_prj_t_info::set_has_f_sms_msg() {
  _has_bits_[0] |= 0x00100000u;
}
inline void pb_prj_t_info::clear_has_f_sms_msg() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void pb_prj_t_info::clear_f_sms_msg() {
  if (f_sms_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sms_msg_->clear();
  }
  clear_has_f_sms_msg();
}
inline const ::std::string& pb_prj_t_info::f_sms_msg() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_sms_msg)
  return *f_sms_msg_;
}
inline void pb_prj_t_info::set_f_sms_msg(const ::std::string& value) {
  set_has_f_sms_msg();
  if (f_sms_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sms_msg_ = new ::std::string;
  }
  f_sms_msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_sms_msg)
}
inline void pb_prj_t_info::set_f_sms_msg(const char* value) {
  set_has_f_sms_msg();
  if (f_sms_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sms_msg_ = new ::std::string;
  }
  f_sms_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_info.f_sms_msg)
}
inline void pb_prj_t_info::set_f_sms_msg(const char* value, size_t size) {
  set_has_f_sms_msg();
  if (f_sms_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sms_msg_ = new ::std::string;
  }
  f_sms_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_info.f_sms_msg)
}
inline ::std::string* pb_prj_t_info::mutable_f_sms_msg() {
  set_has_f_sms_msg();
  if (f_sms_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sms_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_sms_msg)
  return f_sms_msg_;
}
inline ::std::string* pb_prj_t_info::release_f_sms_msg() {
  clear_has_f_sms_msg();
  if (f_sms_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sms_msg_;
    f_sms_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_info::set_allocated_f_sms_msg(::std::string* f_sms_msg) {
  if (f_sms_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sms_msg_;
  }
  if (f_sms_msg) {
    set_has_f_sms_msg();
    f_sms_msg_ = f_sms_msg;
  } else {
    clear_has_f_sms_msg();
    f_sms_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_info.f_sms_msg)
}

// repeated .pb_prj_t_task f_tasks = 22;
inline int pb_prj_t_info::f_tasks_size() const {
  return f_tasks_.size();
}
inline void pb_prj_t_info::clear_f_tasks() {
  f_tasks_.Clear();
}
inline const ::pb_prj_t_task& pb_prj_t_info::f_tasks(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_tasks)
  return f_tasks_.Get(index);
}
inline ::pb_prj_t_task* pb_prj_t_info::mutable_f_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_tasks)
  return f_tasks_.Mutable(index);
}
inline ::pb_prj_t_task* pb_prj_t_info::add_f_tasks() {
  // @@protoc_insertion_point(field_add:pb_prj_t_info.f_tasks)
  return f_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
pb_prj_t_info::f_tasks() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_info.f_tasks)
  return f_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
pb_prj_t_info::mutable_f_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_info.f_tasks)
  return &f_tasks_;
}

// repeated .pb_prj_t_task f_owner_tasks = 23;
inline int pb_prj_t_info::f_owner_tasks_size() const {
  return f_owner_tasks_.size();
}
inline void pb_prj_t_info::clear_f_owner_tasks() {
  f_owner_tasks_.Clear();
}
inline const ::pb_prj_t_task& pb_prj_t_info::f_owner_tasks(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_owner_tasks)
  return f_owner_tasks_.Get(index);
}
inline ::pb_prj_t_task* pb_prj_t_info::mutable_f_owner_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_info.f_owner_tasks)
  return f_owner_tasks_.Mutable(index);
}
inline ::pb_prj_t_task* pb_prj_t_info::add_f_owner_tasks() {
  // @@protoc_insertion_point(field_add:pb_prj_t_info.f_owner_tasks)
  return f_owner_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
pb_prj_t_info::f_owner_tasks() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_info.f_owner_tasks)
  return f_owner_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
pb_prj_t_info::mutable_f_owner_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_info.f_owner_tasks)
  return &f_owner_tasks_;
}

// optional int32 f_owner_tasks_cnt = 24;
inline bool pb_prj_t_info::has_f_owner_tasks_cnt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void pb_prj_t_info::set_has_f_owner_tasks_cnt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void pb_prj_t_info::clear_has_f_owner_tasks_cnt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void pb_prj_t_info::clear_f_owner_tasks_cnt() {
  f_owner_tasks_cnt_ = 0;
  clear_has_f_owner_tasks_cnt();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_owner_tasks_cnt() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_owner_tasks_cnt)
  return f_owner_tasks_cnt_;
}
inline void pb_prj_t_info::set_f_owner_tasks_cnt(::google::protobuf::int32 value) {
  set_has_f_owner_tasks_cnt();
  f_owner_tasks_cnt_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_owner_tasks_cnt)
}

// optional int32 f_add_time = 25;
inline bool pb_prj_t_info::has_f_add_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void pb_prj_t_info::set_has_f_add_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void pb_prj_t_info::clear_has_f_add_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void pb_prj_t_info::clear_f_add_time() {
  f_add_time_ = 0;
  clear_has_f_add_time();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_add_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_add_time)
  return f_add_time_;
}
inline void pb_prj_t_info::set_f_add_time(::google::protobuf::int32 value) {
  set_has_f_add_time();
  f_add_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_add_time)
}

// optional int32 f_creater_uin = 26;
inline bool pb_prj_t_info::has_f_creater_uin() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void pb_prj_t_info::set_has_f_creater_uin() {
  _has_bits_[0] |= 0x02000000u;
}
inline void pb_prj_t_info::clear_has_f_creater_uin() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void pb_prj_t_info::clear_f_creater_uin() {
  f_creater_uin_ = 0;
  clear_has_f_creater_uin();
}
inline ::google::protobuf::int32 pb_prj_t_info::f_creater_uin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_info.f_creater_uin)
  return f_creater_uin_;
}
inline void pb_prj_t_info::set_f_creater_uin(::google::protobuf::int32 value) {
  set_has_f_creater_uin();
  f_creater_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_info.f_creater_uin)
}

// -------------------------------------------------------------------

// pb_prj_t_log

// optional string f_log_content = 1;
inline bool pb_prj_t_log::has_f_log_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_log::set_has_f_log_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_log::clear_has_f_log_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_log::clear_f_log_content() {
  if (f_log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_content_->clear();
  }
  clear_has_f_log_content();
}
inline const ::std::string& pb_prj_t_log::f_log_content() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_log.f_log_content)
  return *f_log_content_;
}
inline void pb_prj_t_log::set_f_log_content(const ::std::string& value) {
  set_has_f_log_content();
  if (f_log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_content_ = new ::std::string;
  }
  f_log_content_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_log.f_log_content)
}
inline void pb_prj_t_log::set_f_log_content(const char* value) {
  set_has_f_log_content();
  if (f_log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_content_ = new ::std::string;
  }
  f_log_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_log.f_log_content)
}
inline void pb_prj_t_log::set_f_log_content(const char* value, size_t size) {
  set_has_f_log_content();
  if (f_log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_content_ = new ::std::string;
  }
  f_log_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_log.f_log_content)
}
inline ::std::string* pb_prj_t_log::mutable_f_log_content() {
  set_has_f_log_content();
  if (f_log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_log.f_log_content)
  return f_log_content_;
}
inline ::std::string* pb_prj_t_log::release_f_log_content() {
  clear_has_f_log_content();
  if (f_log_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_log_content_;
    f_log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_log::set_allocated_f_log_content(::std::string* f_log_content) {
  if (f_log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_log_content_;
  }
  if (f_log_content) {
    set_has_f_log_content();
    f_log_content_ = f_log_content;
  } else {
    clear_has_f_log_content();
    f_log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_log.f_log_content)
}

// optional int32 f_add_time = 2;
inline bool pb_prj_t_log::has_f_add_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_log::set_has_f_add_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_log::clear_has_f_add_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_log::clear_f_add_time() {
  f_add_time_ = 0;
  clear_has_f_add_time();
}
inline ::google::protobuf::int32 pb_prj_t_log::f_add_time() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_log.f_add_time)
  return f_add_time_;
}
inline void pb_prj_t_log::set_f_add_time(::google::protobuf::int32 value) {
  set_has_f_add_time();
  f_add_time_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_log.f_add_time)
}

// -------------------------------------------------------------------

// pb_prj_t_over_view

// optional string f_prj_id = 1;
inline bool pb_prj_t_over_view::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_over_view::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_prj_t_over_view::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_id)
  return *f_prj_id_;
}
inline void pb_prj_t_over_view::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_id)
}
inline void pb_prj_t_over_view::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_over_view.f_prj_id)
}
inline void pb_prj_t_over_view::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_over_view.f_prj_id)
}
inline ::std::string* pb_prj_t_over_view::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_prj_t_over_view::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_over_view::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_over_view.f_prj_id)
}

// optional string f_prj_name = 2;
inline bool pb_prj_t_over_view::has_f_prj_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_over_view::clear_f_prj_name() {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_->clear();
  }
  clear_has_f_prj_name();
}
inline const ::std::string& pb_prj_t_over_view::f_prj_name() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_name)
  return *f_prj_name_;
}
inline void pb_prj_t_over_view::set_f_prj_name(const ::std::string& value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_name)
}
inline void pb_prj_t_over_view::set_f_prj_name(const char* value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_over_view.f_prj_name)
}
inline void pb_prj_t_over_view::set_f_prj_name(const char* value, size_t size) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_over_view.f_prj_name)
}
inline ::std::string* pb_prj_t_over_view::mutable_f_prj_name() {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_prj_name)
  return f_prj_name_;
}
inline ::std::string* pb_prj_t_over_view::release_f_prj_name() {
  clear_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_name_;
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_over_view::set_allocated_f_prj_name(::std::string* f_prj_name) {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_name) {
    set_has_f_prj_name();
    f_prj_name_ = f_prj_name;
  } else {
    clear_has_f_prj_name();
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_over_view.f_prj_name)
}

// optional string f_prj_code = 3;
inline bool pb_prj_t_over_view::has_f_prj_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_over_view::clear_f_prj_code() {
  if (f_prj_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_code_->clear();
  }
  clear_has_f_prj_code();
}
inline const ::std::string& pb_prj_t_over_view::f_prj_code() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_code)
  return *f_prj_code_;
}
inline void pb_prj_t_over_view::set_f_prj_code(const ::std::string& value) {
  set_has_f_prj_code();
  if (f_prj_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_code_ = new ::std::string;
  }
  f_prj_code_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_code)
}
inline void pb_prj_t_over_view::set_f_prj_code(const char* value) {
  set_has_f_prj_code();
  if (f_prj_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_code_ = new ::std::string;
  }
  f_prj_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_over_view.f_prj_code)
}
inline void pb_prj_t_over_view::set_f_prj_code(const char* value, size_t size) {
  set_has_f_prj_code();
  if (f_prj_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_code_ = new ::std::string;
  }
  f_prj_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_over_view.f_prj_code)
}
inline ::std::string* pb_prj_t_over_view::mutable_f_prj_code() {
  set_has_f_prj_code();
  if (f_prj_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_prj_code)
  return f_prj_code_;
}
inline ::std::string* pb_prj_t_over_view::release_f_prj_code() {
  clear_has_f_prj_code();
  if (f_prj_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_code_;
    f_prj_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_over_view::set_allocated_f_prj_code(::std::string* f_prj_code) {
  if (f_prj_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_code_;
  }
  if (f_prj_code) {
    set_has_f_prj_code();
    f_prj_code_ = f_prj_code;
  } else {
    clear_has_f_prj_code();
    f_prj_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_over_view.f_prj_code)
}

// optional int32 f_prj_member_count = 4;
inline bool pb_prj_t_over_view::has_f_prj_member_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_member_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_member_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_over_view::clear_f_prj_member_count() {
  f_prj_member_count_ = 0;
  clear_has_f_prj_member_count();
}
inline ::google::protobuf::int32 pb_prj_t_over_view::f_prj_member_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_member_count)
  return f_prj_member_count_;
}
inline void pb_prj_t_over_view::set_f_prj_member_count(::google::protobuf::int32 value) {
  set_has_f_prj_member_count();
  f_prj_member_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_member_count)
}

// optional string f_prj_my_job = 5;
inline bool pb_prj_t_over_view::has_f_prj_my_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_my_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_my_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_over_view::clear_f_prj_my_job() {
  if (f_prj_my_job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_my_job_->clear();
  }
  clear_has_f_prj_my_job();
}
inline const ::std::string& pb_prj_t_over_view::f_prj_my_job() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_my_job)
  return *f_prj_my_job_;
}
inline void pb_prj_t_over_view::set_f_prj_my_job(const ::std::string& value) {
  set_has_f_prj_my_job();
  if (f_prj_my_job_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_my_job_ = new ::std::string;
  }
  f_prj_my_job_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_my_job)
}
inline void pb_prj_t_over_view::set_f_prj_my_job(const char* value) {
  set_has_f_prj_my_job();
  if (f_prj_my_job_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_my_job_ = new ::std::string;
  }
  f_prj_my_job_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_over_view.f_prj_my_job)
}
inline void pb_prj_t_over_view::set_f_prj_my_job(const char* value, size_t size) {
  set_has_f_prj_my_job();
  if (f_prj_my_job_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_my_job_ = new ::std::string;
  }
  f_prj_my_job_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_over_view.f_prj_my_job)
}
inline ::std::string* pb_prj_t_over_view::mutable_f_prj_my_job() {
  set_has_f_prj_my_job();
  if (f_prj_my_job_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_my_job_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_prj_my_job)
  return f_prj_my_job_;
}
inline ::std::string* pb_prj_t_over_view::release_f_prj_my_job() {
  clear_has_f_prj_my_job();
  if (f_prj_my_job_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_my_job_;
    f_prj_my_job_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_over_view::set_allocated_f_prj_my_job(::std::string* f_prj_my_job) {
  if (f_prj_my_job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_my_job_;
  }
  if (f_prj_my_job) {
    set_has_f_prj_my_job();
    f_prj_my_job_ = f_prj_my_job;
  } else {
    clear_has_f_prj_my_job();
    f_prj_my_job_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_over_view.f_prj_my_job)
}

// optional int32 f_prj_begin = 6;
inline bool pb_prj_t_over_view::has_f_prj_begin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_begin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_begin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_over_view::clear_f_prj_begin() {
  f_prj_begin_ = 0;
  clear_has_f_prj_begin();
}
inline ::google::protobuf::int32 pb_prj_t_over_view::f_prj_begin() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_begin)
  return f_prj_begin_;
}
inline void pb_prj_t_over_view::set_f_prj_begin(::google::protobuf::int32 value) {
  set_has_f_prj_begin();
  f_prj_begin_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_begin)
}

// optional int32 f_prj_end = 7;
inline bool pb_prj_t_over_view::has_f_prj_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_prj_t_over_view::clear_f_prj_end() {
  f_prj_end_ = 0;
  clear_has_f_prj_end();
}
inline ::google::protobuf::int32 pb_prj_t_over_view::f_prj_end() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_end)
  return f_prj_end_;
}
inline void pb_prj_t_over_view::set_f_prj_end(::google::protobuf::int32 value) {
  set_has_f_prj_end();
  f_prj_end_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_end)
}

// optional int32 f_prj_task_count = 8;
inline bool pb_prj_t_over_view::has_f_prj_task_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_prj_task_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_prj_t_over_view::clear_has_f_prj_task_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_prj_t_over_view::clear_f_prj_task_count() {
  f_prj_task_count_ = 0;
  clear_has_f_prj_task_count();
}
inline ::google::protobuf::int32 pb_prj_t_over_view::f_prj_task_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_task_count)
  return f_prj_task_count_;
}
inline void pb_prj_t_over_view::set_f_prj_task_count(::google::protobuf::int32 value) {
  set_has_f_prj_task_count();
  f_prj_task_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_over_view.f_prj_task_count)
}

// repeated .pb_prj_t_log f_prj_log = 9;
inline int pb_prj_t_over_view::f_prj_log_size() const {
  return f_prj_log_.size();
}
inline void pb_prj_t_over_view::clear_f_prj_log() {
  f_prj_log_.Clear();
}
inline const ::pb_prj_t_log& pb_prj_t_over_view::f_prj_log(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_prj_log)
  return f_prj_log_.Get(index);
}
inline ::pb_prj_t_log* pb_prj_t_over_view::mutable_f_prj_log(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_prj_log)
  return f_prj_log_.Mutable(index);
}
inline ::pb_prj_t_log* pb_prj_t_over_view::add_f_prj_log() {
  // @@protoc_insertion_point(field_add:pb_prj_t_over_view.f_prj_log)
  return f_prj_log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_log >&
pb_prj_t_over_view::f_prj_log() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_over_view.f_prj_log)
  return f_prj_log_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_log >*
pb_prj_t_over_view::mutable_f_prj_log() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_over_view.f_prj_log)
  return &f_prj_log_;
}

// optional .pb_clt_t_friend f_frd = 10;
inline bool pb_prj_t_over_view::has_f_frd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_prj_t_over_view::set_has_f_frd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_prj_t_over_view::clear_has_f_frd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_prj_t_over_view::clear_f_frd() {
  if (f_frd_ != NULL) f_frd_->::pb_clt_t_friend::Clear();
  clear_has_f_frd();
}
inline const ::pb_clt_t_friend& pb_prj_t_over_view::f_frd() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_over_view.f_frd)
  return f_frd_ != NULL ? *f_frd_ : *default_instance_->f_frd_;
}
inline ::pb_clt_t_friend* pb_prj_t_over_view::mutable_f_frd() {
  set_has_f_frd();
  if (f_frd_ == NULL) f_frd_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_over_view.f_frd)
  return f_frd_;
}
inline ::pb_clt_t_friend* pb_prj_t_over_view::release_f_frd() {
  clear_has_f_frd();
  ::pb_clt_t_friend* temp = f_frd_;
  f_frd_ = NULL;
  return temp;
}
inline void pb_prj_t_over_view::set_allocated_f_frd(::pb_clt_t_friend* f_frd) {
  delete f_frd_;
  f_frd_ = f_frd;
  if (f_frd) {
    set_has_f_frd();
  } else {
    clear_has_f_frd();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_over_view.f_frd)
}

// -------------------------------------------------------------------

// pb_prj_t_prj

// optional int32 f_update_type = 1;
inline bool pb_prj_t_prj::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_prj::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_prj::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_prj::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_prj_t_prj::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_prj.f_update_type)
  return f_update_type_;
}
inline void pb_prj_t_prj::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_prj.f_update_type)
}

// repeated .pb_prj_t_info f_prjs = 2;
inline int pb_prj_t_prj::f_prjs_size() const {
  return f_prjs_.size();
}
inline void pb_prj_t_prj::clear_f_prjs() {
  f_prjs_.Clear();
}
inline const ::pb_prj_t_info& pb_prj_t_prj::f_prjs(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_prj.f_prjs)
  return f_prjs_.Get(index);
}
inline ::pb_prj_t_info* pb_prj_t_prj::mutable_f_prjs(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_prj.f_prjs)
  return f_prjs_.Mutable(index);
}
inline ::pb_prj_t_info* pb_prj_t_prj::add_f_prjs() {
  // @@protoc_insertion_point(field_add:pb_prj_t_prj.f_prjs)
  return f_prjs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_info >&
pb_prj_t_prj::f_prjs() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_prj.f_prjs)
  return f_prjs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_info >*
pb_prj_t_prj::mutable_f_prjs() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_prj.f_prjs)
  return &f_prjs_;
}

// -------------------------------------------------------------------

// pb_prj_t_recommend_info

// optional .pb_prj_t_info f_info = 1;
inline bool pb_prj_t_recommend_info::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_recommend_info::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_recommend_info::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_recommend_info::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_prj_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_prj_t_info& pb_prj_t_recommend_info::f_info() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_info.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_prj_t_info* pb_prj_t_recommend_info::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_prj_t_info;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_recommend_info.f_info)
  return f_info_;
}
inline ::pb_prj_t_info* pb_prj_t_recommend_info::release_f_info() {
  clear_has_f_info();
  ::pb_prj_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_prj_t_recommend_info::set_allocated_f_info(::pb_prj_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_recommend_info.f_info)
}

// optional uint32 f_type = 2;
inline bool pb_prj_t_recommend_info::has_f_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_recommend_info::set_has_f_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_recommend_info::clear_has_f_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_recommend_info::clear_f_type() {
  f_type_ = 0u;
  clear_has_f_type();
}
inline ::google::protobuf::uint32 pb_prj_t_recommend_info::f_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_info.f_type)
  return f_type_;
}
inline void pb_prj_t_recommend_info::set_f_type(::google::protobuf::uint32 value) {
  set_has_f_type();
  f_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_recommend_info.f_type)
}

// optional int32 f_weight = 3;
inline bool pb_prj_t_recommend_info::has_f_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_recommend_info::set_has_f_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_recommend_info::clear_has_f_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_recommend_info::clear_f_weight() {
  f_weight_ = 0;
  clear_has_f_weight();
}
inline ::google::protobuf::int32 pb_prj_t_recommend_info::f_weight() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_info.f_weight)
  return f_weight_;
}
inline void pb_prj_t_recommend_info::set_f_weight(::google::protobuf::int32 value) {
  set_has_f_weight();
  f_weight_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_recommend_info.f_weight)
}

// optional string f_other_info = 4;
inline bool pb_prj_t_recommend_info::has_f_other_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_prj_t_recommend_info::set_has_f_other_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_prj_t_recommend_info::clear_has_f_other_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_prj_t_recommend_info::clear_f_other_info() {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_->clear();
  }
  clear_has_f_other_info();
}
inline const ::std::string& pb_prj_t_recommend_info::f_other_info() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_info.f_other_info)
  return *f_other_info_;
}
inline void pb_prj_t_recommend_info::set_f_other_info(const ::std::string& value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set:pb_prj_t_recommend_info.f_other_info)
}
inline void pb_prj_t_recommend_info::set_f_other_info(const char* value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_prj_t_recommend_info.f_other_info)
}
inline void pb_prj_t_recommend_info::set_f_other_info(const char* value, size_t size) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_prj_t_recommend_info.f_other_info)
}
inline ::std::string* pb_prj_t_recommend_info::mutable_f_other_info() {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_prj_t_recommend_info.f_other_info)
  return f_other_info_;
}
inline ::std::string* pb_prj_t_recommend_info::release_f_other_info() {
  clear_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_other_info_;
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_prj_t_recommend_info::set_allocated_f_other_info(::std::string* f_other_info) {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (f_other_info) {
    set_has_f_other_info();
    f_other_info_ = f_other_info;
  } else {
    clear_has_f_other_info();
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_recommend_info.f_other_info)
}

// -------------------------------------------------------------------

// pb_prj_t_recommend_prj

// optional int32 f_update_type = 1;
inline bool pb_prj_t_recommend_prj::has_f_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_recommend_prj::set_has_f_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_recommend_prj::clear_has_f_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_recommend_prj::clear_f_update_type() {
  f_update_type_ = 0;
  clear_has_f_update_type();
}
inline ::google::protobuf::int32 pb_prj_t_recommend_prj::f_update_type() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_prj.f_update_type)
  return f_update_type_;
}
inline void pb_prj_t_recommend_prj::set_f_update_type(::google::protobuf::int32 value) {
  set_has_f_update_type();
  f_update_type_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_recommend_prj.f_update_type)
}

// repeated .pb_prj_t_recommend_info f_prjs = 2;
inline int pb_prj_t_recommend_prj::f_prjs_size() const {
  return f_prjs_.size();
}
inline void pb_prj_t_recommend_prj::clear_f_prjs() {
  f_prjs_.Clear();
}
inline const ::pb_prj_t_recommend_info& pb_prj_t_recommend_prj::f_prjs(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_recommend_prj.f_prjs)
  return f_prjs_.Get(index);
}
inline ::pb_prj_t_recommend_info* pb_prj_t_recommend_prj::mutable_f_prjs(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_recommend_prj.f_prjs)
  return f_prjs_.Mutable(index);
}
inline ::pb_prj_t_recommend_info* pb_prj_t_recommend_prj::add_f_prjs() {
  // @@protoc_insertion_point(field_add:pb_prj_t_recommend_prj.f_prjs)
  return f_prjs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >&
pb_prj_t_recommend_prj::f_prjs() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_recommend_prj.f_prjs)
  return f_prjs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >*
pb_prj_t_recommend_prj::mutable_f_prjs() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_recommend_prj.f_prjs)
  return &f_prjs_;
}

// -------------------------------------------------------------------

// pb_prj_t_details

// optional .pb_prj_t_info f_info = 1;
inline bool pb_prj_t_details::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_prj_t_details::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_prj_t_details::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_prj_t_details::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_prj_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_prj_t_info& pb_prj_t_details::f_info() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_prj_t_info* pb_prj_t_details::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_prj_t_info;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_info)
  return f_info_;
}
inline ::pb_prj_t_info* pb_prj_t_details::release_f_info() {
  clear_has_f_info();
  ::pb_prj_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_prj_t_details::set_allocated_f_info(::pb_prj_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_details.f_info)
}

// optional .pb_clt_t_group f_im_group = 2;
inline bool pb_prj_t_details::has_f_im_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_prj_t_details::set_has_f_im_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_prj_t_details::clear_has_f_im_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_prj_t_details::clear_f_im_group() {
  if (f_im_group_ != NULL) f_im_group_->::pb_clt_t_group::Clear();
  clear_has_f_im_group();
}
inline const ::pb_clt_t_group& pb_prj_t_details::f_im_group() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_im_group)
  return f_im_group_ != NULL ? *f_im_group_ : *default_instance_->f_im_group_;
}
inline ::pb_clt_t_group* pb_prj_t_details::mutable_f_im_group() {
  set_has_f_im_group();
  if (f_im_group_ == NULL) f_im_group_ = new ::pb_clt_t_group;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_im_group)
  return f_im_group_;
}
inline ::pb_clt_t_group* pb_prj_t_details::release_f_im_group() {
  clear_has_f_im_group();
  ::pb_clt_t_group* temp = f_im_group_;
  f_im_group_ = NULL;
  return temp;
}
inline void pb_prj_t_details::set_allocated_f_im_group(::pb_clt_t_group* f_im_group) {
  delete f_im_group_;
  f_im_group_ = f_im_group;
  if (f_im_group) {
    set_has_f_im_group();
  } else {
    clear_has_f_im_group();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_details.f_im_group)
}

// optional .pb_prj_t_task_details f_task_details = 3;
inline bool pb_prj_t_details::has_f_task_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_prj_t_details::set_has_f_task_details() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_prj_t_details::clear_has_f_task_details() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_prj_t_details::clear_f_task_details() {
  if (f_task_details_ != NULL) f_task_details_->::pb_prj_t_task_details::Clear();
  clear_has_f_task_details();
}
inline const ::pb_prj_t_task_details& pb_prj_t_details::f_task_details() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_task_details)
  return f_task_details_ != NULL ? *f_task_details_ : *default_instance_->f_task_details_;
}
inline ::pb_prj_t_task_details* pb_prj_t_details::mutable_f_task_details() {
  set_has_f_task_details();
  if (f_task_details_ == NULL) f_task_details_ = new ::pb_prj_t_task_details;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_task_details)
  return f_task_details_;
}
inline ::pb_prj_t_task_details* pb_prj_t_details::release_f_task_details() {
  clear_has_f_task_details();
  ::pb_prj_t_task_details* temp = f_task_details_;
  f_task_details_ = NULL;
  return temp;
}
inline void pb_prj_t_details::set_allocated_f_task_details(::pb_prj_t_task_details* f_task_details) {
  delete f_task_details_;
  f_task_details_ = f_task_details;
  if (f_task_details) {
    set_has_f_task_details();
  } else {
    clear_has_f_task_details();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_details.f_task_details)
}

// repeated .pb_prj_t_task f_tasks = 4;
inline int pb_prj_t_details::f_tasks_size() const {
  return f_tasks_.size();
}
inline void pb_prj_t_details::clear_f_tasks() {
  f_tasks_.Clear();
}
inline const ::pb_prj_t_task& pb_prj_t_details::f_tasks(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_tasks)
  return f_tasks_.Get(index);
}
inline ::pb_prj_t_task* pb_prj_t_details::mutable_f_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_tasks)
  return f_tasks_.Mutable(index);
}
inline ::pb_prj_t_task* pb_prj_t_details::add_f_tasks() {
  // @@protoc_insertion_point(field_add:pb_prj_t_details.f_tasks)
  return f_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >&
pb_prj_t_details::f_tasks() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_details.f_tasks)
  return f_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_task >*
pb_prj_t_details::mutable_f_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_details.f_tasks)
  return &f_tasks_;
}

// optional int32 f_task_total_count = 5;
inline bool pb_prj_t_details::has_f_task_total_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_prj_t_details::set_has_f_task_total_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_prj_t_details::clear_has_f_task_total_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_prj_t_details::clear_f_task_total_count() {
  f_task_total_count_ = 0;
  clear_has_f_task_total_count();
}
inline ::google::protobuf::int32 pb_prj_t_details::f_task_total_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_task_total_count)
  return f_task_total_count_;
}
inline void pb_prj_t_details::set_f_task_total_count(::google::protobuf::int32 value) {
  set_has_f_task_total_count();
  f_task_total_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_details.f_task_total_count)
}

// optional int32 f_task_unfinished_count = 6;
inline bool pb_prj_t_details::has_f_task_unfinished_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_prj_t_details::set_has_f_task_unfinished_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_prj_t_details::clear_has_f_task_unfinished_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_prj_t_details::clear_f_task_unfinished_count() {
  f_task_unfinished_count_ = 0;
  clear_has_f_task_unfinished_count();
}
inline ::google::protobuf::int32 pb_prj_t_details::f_task_unfinished_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_task_unfinished_count)
  return f_task_unfinished_count_;
}
inline void pb_prj_t_details::set_f_task_unfinished_count(::google::protobuf::int32 value) {
  set_has_f_task_unfinished_count();
  f_task_unfinished_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_details.f_task_unfinished_count)
}

// optional int32 f_task_delay_count = 7;
inline bool pb_prj_t_details::has_f_task_delay_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_prj_t_details::set_has_f_task_delay_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_prj_t_details::clear_has_f_task_delay_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_prj_t_details::clear_f_task_delay_count() {
  f_task_delay_count_ = 0;
  clear_has_f_task_delay_count();
}
inline ::google::protobuf::int32 pb_prj_t_details::f_task_delay_count() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_task_delay_count)
  return f_task_delay_count_;
}
inline void pb_prj_t_details::set_f_task_delay_count(::google::protobuf::int32 value) {
  set_has_f_task_delay_count();
  f_task_delay_count_ = value;
  // @@protoc_insertion_point(field_set:pb_prj_t_details.f_task_delay_count)
}

// repeated .pb_prj_t_user f_users = 8;
inline int pb_prj_t_details::f_users_size() const {
  return f_users_.size();
}
inline void pb_prj_t_details::clear_f_users() {
  f_users_.Clear();
}
inline const ::pb_prj_t_user& pb_prj_t_details::f_users(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_users)
  return f_users_.Get(index);
}
inline ::pb_prj_t_user* pb_prj_t_details::mutable_f_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_users)
  return f_users_.Mutable(index);
}
inline ::pb_prj_t_user* pb_prj_t_details::add_f_users() {
  // @@protoc_insertion_point(field_add:pb_prj_t_details.f_users)
  return f_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
pb_prj_t_details::f_users() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_details.f_users)
  return f_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
pb_prj_t_details::mutable_f_users() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_details.f_users)
  return &f_users_;
}

// repeated .pb_prj_t_user f_app_users = 9;
inline int pb_prj_t_details::f_app_users_size() const {
  return f_app_users_.size();
}
inline void pb_prj_t_details::clear_f_app_users() {
  f_app_users_.Clear();
}
inline const ::pb_prj_t_user& pb_prj_t_details::f_app_users(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_app_users)
  return f_app_users_.Get(index);
}
inline ::pb_prj_t_user* pb_prj_t_details::mutable_f_app_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_app_users)
  return f_app_users_.Mutable(index);
}
inline ::pb_prj_t_user* pb_prj_t_details::add_f_app_users() {
  // @@protoc_insertion_point(field_add:pb_prj_t_details.f_app_users)
  return f_app_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >&
pb_prj_t_details::f_app_users() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_details.f_app_users)
  return f_app_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_user >*
pb_prj_t_details::mutable_f_app_users() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_details.f_app_users)
  return &f_app_users_;
}

// optional .pb_clt_t_friend f_frd = 10;
inline bool pb_prj_t_details::has_f_frd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_prj_t_details::set_has_f_frd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_prj_t_details::clear_has_f_frd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_prj_t_details::clear_f_frd() {
  if (f_frd_ != NULL) f_frd_->::pb_clt_t_friend::Clear();
  clear_has_f_frd();
}
inline const ::pb_clt_t_friend& pb_prj_t_details::f_frd() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_frd)
  return f_frd_ != NULL ? *f_frd_ : *default_instance_->f_frd_;
}
inline ::pb_clt_t_friend* pb_prj_t_details::mutable_f_frd() {
  set_has_f_frd();
  if (f_frd_ == NULL) f_frd_ = new ::pb_clt_t_friend;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_frd)
  return f_frd_;
}
inline ::pb_clt_t_friend* pb_prj_t_details::release_f_frd() {
  clear_has_f_frd();
  ::pb_clt_t_friend* temp = f_frd_;
  f_frd_ = NULL;
  return temp;
}
inline void pb_prj_t_details::set_allocated_f_frd(::pb_clt_t_friend* f_frd) {
  delete f_frd_;
  f_frd_ = f_frd;
  if (f_frd) {
    set_has_f_frd();
  } else {
    clear_has_f_frd();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_details.f_frd)
}

// repeated .pb_prj_t_feed f_feeds = 11;
inline int pb_prj_t_details::f_feeds_size() const {
  return f_feeds_.size();
}
inline void pb_prj_t_details::clear_f_feeds() {
  f_feeds_.Clear();
}
inline const ::pb_prj_t_feed& pb_prj_t_details::f_feeds(int index) const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_feeds)
  return f_feeds_.Get(index);
}
inline ::pb_prj_t_feed* pb_prj_t_details::mutable_f_feeds(int index) {
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_feeds)
  return f_feeds_.Mutable(index);
}
inline ::pb_prj_t_feed* pb_prj_t_details::add_f_feeds() {
  // @@protoc_insertion_point(field_add:pb_prj_t_details.f_feeds)
  return f_feeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_feed >&
pb_prj_t_details::f_feeds() const {
  // @@protoc_insertion_point(field_list:pb_prj_t_details.f_feeds)
  return f_feeds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_feed >*
pb_prj_t_details::mutable_f_feeds() {
  // @@protoc_insertion_point(field_mutable_list:pb_prj_t_details.f_feeds)
  return &f_feeds_;
}

// optional .pb_prj_t_over_view f_prj_over_view = 12;
inline bool pb_prj_t_details::has_f_prj_over_view() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_prj_t_details::set_has_f_prj_over_view() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_prj_t_details::clear_has_f_prj_over_view() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_prj_t_details::clear_f_prj_over_view() {
  if (f_prj_over_view_ != NULL) f_prj_over_view_->::pb_prj_t_over_view::Clear();
  clear_has_f_prj_over_view();
}
inline const ::pb_prj_t_over_view& pb_prj_t_details::f_prj_over_view() const {
  // @@protoc_insertion_point(field_get:pb_prj_t_details.f_prj_over_view)
  return f_prj_over_view_ != NULL ? *f_prj_over_view_ : *default_instance_->f_prj_over_view_;
}
inline ::pb_prj_t_over_view* pb_prj_t_details::mutable_f_prj_over_view() {
  set_has_f_prj_over_view();
  if (f_prj_over_view_ == NULL) f_prj_over_view_ = new ::pb_prj_t_over_view;
  // @@protoc_insertion_point(field_mutable:pb_prj_t_details.f_prj_over_view)
  return f_prj_over_view_;
}
inline ::pb_prj_t_over_view* pb_prj_t_details::release_f_prj_over_view() {
  clear_has_f_prj_over_view();
  ::pb_prj_t_over_view* temp = f_prj_over_view_;
  f_prj_over_view_ = NULL;
  return temp;
}
inline void pb_prj_t_details::set_allocated_f_prj_over_view(::pb_prj_t_over_view* f_prj_over_view) {
  delete f_prj_over_view_;
  f_prj_over_view_ = f_prj_over_view;
  if (f_prj_over_view) {
    set_has_f_prj_over_view();
  } else {
    clear_has_f_prj_over_view();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_prj_t_details.f_prj_over_view)
}

// -------------------------------------------------------------------

// pb_user_t_info

// optional uint32 f_uin = 1;
inline bool pb_user_t_info::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_info::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_info::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_info::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_user_t_info::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_uin)
  return f_uin_;
}
inline void pb_user_t_info::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_uin)
}

// optional string f_province = 2;
inline bool pb_user_t_info::has_f_province() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_info::set_has_f_province() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_info::clear_has_f_province() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_info::clear_f_province() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_->clear();
  }
  clear_has_f_province();
}
inline const ::std::string& pb_user_t_info::f_province() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_province)
  return *f_province_;
}
inline void pb_user_t_info::set_f_province(const ::std::string& value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_province)
}
inline void pb_user_t_info::set_f_province(const char* value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_province)
}
inline void pb_user_t_info::set_f_province(const char* value, size_t size) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_province)
}
inline ::std::string* pb_user_t_info::mutable_f_province() {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_province)
  return f_province_;
}
inline ::std::string* pb_user_t_info::release_f_province() {
  clear_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_province_;
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_province(::std::string* f_province) {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_province) {
    set_has_f_province();
    f_province_ = f_province;
  } else {
    clear_has_f_province();
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_province)
}

// optional string f_city = 3;
inline bool pb_user_t_info::has_f_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_user_t_info::set_has_f_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_user_t_info::clear_has_f_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_user_t_info::clear_f_city() {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_->clear();
  }
  clear_has_f_city();
}
inline const ::std::string& pb_user_t_info::f_city() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_city)
  return *f_city_;
}
inline void pb_user_t_info::set_f_city(const ::std::string& value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_city)
}
inline void pb_user_t_info::set_f_city(const char* value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_city)
}
inline void pb_user_t_info::set_f_city(const char* value, size_t size) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_city)
}
inline ::std::string* pb_user_t_info::mutable_f_city() {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_city)
  return f_city_;
}
inline ::std::string* pb_user_t_info::release_f_city() {
  clear_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_city_;
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_city(::std::string* f_city) {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_city) {
    set_has_f_city();
    f_city_ = f_city;
  } else {
    clear_has_f_city();
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_city)
}

// optional string f_phone = 4;
inline bool pb_user_t_info::has_f_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_user_t_info::set_has_f_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_user_t_info::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_user_t_info::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_user_t_info::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_phone)
  return *f_phone_;
}
inline void pb_user_t_info::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_phone)
}
inline void pb_user_t_info::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_phone)
}
inline void pb_user_t_info::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_phone)
}
inline ::std::string* pb_user_t_info::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_phone)
  return f_phone_;
}
inline ::std::string* pb_user_t_info::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_phone)
}

// optional string f_name = 5;
inline bool pb_user_t_info::has_f_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_user_t_info::set_has_f_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_user_t_info::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_user_t_info::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_user_t_info::f_name() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_name)
  return *f_name_;
}
inline void pb_user_t_info::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_name)
}
inline void pb_user_t_info::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_name)
}
inline void pb_user_t_info::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_name)
}
inline ::std::string* pb_user_t_info::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_name)
  return f_name_;
}
inline ::std::string* pb_user_t_info::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_name)
}

// optional string f_company_type = 6;
inline bool pb_user_t_info::has_f_company_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_user_t_info::set_has_f_company_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_user_t_info::clear_has_f_company_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_user_t_info::clear_f_company_type() {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_->clear();
  }
  clear_has_f_company_type();
}
inline const ::std::string& pb_user_t_info::f_company_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_company_type)
  return *f_company_type_;
}
inline void pb_user_t_info::set_f_company_type(const ::std::string& value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_company_type)
}
inline void pb_user_t_info::set_f_company_type(const char* value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_company_type)
}
inline void pb_user_t_info::set_f_company_type(const char* value, size_t size) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_company_type)
}
inline ::std::string* pb_user_t_info::mutable_f_company_type() {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_company_type)
  return f_company_type_;
}
inline ::std::string* pb_user_t_info::release_f_company_type() {
  clear_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_type_;
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_company_type(::std::string* f_company_type) {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_type) {
    set_has_f_company_type();
    f_company_type_ = f_company_type;
  } else {
    clear_has_f_company_type();
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_company_type)
}

// optional string f_company = 7;
inline bool pb_user_t_info::has_f_company() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_user_t_info::set_has_f_company() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_user_t_info::clear_has_f_company() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_user_t_info::clear_f_company() {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_->clear();
  }
  clear_has_f_company();
}
inline const ::std::string& pb_user_t_info::f_company() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_company)
  return *f_company_;
}
inline void pb_user_t_info::set_f_company(const ::std::string& value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_company)
}
inline void pb_user_t_info::set_f_company(const char* value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_company)
}
inline void pb_user_t_info::set_f_company(const char* value, size_t size) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_company)
}
inline ::std::string* pb_user_t_info::mutable_f_company() {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_company)
  return f_company_;
}
inline ::std::string* pb_user_t_info::release_f_company() {
  clear_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_;
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_company(::std::string* f_company) {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_;
  }
  if (f_company) {
    set_has_f_company();
    f_company_ = f_company;
  } else {
    clear_has_f_company();
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_company)
}

// optional string f_years_of_working = 8;
inline bool pb_user_t_info::has_f_years_of_working() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_user_t_info::set_has_f_years_of_working() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_user_t_info::clear_has_f_years_of_working() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_user_t_info::clear_f_years_of_working() {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_->clear();
  }
  clear_has_f_years_of_working();
}
inline const ::std::string& pb_user_t_info::f_years_of_working() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_years_of_working)
  return *f_years_of_working_;
}
inline void pb_user_t_info::set_f_years_of_working(const ::std::string& value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_years_of_working)
}
inline void pb_user_t_info::set_f_years_of_working(const char* value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_years_of_working)
}
inline void pb_user_t_info::set_f_years_of_working(const char* value, size_t size) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_years_of_working)
}
inline ::std::string* pb_user_t_info::mutable_f_years_of_working() {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_years_of_working)
  return f_years_of_working_;
}
inline ::std::string* pb_user_t_info::release_f_years_of_working() {
  clear_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_years_of_working_;
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_years_of_working(::std::string* f_years_of_working) {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_years_of_working_;
  }
  if (f_years_of_working) {
    set_has_f_years_of_working();
    f_years_of_working_ = f_years_of_working;
  } else {
    clear_has_f_years_of_working();
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_years_of_working)
}

// optional string f_job_type = 9;
inline bool pb_user_t_info::has_f_job_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_user_t_info::set_has_f_job_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_user_t_info::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_user_t_info::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_user_t_info::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_job_type)
  return *f_job_type_;
}
inline void pb_user_t_info::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_job_type)
}
inline void pb_user_t_info::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_job_type)
}
inline void pb_user_t_info::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_job_type)
}
inline ::std::string* pb_user_t_info::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_user_t_info::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_job_type)
}

// optional string f_job_title = 10;
inline bool pb_user_t_info::has_f_job_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_user_t_info::set_has_f_job_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_user_t_info::clear_has_f_job_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_user_t_info::clear_f_job_title() {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_->clear();
  }
  clear_has_f_job_title();
}
inline const ::std::string& pb_user_t_info::f_job_title() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_job_title)
  return *f_job_title_;
}
inline void pb_user_t_info::set_f_job_title(const ::std::string& value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_job_title)
}
inline void pb_user_t_info::set_f_job_title(const char* value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_job_title)
}
inline void pb_user_t_info::set_f_job_title(const char* value, size_t size) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_job_title)
}
inline ::std::string* pb_user_t_info::mutable_f_job_title() {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_job_title)
  return f_job_title_;
}
inline ::std::string* pb_user_t_info::release_f_job_title() {
  clear_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_title_;
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_job_title(::std::string* f_job_title) {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_title_;
  }
  if (f_job_title) {
    set_has_f_job_title();
    f_job_title_ = f_job_title;
  } else {
    clear_has_f_job_title();
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_job_title)
}

// optional int32 f_influence = 11;
inline bool pb_user_t_info::has_f_influence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_user_t_info::set_has_f_influence() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_user_t_info::clear_has_f_influence() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_user_t_info::clear_f_influence() {
  f_influence_ = 0;
  clear_has_f_influence();
}
inline ::google::protobuf::int32 pb_user_t_info::f_influence() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_influence)
  return f_influence_;
}
inline void pb_user_t_info::set_f_influence(::google::protobuf::int32 value) {
  set_has_f_influence();
  f_influence_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_influence)
}

// optional int32 f_setting = 12;
inline bool pb_user_t_info::has_f_setting() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_user_t_info::set_has_f_setting() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_user_t_info::clear_has_f_setting() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_user_t_info::clear_f_setting() {
  f_setting_ = 0;
  clear_has_f_setting();
}
inline ::google::protobuf::int32 pb_user_t_info::f_setting() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_setting)
  return f_setting_;
}
inline void pb_user_t_info::set_f_setting(::google::protobuf::int32 value) {
  set_has_f_setting();
  f_setting_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_setting)
}

// optional string f_name_pinyin = 13;
inline bool pb_user_t_info::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_user_t_info::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_user_t_info::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_user_t_info::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_user_t_info::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_user_t_info::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_name_pinyin)
}
inline void pb_user_t_info::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_name_pinyin)
}
inline void pb_user_t_info::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_name_pinyin)
}
inline ::std::string* pb_user_t_info::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_user_t_info::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_name_pinyin)
}

// optional string f_name_pinyin_j = 14;
inline bool pb_user_t_info::has_f_name_pinyin_j() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_user_t_info::set_has_f_name_pinyin_j() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_user_t_info::clear_has_f_name_pinyin_j() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_user_t_info::clear_f_name_pinyin_j() {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_->clear();
  }
  clear_has_f_name_pinyin_j();
}
inline const ::std::string& pb_user_t_info::f_name_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_name_pinyin_j)
  return *f_name_pinyin_j_;
}
inline void pb_user_t_info::set_f_name_pinyin_j(const ::std::string& value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_name_pinyin_j)
}
inline void pb_user_t_info::set_f_name_pinyin_j(const char* value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_name_pinyin_j)
}
inline void pb_user_t_info::set_f_name_pinyin_j(const char* value, size_t size) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_name_pinyin_j)
}
inline ::std::string* pb_user_t_info::mutable_f_name_pinyin_j() {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_name_pinyin_j)
  return f_name_pinyin_j_;
}
inline ::std::string* pb_user_t_info::release_f_name_pinyin_j() {
  clear_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_j_;
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j) {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_name_pinyin_j) {
    set_has_f_name_pinyin_j();
    f_name_pinyin_j_ = f_name_pinyin_j;
  } else {
    clear_has_f_name_pinyin_j();
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_name_pinyin_j)
}

// -------------------------------------------------------------------

// pb_user_t_extra

// optional int32 f_auto_inc_id = 1;
inline bool pb_user_t_extra::has_f_auto_inc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_extra::set_has_f_auto_inc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_extra::clear_has_f_auto_inc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_extra::clear_f_auto_inc_id() {
  f_auto_inc_id_ = 0;
  clear_has_f_auto_inc_id();
}
inline ::google::protobuf::int32 pb_user_t_extra::f_auto_inc_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_extra.f_auto_inc_id)
  return f_auto_inc_id_;
}
inline void pb_user_t_extra::set_f_auto_inc_id(::google::protobuf::int32 value) {
  set_has_f_auto_inc_id();
  f_auto_inc_id_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_extra.f_auto_inc_id)
}

// optional int32 f_last_req_time = 2;
inline bool pb_user_t_extra::has_f_last_req_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_extra::set_has_f_last_req_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_extra::clear_has_f_last_req_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_extra::clear_f_last_req_time() {
  f_last_req_time_ = 0;
  clear_has_f_last_req_time();
}
inline ::google::protobuf::int32 pb_user_t_extra::f_last_req_time() const {
  // @@protoc_insertion_point(field_get:pb_user_t_extra.f_last_req_time)
  return f_last_req_time_;
}
inline void pb_user_t_extra::set_f_last_req_time(::google::protobuf::int32 value) {
  set_has_f_last_req_time();
  f_last_req_time_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_extra.f_last_req_time)
}

// -------------------------------------------------------------------

// pb_user_t_friend

// optional uint32 f_uin = 1;
inline bool pb_user_t_friend::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_friend::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_friend::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_friend::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_user_t_friend::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_uin)
  return f_uin_;
}
inline void pb_user_t_friend::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_uin)
}

// optional string f_name = 2;
inline bool pb_user_t_friend::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_friend::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_friend::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_friend::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_user_t_friend::f_name() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_name)
  return *f_name_;
}
inline void pb_user_t_friend::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_name)
}
inline void pb_user_t_friend::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_name)
}
inline void pb_user_t_friend::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_name)
}
inline ::std::string* pb_user_t_friend::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_name)
  return f_name_;
}
inline ::std::string* pb_user_t_friend::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_name)
}

// optional string f_remark = 3;
inline bool pb_user_t_friend::has_f_remark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_user_t_friend::set_has_f_remark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_user_t_friend::clear_has_f_remark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_user_t_friend::clear_f_remark() {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_->clear();
  }
  clear_has_f_remark();
}
inline const ::std::string& pb_user_t_friend::f_remark() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_remark)
  return *f_remark_;
}
inline void pb_user_t_friend::set_f_remark(const ::std::string& value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_remark)
}
inline void pb_user_t_friend::set_f_remark(const char* value) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_remark)
}
inline void pb_user_t_friend::set_f_remark(const char* value, size_t size) {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  f_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_remark)
}
inline ::std::string* pb_user_t_friend::mutable_f_remark() {
  set_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_remark)
  return f_remark_;
}
inline ::std::string* pb_user_t_friend::release_f_remark() {
  clear_has_f_remark();
  if (f_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_remark_;
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_remark(::std::string* f_remark) {
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_remark) {
    set_has_f_remark();
    f_remark_ = f_remark;
  } else {
    clear_has_f_remark();
    f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_remark)
}

// optional string f_phone = 4;
inline bool pb_user_t_friend::has_f_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_user_t_friend::set_has_f_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_user_t_friend::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_user_t_friend::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_user_t_friend::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_phone)
  return *f_phone_;
}
inline void pb_user_t_friend::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_phone)
}
inline void pb_user_t_friend::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_phone)
}
inline void pb_user_t_friend::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_phone)
}
inline ::std::string* pb_user_t_friend::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_phone)
  return f_phone_;
}
inline ::std::string* pb_user_t_friend::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_phone)
}

// optional string f_msg = 5;
inline bool pb_user_t_friend::has_f_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_user_t_friend::set_has_f_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_user_t_friend::clear_has_f_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_user_t_friend::clear_f_msg() {
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_->clear();
  }
  clear_has_f_msg();
}
inline const ::std::string& pb_user_t_friend::f_msg() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_msg)
  return *f_msg_;
}
inline void pb_user_t_friend::set_f_msg(const ::std::string& value) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_msg)
}
inline void pb_user_t_friend::set_f_msg(const char* value) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_msg)
}
inline void pb_user_t_friend::set_f_msg(const char* value, size_t size) {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  f_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_msg)
}
inline ::std::string* pb_user_t_friend::mutable_f_msg() {
  set_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_msg)
  return f_msg_;
}
inline ::std::string* pb_user_t_friend::release_f_msg() {
  clear_has_f_msg();
  if (f_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_;
    f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_msg(::std::string* f_msg) {
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_;
  }
  if (f_msg) {
    set_has_f_msg();
    f_msg_ = f_msg;
  } else {
    clear_has_f_msg();
    f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_msg)
}

// optional int32 f_flag = 6;
inline bool pb_user_t_friend::has_f_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_user_t_friend::set_has_f_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_user_t_friend::clear_has_f_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_user_t_friend::clear_f_flag() {
  f_flag_ = 0;
  clear_has_f_flag();
}
inline ::google::protobuf::int32 pb_user_t_friend::f_flag() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_flag)
  return f_flag_;
}
inline void pb_user_t_friend::set_f_flag(::google::protobuf::int32 value) {
  set_has_f_flag();
  f_flag_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_flag)
}

// optional string f_group_id = 7;
inline bool pb_user_t_friend::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_user_t_friend::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_user_t_friend::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_user_t_friend::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_user_t_friend::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_group_id)
  return *f_group_id_;
}
inline void pb_user_t_friend::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_group_id)
}
inline void pb_user_t_friend::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_group_id)
}
inline void pb_user_t_friend::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_group_id)
}
inline ::std::string* pb_user_t_friend::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_user_t_friend::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_group_id)
}

// optional string f_initial = 8;
inline bool pb_user_t_friend::has_f_initial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_user_t_friend::set_has_f_initial() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_user_t_friend::clear_has_f_initial() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_user_t_friend::clear_f_initial() {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_->clear();
  }
  clear_has_f_initial();
}
inline const ::std::string& pb_user_t_friend::f_initial() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_initial)
  return *f_initial_;
}
inline void pb_user_t_friend::set_f_initial(const ::std::string& value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_initial)
}
inline void pb_user_t_friend::set_f_initial(const char* value) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_initial)
}
inline void pb_user_t_friend::set_f_initial(const char* value, size_t size) {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  f_initial_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_initial)
}
inline ::std::string* pb_user_t_friend::mutable_f_initial() {
  set_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_initial_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_initial)
  return f_initial_;
}
inline ::std::string* pb_user_t_friend::release_f_initial() {
  clear_has_f_initial();
  if (f_initial_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_initial_;
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_initial(::std::string* f_initial) {
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_initial) {
    set_has_f_initial();
    f_initial_ = f_initial;
  } else {
    clear_has_f_initial();
    f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_initial)
}

// optional int32 f_weight = 9;
inline bool pb_user_t_friend::has_f_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_user_t_friend::set_has_f_weight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_user_t_friend::clear_has_f_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_user_t_friend::clear_f_weight() {
  f_weight_ = 0;
  clear_has_f_weight();
}
inline ::google::protobuf::int32 pb_user_t_friend::f_weight() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_weight)
  return f_weight_;
}
inline void pb_user_t_friend::set_f_weight(::google::protobuf::int32 value) {
  set_has_f_weight();
  f_weight_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_weight)
}

// optional string f_name_pinyin = 10;
inline bool pb_user_t_friend::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_user_t_friend::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_user_t_friend::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_user_t_friend::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_user_t_friend::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_user_t_friend::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_name_pinyin)
}
inline void pb_user_t_friend::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_name_pinyin)
}
inline void pb_user_t_friend::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_name_pinyin)
}
inline ::std::string* pb_user_t_friend::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_user_t_friend::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_name_pinyin)
}

// optional string f_name_pinyin_j = 11;
inline bool pb_user_t_friend::has_f_name_pinyin_j() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_user_t_friend::set_has_f_name_pinyin_j() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_user_t_friend::clear_has_f_name_pinyin_j() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_user_t_friend::clear_f_name_pinyin_j() {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_->clear();
  }
  clear_has_f_name_pinyin_j();
}
inline const ::std::string& pb_user_t_friend::f_name_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_name_pinyin_j)
  return *f_name_pinyin_j_;
}
inline void pb_user_t_friend::set_f_name_pinyin_j(const ::std::string& value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_name_pinyin_j)
}
inline void pb_user_t_friend::set_f_name_pinyin_j(const char* value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_name_pinyin_j)
}
inline void pb_user_t_friend::set_f_name_pinyin_j(const char* value, size_t size) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_name_pinyin_j)
}
inline ::std::string* pb_user_t_friend::mutable_f_name_pinyin_j() {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_name_pinyin_j)
  return f_name_pinyin_j_;
}
inline ::std::string* pb_user_t_friend::release_f_name_pinyin_j() {
  clear_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_j_;
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j) {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_name_pinyin_j) {
    set_has_f_name_pinyin_j();
    f_name_pinyin_j_ = f_name_pinyin_j;
  } else {
    clear_has_f_name_pinyin_j();
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_name_pinyin_j)
}

// optional string f_remark_pinyin = 12;
inline bool pb_user_t_friend::has_f_remark_pinyin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_user_t_friend::set_has_f_remark_pinyin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_user_t_friend::clear_has_f_remark_pinyin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_user_t_friend::clear_f_remark_pinyin() {
  if (f_remark_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_->clear();
  }
  clear_has_f_remark_pinyin();
}
inline const ::std::string& pb_user_t_friend::f_remark_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_remark_pinyin)
  return *f_remark_pinyin_;
}
inline void pb_user_t_friend::set_f_remark_pinyin(const ::std::string& value) {
  set_has_f_remark_pinyin();
  if (f_remark_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_ = new ::std::string;
  }
  f_remark_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_remark_pinyin)
}
inline void pb_user_t_friend::set_f_remark_pinyin(const char* value) {
  set_has_f_remark_pinyin();
  if (f_remark_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_ = new ::std::string;
  }
  f_remark_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_remark_pinyin)
}
inline void pb_user_t_friend::set_f_remark_pinyin(const char* value, size_t size) {
  set_has_f_remark_pinyin();
  if (f_remark_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_ = new ::std::string;
  }
  f_remark_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_remark_pinyin)
}
inline ::std::string* pb_user_t_friend::mutable_f_remark_pinyin() {
  set_has_f_remark_pinyin();
  if (f_remark_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_remark_pinyin)
  return f_remark_pinyin_;
}
inline ::std::string* pb_user_t_friend::release_f_remark_pinyin() {
  clear_has_f_remark_pinyin();
  if (f_remark_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_remark_pinyin_;
    f_remark_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_remark_pinyin(::std::string* f_remark_pinyin) {
  if (f_remark_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_pinyin_;
  }
  if (f_remark_pinyin) {
    set_has_f_remark_pinyin();
    f_remark_pinyin_ = f_remark_pinyin;
  } else {
    clear_has_f_remark_pinyin();
    f_remark_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_remark_pinyin)
}

// optional string f_remark_pinyin_j = 13;
inline bool pb_user_t_friend::has_f_remark_pinyin_j() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_user_t_friend::set_has_f_remark_pinyin_j() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_user_t_friend::clear_has_f_remark_pinyin_j() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_user_t_friend::clear_f_remark_pinyin_j() {
  if (f_remark_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_j_->clear();
  }
  clear_has_f_remark_pinyin_j();
}
inline const ::std::string& pb_user_t_friend::f_remark_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_user_t_friend.f_remark_pinyin_j)
  return *f_remark_pinyin_j_;
}
inline void pb_user_t_friend::set_f_remark_pinyin_j(const ::std::string& value) {
  set_has_f_remark_pinyin_j();
  if (f_remark_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_j_ = new ::std::string;
  }
  f_remark_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_friend.f_remark_pinyin_j)
}
inline void pb_user_t_friend::set_f_remark_pinyin_j(const char* value) {
  set_has_f_remark_pinyin_j();
  if (f_remark_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_j_ = new ::std::string;
  }
  f_remark_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_friend.f_remark_pinyin_j)
}
inline void pb_user_t_friend::set_f_remark_pinyin_j(const char* value, size_t size) {
  set_has_f_remark_pinyin_j();
  if (f_remark_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_j_ = new ::std::string;
  }
  f_remark_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_friend.f_remark_pinyin_j)
}
inline ::std::string* pb_user_t_friend::mutable_f_remark_pinyin_j() {
  set_has_f_remark_pinyin_j();
  if (f_remark_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_remark_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_friend.f_remark_pinyin_j)
  return f_remark_pinyin_j_;
}
inline ::std::string* pb_user_t_friend::release_f_remark_pinyin_j() {
  clear_has_f_remark_pinyin_j();
  if (f_remark_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_remark_pinyin_j_;
    f_remark_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_friend::set_allocated_f_remark_pinyin_j(::std::string* f_remark_pinyin_j) {
  if (f_remark_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_pinyin_j_;
  }
  if (f_remark_pinyin_j) {
    set_has_f_remark_pinyin_j();
    f_remark_pinyin_j_ = f_remark_pinyin_j;
  } else {
    clear_has_f_remark_pinyin_j();
    f_remark_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_friend.f_remark_pinyin_j)
}

// -------------------------------------------------------------------

// pb_user_t_recommend_friend

// optional uint32 f_uin = 1;
inline bool pb_user_t_recommend_friend::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_recommend_friend::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_recommend_friend::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_user_t_recommend_friend::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_uin)
  return f_uin_;
}
inline void pb_user_t_recommend_friend::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_uin)
}

// optional string f_name = 2;
inline bool pb_user_t_recommend_friend::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_recommend_friend::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_recommend_friend::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_user_t_recommend_friend::f_name() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_name)
  return *f_name_;
}
inline void pb_user_t_recommend_friend::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_name)
}
inline void pb_user_t_recommend_friend::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_name)
}
inline void pb_user_t_recommend_friend::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_name)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_name)
  return f_name_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_name)
}

// optional uint32 f_type = 3;
inline bool pb_user_t_recommend_friend::has_f_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_user_t_recommend_friend::clear_has_f_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_user_t_recommend_friend::clear_f_type() {
  f_type_ = 0u;
  clear_has_f_type();
}
inline ::google::protobuf::uint32 pb_user_t_recommend_friend::f_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_type)
  return f_type_;
}
inline void pb_user_t_recommend_friend::set_f_type(::google::protobuf::uint32 value) {
  set_has_f_type();
  f_type_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_type)
}

// optional int32 f_weight = 4;
inline bool pb_user_t_recommend_friend::has_f_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_user_t_recommend_friend::clear_has_f_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_user_t_recommend_friend::clear_f_weight() {
  f_weight_ = 0;
  clear_has_f_weight();
}
inline ::google::protobuf::int32 pb_user_t_recommend_friend::f_weight() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_weight)
  return f_weight_;
}
inline void pb_user_t_recommend_friend::set_f_weight(::google::protobuf::int32 value) {
  set_has_f_weight();
  f_weight_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_weight)
}

// optional string f_name_pinyin = 5;
inline bool pb_user_t_recommend_friend::has_f_name_pinyin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_name_pinyin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_user_t_recommend_friend::clear_has_f_name_pinyin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_user_t_recommend_friend::clear_f_name_pinyin() {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_->clear();
  }
  clear_has_f_name_pinyin();
}
inline const ::std::string& pb_user_t_recommend_friend::f_name_pinyin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_name_pinyin)
  return *f_name_pinyin_;
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin(const ::std::string& value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_name_pinyin)
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin(const char* value) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_name_pinyin)
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin(const char* value, size_t size) {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  f_name_pinyin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_name_pinyin)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_name_pinyin() {
  set_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_name_pinyin)
  return f_name_pinyin_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_name_pinyin() {
  clear_has_f_name_pinyin();
  if (f_name_pinyin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_;
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_name_pinyin(::std::string* f_name_pinyin) {
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin) {
    set_has_f_name_pinyin();
    f_name_pinyin_ = f_name_pinyin;
  } else {
    clear_has_f_name_pinyin();
    f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_name_pinyin)
}

// optional string f_name_pinyin_j = 6;
inline bool pb_user_t_recommend_friend::has_f_name_pinyin_j() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_name_pinyin_j() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_user_t_recommend_friend::clear_has_f_name_pinyin_j() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_user_t_recommend_friend::clear_f_name_pinyin_j() {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_->clear();
  }
  clear_has_f_name_pinyin_j();
}
inline const ::std::string& pb_user_t_recommend_friend::f_name_pinyin_j() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_name_pinyin_j)
  return *f_name_pinyin_j_;
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin_j(const ::std::string& value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_name_pinyin_j)
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin_j(const char* value) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_name_pinyin_j)
}
inline void pb_user_t_recommend_friend::set_f_name_pinyin_j(const char* value, size_t size) {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  f_name_pinyin_j_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_name_pinyin_j)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_name_pinyin_j() {
  set_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_pinyin_j_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_name_pinyin_j)
  return f_name_pinyin_j_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_name_pinyin_j() {
  clear_has_f_name_pinyin_j();
  if (f_name_pinyin_j_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_pinyin_j_;
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_name_pinyin_j(::std::string* f_name_pinyin_j) {
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_name_pinyin_j) {
    set_has_f_name_pinyin_j();
    f_name_pinyin_j_ = f_name_pinyin_j;
  } else {
    clear_has_f_name_pinyin_j();
    f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_name_pinyin_j)
}

// optional string f_company_type = 7;
inline bool pb_user_t_recommend_friend::has_f_company_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_company_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_user_t_recommend_friend::clear_has_f_company_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_user_t_recommend_friend::clear_f_company_type() {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_->clear();
  }
  clear_has_f_company_type();
}
inline const ::std::string& pb_user_t_recommend_friend::f_company_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_company_type)
  return *f_company_type_;
}
inline void pb_user_t_recommend_friend::set_f_company_type(const ::std::string& value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_company_type)
}
inline void pb_user_t_recommend_friend::set_f_company_type(const char* value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_company_type)
}
inline void pb_user_t_recommend_friend::set_f_company_type(const char* value, size_t size) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_company_type)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_company_type() {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_company_type)
  return f_company_type_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_company_type() {
  clear_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_type_;
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_company_type(::std::string* f_company_type) {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_type) {
    set_has_f_company_type();
    f_company_type_ = f_company_type;
  } else {
    clear_has_f_company_type();
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_company_type)
}

// optional string f_company = 8;
inline bool pb_user_t_recommend_friend::has_f_company() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_company() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_user_t_recommend_friend::clear_has_f_company() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_user_t_recommend_friend::clear_f_company() {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_->clear();
  }
  clear_has_f_company();
}
inline const ::std::string& pb_user_t_recommend_friend::f_company() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_company)
  return *f_company_;
}
inline void pb_user_t_recommend_friend::set_f_company(const ::std::string& value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_company)
}
inline void pb_user_t_recommend_friend::set_f_company(const char* value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_company)
}
inline void pb_user_t_recommend_friend::set_f_company(const char* value, size_t size) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_company)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_company() {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_company)
  return f_company_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_company() {
  clear_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_;
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_company(::std::string* f_company) {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_;
  }
  if (f_company) {
    set_has_f_company();
    f_company_ = f_company;
  } else {
    clear_has_f_company();
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_company)
}

// optional string f_other_info = 9;
inline bool pb_user_t_recommend_friend::has_f_other_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_user_t_recommend_friend::set_has_f_other_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_user_t_recommend_friend::clear_has_f_other_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_user_t_recommend_friend::clear_f_other_info() {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_->clear();
  }
  clear_has_f_other_info();
}
inline const ::std::string& pb_user_t_recommend_friend::f_other_info() const {
  // @@protoc_insertion_point(field_get:pb_user_t_recommend_friend.f_other_info)
  return *f_other_info_;
}
inline void pb_user_t_recommend_friend::set_f_other_info(const ::std::string& value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_recommend_friend.f_other_info)
}
inline void pb_user_t_recommend_friend::set_f_other_info(const char* value) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_recommend_friend.f_other_info)
}
inline void pb_user_t_recommend_friend::set_f_other_info(const char* value, size_t size) {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  f_other_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_recommend_friend.f_other_info)
}
inline ::std::string* pb_user_t_recommend_friend::mutable_f_other_info() {
  set_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_other_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_recommend_friend.f_other_info)
  return f_other_info_;
}
inline ::std::string* pb_user_t_recommend_friend::release_f_other_info() {
  clear_has_f_other_info();
  if (f_other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_other_info_;
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_recommend_friend::set_allocated_f_other_info(::std::string* f_other_info) {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (f_other_info) {
    set_has_f_other_info();
    f_other_info_ = f_other_info;
  } else {
    clear_has_f_other_info();
    f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_recommend_friend.f_other_info)
}

// -------------------------------------------------------------------

// pb_user_t_phone_address

// optional string f_name = 1;
inline bool pb_user_t_phone_address::has_f_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_phone_address::set_has_f_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_phone_address::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_phone_address::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_user_t_phone_address::f_name() const {
  // @@protoc_insertion_point(field_get:pb_user_t_phone_address.f_name)
  return *f_name_;
}
inline void pb_user_t_phone_address::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_phone_address.f_name)
}
inline void pb_user_t_phone_address::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_phone_address.f_name)
}
inline void pb_user_t_phone_address::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_phone_address.f_name)
}
inline ::std::string* pb_user_t_phone_address::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_phone_address.f_name)
  return f_name_;
}
inline ::std::string* pb_user_t_phone_address::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_phone_address::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_phone_address.f_name)
}

// optional string f_phone = 2;
inline bool pb_user_t_phone_address::has_f_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_phone_address::set_has_f_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_phone_address::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_phone_address::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_user_t_phone_address::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_user_t_phone_address.f_phone)
  return *f_phone_;
}
inline void pb_user_t_phone_address::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_phone_address.f_phone)
}
inline void pb_user_t_phone_address::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_phone_address.f_phone)
}
inline void pb_user_t_phone_address::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_phone_address.f_phone)
}
inline ::std::string* pb_user_t_phone_address::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_phone_address.f_phone)
  return f_phone_;
}
inline ::std::string* pb_user_t_phone_address::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_phone_address::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_phone_address.f_phone)
}

// -------------------------------------------------------------------

// pb_user_t_im_group

// optional string f_group_id = 1;
inline bool pb_user_t_im_group::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_im_group::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_im_group::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_im_group::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_user_t_im_group::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_im_group.f_group_id)
  return *f_group_id_;
}
inline void pb_user_t_im_group::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_im_group.f_group_id)
}
inline void pb_user_t_im_group::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_im_group.f_group_id)
}
inline void pb_user_t_im_group::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_im_group.f_group_id)
}
inline ::std::string* pb_user_t_im_group::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_im_group.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_user_t_im_group::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_im_group::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_im_group.f_group_id)
}

// optional int32 f_group_flag = 2;
inline bool pb_user_t_im_group::has_f_group_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_im_group::set_has_f_group_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_im_group::clear_has_f_group_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_im_group::clear_f_group_flag() {
  f_group_flag_ = 0;
  clear_has_f_group_flag();
}
inline ::google::protobuf::int32 pb_user_t_im_group::f_group_flag() const {
  // @@protoc_insertion_point(field_get:pb_user_t_im_group.f_group_flag)
  return f_group_flag_;
}
inline void pb_user_t_im_group::set_f_group_flag(::google::protobuf::int32 value) {
  set_has_f_group_flag();
  f_group_flag_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_im_group.f_group_flag)
}

// -------------------------------------------------------------------

// pb_user_t_prj

// optional string f_prj_id = 1;
inline bool pb_user_t_prj::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_prj::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_prj::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_prj::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_user_t_prj::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_prj.f_prj_id)
  return *f_prj_id_;
}
inline void pb_user_t_prj::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_prj.f_prj_id)
}
inline void pb_user_t_prj::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_prj.f_prj_id)
}
inline void pb_user_t_prj::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_prj.f_prj_id)
}
inline ::std::string* pb_user_t_prj::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_prj.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_user_t_prj::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_prj::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_prj.f_prj_id)
}

// optional string f_group_id = 2;
inline bool pb_user_t_prj::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_prj::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_prj::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_prj::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_user_t_prj::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_prj.f_group_id)
  return *f_group_id_;
}
inline void pb_user_t_prj::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_prj.f_group_id)
}
inline void pb_user_t_prj::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_prj.f_group_id)
}
inline void pb_user_t_prj::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_prj.f_group_id)
}
inline ::std::string* pb_user_t_prj::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_prj.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_user_t_prj::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_prj::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_prj.f_group_id)
}

// -------------------------------------------------------------------

// pb_user_t_data

// optional .pb_user_t_info f_info = 1;
inline bool pb_user_t_data::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_data::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_data::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_data::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_user_t_info& pb_user_t_data::f_info() const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_user_t_info* pb_user_t_data::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_info)
  return f_info_;
}
inline ::pb_user_t_info* pb_user_t_data::release_f_info() {
  clear_has_f_info();
  ::pb_user_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_user_t_data::set_allocated_f_info(::pb_user_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_data.f_info)
}

// optional .pb_user_t_extra f_extra = 2;
inline bool pb_user_t_data::has_f_extra() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_data::set_has_f_extra() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_data::clear_has_f_extra() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_data::clear_f_extra() {
  if (f_extra_ != NULL) f_extra_->::pb_user_t_extra::Clear();
  clear_has_f_extra();
}
inline const ::pb_user_t_extra& pb_user_t_data::f_extra() const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_extra)
  return f_extra_ != NULL ? *f_extra_ : *default_instance_->f_extra_;
}
inline ::pb_user_t_extra* pb_user_t_data::mutable_f_extra() {
  set_has_f_extra();
  if (f_extra_ == NULL) f_extra_ = new ::pb_user_t_extra;
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_extra)
  return f_extra_;
}
inline ::pb_user_t_extra* pb_user_t_data::release_f_extra() {
  clear_has_f_extra();
  ::pb_user_t_extra* temp = f_extra_;
  f_extra_ = NULL;
  return temp;
}
inline void pb_user_t_data::set_allocated_f_extra(::pb_user_t_extra* f_extra) {
  delete f_extra_;
  f_extra_ = f_extra;
  if (f_extra) {
    set_has_f_extra();
  } else {
    clear_has_f_extra();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_data.f_extra)
}

// repeated .pb_user_t_friend f_friend_list = 3;
inline int pb_user_t_data::f_friend_list_size() const {
  return f_friend_list_.size();
}
inline void pb_user_t_data::clear_f_friend_list() {
  f_friend_list_.Clear();
}
inline const ::pb_user_t_friend& pb_user_t_data::f_friend_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_friend_list)
  return f_friend_list_.Get(index);
}
inline ::pb_user_t_friend* pb_user_t_data::mutable_f_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_friend_list)
  return f_friend_list_.Mutable(index);
}
inline ::pb_user_t_friend* pb_user_t_data::add_f_friend_list() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_friend_list)
  return f_friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
pb_user_t_data::f_friend_list() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_friend_list)
  return f_friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
pb_user_t_data::mutable_f_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_friend_list)
  return &f_friend_list_;
}

// repeated .pb_user_t_friend f_friend_validation_list = 4;
inline int pb_user_t_data::f_friend_validation_list_size() const {
  return f_friend_validation_list_.size();
}
inline void pb_user_t_data::clear_f_friend_validation_list() {
  f_friend_validation_list_.Clear();
}
inline const ::pb_user_t_friend& pb_user_t_data::f_friend_validation_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_friend_validation_list)
  return f_friend_validation_list_.Get(index);
}
inline ::pb_user_t_friend* pb_user_t_data::mutable_f_friend_validation_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_friend_validation_list)
  return f_friend_validation_list_.Mutable(index);
}
inline ::pb_user_t_friend* pb_user_t_data::add_f_friend_validation_list() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_friend_validation_list)
  return f_friend_validation_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
pb_user_t_data::f_friend_validation_list() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_friend_validation_list)
  return f_friend_validation_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
pb_user_t_data::mutable_f_friend_validation_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_friend_validation_list)
  return &f_friend_validation_list_;
}

// repeated .pb_user_t_friend f_friend_recommend_list = 5;
inline int pb_user_t_data::f_friend_recommend_list_size() const {
  return f_friend_recommend_list_.size();
}
inline void pb_user_t_data::clear_f_friend_recommend_list() {
  f_friend_recommend_list_.Clear();
}
inline const ::pb_user_t_friend& pb_user_t_data::f_friend_recommend_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_friend_recommend_list)
  return f_friend_recommend_list_.Get(index);
}
inline ::pb_user_t_friend* pb_user_t_data::mutable_f_friend_recommend_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_friend_recommend_list)
  return f_friend_recommend_list_.Mutable(index);
}
inline ::pb_user_t_friend* pb_user_t_data::add_f_friend_recommend_list() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_friend_recommend_list)
  return f_friend_recommend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >&
pb_user_t_data::f_friend_recommend_list() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_friend_recommend_list)
  return f_friend_recommend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_friend >*
pb_user_t_data::mutable_f_friend_recommend_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_friend_recommend_list)
  return &f_friend_recommend_list_;
}

// repeated .pb_user_t_im_group f_im_group = 6;
inline int pb_user_t_data::f_im_group_size() const {
  return f_im_group_.size();
}
inline void pb_user_t_data::clear_f_im_group() {
  f_im_group_.Clear();
}
inline const ::pb_user_t_im_group& pb_user_t_data::f_im_group(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_im_group)
  return f_im_group_.Get(index);
}
inline ::pb_user_t_im_group* pb_user_t_data::mutable_f_im_group(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_im_group)
  return f_im_group_.Mutable(index);
}
inline ::pb_user_t_im_group* pb_user_t_data::add_f_im_group() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_im_group)
  return f_im_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_im_group >&
pb_user_t_data::f_im_group() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_im_group)
  return f_im_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_im_group >*
pb_user_t_data::mutable_f_im_group() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_im_group)
  return &f_im_group_;
}

// optional .pb_user_t_info f_other_info = 7;
inline bool pb_user_t_data::has_f_other_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_user_t_data::set_has_f_other_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_user_t_data::clear_has_f_other_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_user_t_data::clear_f_other_info() {
  if (f_other_info_ != NULL) f_other_info_->::pb_user_t_info::Clear();
  clear_has_f_other_info();
}
inline const ::pb_user_t_info& pb_user_t_data::f_other_info() const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_other_info)
  return f_other_info_ != NULL ? *f_other_info_ : *default_instance_->f_other_info_;
}
inline ::pb_user_t_info* pb_user_t_data::mutable_f_other_info() {
  set_has_f_other_info();
  if (f_other_info_ == NULL) f_other_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_other_info)
  return f_other_info_;
}
inline ::pb_user_t_info* pb_user_t_data::release_f_other_info() {
  clear_has_f_other_info();
  ::pb_user_t_info* temp = f_other_info_;
  f_other_info_ = NULL;
  return temp;
}
inline void pb_user_t_data::set_allocated_f_other_info(::pb_user_t_info* f_other_info) {
  delete f_other_info_;
  f_other_info_ = f_other_info;
  if (f_other_info) {
    set_has_f_other_info();
  } else {
    clear_has_f_other_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_data.f_other_info)
}

// repeated .pb_user_t_prj f_prj_list = 8;
inline int pb_user_t_data::f_prj_list_size() const {
  return f_prj_list_.size();
}
inline void pb_user_t_data::clear_f_prj_list() {
  f_prj_list_.Clear();
}
inline const ::pb_user_t_prj& pb_user_t_data::f_prj_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_prj_list)
  return f_prj_list_.Get(index);
}
inline ::pb_user_t_prj* pb_user_t_data::mutable_f_prj_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_prj_list)
  return f_prj_list_.Mutable(index);
}
inline ::pb_user_t_prj* pb_user_t_data::add_f_prj_list() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_prj_list)
  return f_prj_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_prj >&
pb_user_t_data::f_prj_list() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_prj_list)
  return f_prj_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_prj >*
pb_user_t_data::mutable_f_prj_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_prj_list)
  return &f_prj_list_;
}

// repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
inline int pb_user_t_data::f_recommend_friends_size() const {
  return f_recommend_friends_.size();
}
inline void pb_user_t_data::clear_f_recommend_friends() {
  f_recommend_friends_.Clear();
}
inline const ::pb_user_t_recommend_friend& pb_user_t_data::f_recommend_friends(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_recommend_friends)
  return f_recommend_friends_.Get(index);
}
inline ::pb_user_t_recommend_friend* pb_user_t_data::mutable_f_recommend_friends(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_recommend_friends)
  return f_recommend_friends_.Mutable(index);
}
inline ::pb_user_t_recommend_friend* pb_user_t_data::add_f_recommend_friends() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_recommend_friends)
  return f_recommend_friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >&
pb_user_t_data::f_recommend_friends() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_recommend_friends)
  return f_recommend_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_user_t_recommend_friend >*
pb_user_t_data::mutable_f_recommend_friends() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_recommend_friends)
  return &f_recommend_friends_;
}

// repeated .pb_prj_t_recommend_info f_prjs = 10;
inline int pb_user_t_data::f_prjs_size() const {
  return f_prjs_.size();
}
inline void pb_user_t_data::clear_f_prjs() {
  f_prjs_.Clear();
}
inline const ::pb_prj_t_recommend_info& pb_user_t_data::f_prjs(int index) const {
  // @@protoc_insertion_point(field_get:pb_user_t_data.f_prjs)
  return f_prjs_.Get(index);
}
inline ::pb_prj_t_recommend_info* pb_user_t_data::mutable_f_prjs(int index) {
  // @@protoc_insertion_point(field_mutable:pb_user_t_data.f_prjs)
  return f_prjs_.Mutable(index);
}
inline ::pb_prj_t_recommend_info* pb_user_t_data::add_f_prjs() {
  // @@protoc_insertion_point(field_add:pb_user_t_data.f_prjs)
  return f_prjs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >&
pb_user_t_data::f_prjs() const {
  // @@protoc_insertion_point(field_list:pb_user_t_data.f_prjs)
  return f_prjs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_prj_t_recommend_info >*
pb_user_t_data::mutable_f_prjs() {
  // @@protoc_insertion_point(field_mutable_list:pb_user_t_data.f_prjs)
  return &f_prjs_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fgsk_2eproto__INCLUDED
