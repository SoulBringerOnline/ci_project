// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk_req.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_gsk_req.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pb_req_t_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_base_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_base_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_msg_book_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_msg_book_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_msg_hotspot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_msg_hotspot_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_project_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_project_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_task_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_task_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_user_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_user_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_milestore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_milestore_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_department_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_department_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_req_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto() {
  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_gsk_req.proto");
  GOOGLE_CHECK(file != NULL);
  pb_req_t_attach_descriptor_ = file->message_type(0);
  static const int pb_req_t_attach_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_uploadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_id_),
  };
  pb_req_t_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_attach_descriptor_,
      pb_req_t_attach::default_instance_,
      pb_req_t_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_attach));
  pb_req_t_base_file_descriptor_ = file->message_type(1);
  static const int pb_req_t_base_file_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_cre_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_cre_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, f_fpid_),
  };
  pb_req_t_base_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_base_file_descriptor_,
      pb_req_t_base_file::default_instance_,
      pb_req_t_base_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_base_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_base_file));
  pb_req_t_msg_book_descriptor_ = file->message_type(2);
  static const int pb_req_t_msg_book_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_cata_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_cata_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_subcata_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_subcata_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, f_book_info_),
  };
  pb_req_t_msg_book_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_msg_book_descriptor_,
      pb_req_t_msg_book::default_instance_,
      pb_req_t_msg_book_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_book, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_msg_book));
  pb_req_t_msg_hotspot_descriptor_ = file->message_type(3);
  static const int pb_req_t_msg_hotspot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, f_hotspot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, f_hotspot_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, f_hotspot_first_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, f_hotspot_source_site_),
  };
  pb_req_t_msg_hotspot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_msg_hotspot_descriptor_,
      pb_req_t_msg_hotspot::default_instance_,
      pb_req_t_msg_hotspot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_msg_hotspot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_msg_hotspot));
  pb_req_t_user_descriptor_ = file->message_type(4);
  static const int pb_req_t_user_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_join_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_dep_id_),
  };
  pb_req_t_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_user_descriptor_,
      pb_req_t_user::default_instance_,
      pb_req_t_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_user));
  pb_req_t_project_descriptor_ = file->message_type(5);
  static const int pb_req_t_project_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_floor_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_jianzhu_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_shigong_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_jianli_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_fenbao_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_float_floor_area_),
  };
  pb_req_t_project_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_project_descriptor_,
      pb_req_t_project::default_instance_,
      pb_req_t_project_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_project));
  pb_req_t_task_report_descriptor_ = file->message_type(6);
  static const int pb_req_t_task_report_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_reply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_report_time_),
  };
  pb_req_t_task_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_task_report_descriptor_,
      pb_req_t_task_report::default_instance_,
      pb_req_t_task_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_task_report));
  pb_req_t_task_descriptor_ = file->message_type(7);
  static const int pb_req_t_task_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_desc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_report_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_end_),
  };
  pb_req_t_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_task_descriptor_,
      pb_req_t_task::default_instance_,
      pb_req_t_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_task));
  pb_req_t_report_descriptor_ = file->message_type(8);
  static const int pb_req_t_report_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_phone_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_network_),
  };
  pb_req_t_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_report_descriptor_,
      pb_req_t_report::default_instance_,
      pb_req_t_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_report));
  pb_req_t_user_data_req_descriptor_ = file->message_type(9);
  static const int pb_req_t_user_data_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, f_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, f_s_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, f_pageno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, f_page_size_),
  };
  pb_req_t_user_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_user_data_req_descriptor_,
      pb_req_t_user_data_req::default_instance_,
      pb_req_t_user_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_user_data_req));
  pb_req_t_milestore_descriptor_ = file->message_type(10);
  static const int pb_req_t_milestore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_milestore, f_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_milestore, f_event_),
  };
  pb_req_t_milestore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_milestore_descriptor_,
      pb_req_t_milestore::default_instance_,
      pb_req_t_milestore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_milestore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_milestore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_milestore));
  pb_req_t_department_descriptor_ = file->message_type(11);
  static const int pb_req_t_department_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_department, f_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_department, f_name_),
  };
  pb_req_t_department_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_department_descriptor_,
      pb_req_t_department::default_instance_,
      pb_req_t_department_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_department, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_department, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_department));
  pb_req_t_req_descriptor_ = file->message_type(12);
  static const int pb_req_t_req_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_i_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_s_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_attch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_prj_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_user_data_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_msg_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_msg_hotspot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_milestore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_turn_department_),
  };
  pb_req_t_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_req_descriptor_,
      pb_req_t_req::default_instance_,
      pb_req_t_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_req));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fgsk_5freq_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_attach_descriptor_, &pb_req_t_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_base_file_descriptor_, &pb_req_t_base_file::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_msg_book_descriptor_, &pb_req_t_msg_book::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_msg_hotspot_descriptor_, &pb_req_t_msg_hotspot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_user_descriptor_, &pb_req_t_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_project_descriptor_, &pb_req_t_project::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_task_report_descriptor_, &pb_req_t_task_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_task_descriptor_, &pb_req_t_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_report_descriptor_, &pb_req_t_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_user_data_req_descriptor_, &pb_req_t_user_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_milestore_descriptor_, &pb_req_t_milestore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_department_descriptor_, &pb_req_t_department::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_req_descriptor_, &pb_req_t_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto() {
  delete pb_req_t_attach::default_instance_;
  delete pb_req_t_attach_reflection_;
  delete pb_req_t_base_file::default_instance_;
  delete pb_req_t_base_file_reflection_;
  delete pb_req_t_msg_book::default_instance_;
  delete pb_req_t_msg_book_reflection_;
  delete pb_req_t_msg_hotspot::default_instance_;
  delete pb_req_t_msg_hotspot_reflection_;
  delete pb_req_t_user::default_instance_;
  delete pb_req_t_user_reflection_;
  delete pb_req_t_project::default_instance_;
  delete pb_req_t_project_reflection_;
  delete pb_req_t_task_report::default_instance_;
  delete pb_req_t_task_report_reflection_;
  delete pb_req_t_task::default_instance_;
  delete pb_req_t_task_reflection_;
  delete pb_req_t_report::default_instance_;
  delete pb_req_t_report_reflection_;
  delete pb_req_t_user_data_req::default_instance_;
  delete pb_req_t_user_data_req_reflection_;
  delete pb_req_t_milestore::default_instance_;
  delete pb_req_t_milestore_reflection_;
  delete pb_req_t_department::default_instance_;
  delete pb_req_t_department_reflection_;
  delete pb_req_t_req::default_instance_;
  delete pb_req_t_req_reflection_;
}

void protobuf_AddDesc_pb_5fgsk_5freq_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020pb_gsk_req.proto\"\271\001\n\017pb_req_t_attach\022\025"
    "\n\rf_attach_name\030\001 \001(\t\022\025\n\rf_attach_type\030\002"
    " \001(\005\022\024\n\014f_attach_url\030\003 \001(\t\022\025\n\rf_attach_s"
    "ize\030\004 \001(\005\022\031\n\021f_attach_playtime\030\005 \001(\005\022\033\n\023"
    "f_attach_uploadtime\030\006 \001(\005\022\023\n\013f_attach_id"
    "\030\007 \001(\t\"\243\001\n\022pb_req_t_base_file\022$\n\nf_basei"
    "nfo\030\001 \001(\0132\020.pb_req_t_attach\022\021\n\tf_cre_uin"
    "\030\002 \001(\005\022\022\n\nf_cre_name\030\003 \001(\t\022\022\n\nf_job_type"
    "\030\004 \001(\t\022\r\n\005f_tag\030\005 \001(\t\022\r\n\005f_fid\030\006 \001(\t\022\016\n\006"
    "f_fpid\030\007 \001(\t\"\347\001\n\021pb_req_t_msg_book\022\023\n\013f_"
    "book_type\030\001 \001(\005\022\021\n\tf_book_id\030\002 \001(\t\022\023\n\013f_"
    "book_name\030\003 \001(\t\022\026\n\016f_book_cata_id\030\004 \001(\t\022"
    "\030\n\020f_book_cata_info\030\005 \001(\t\022\031\n\021f_book_subc"
    "ata_id\030\006 \001(\t\022\033\n\023f_book_subcata_info\030\007 \001("
    "\t\022\026\n\016f_book_info_id\030\010 \001(\t\022\023\n\013f_book_info"
    "\030\t \001(\t\"\203\001\n\024pb_req_t_msg_hotspot\022\024\n\014f_hot"
    "spot_id\030\001 \001(\t\022\027\n\017f_hotspot_title\030\002 \001(\t\022\035"
    "\n\025f_hotspot_first_image\030\003 \001(\t\022\035\n\025f_hotsp"
    "ot_source_site\030\004 \001(\t\"}\n\rpb_req_t_user\022\r\n"
    "\005f_uin\030\001 \001(\r\022\016\n\006f_name\030\002 \001(\t\022\017\n\007f_phone\030"
    "\003 \001(\t\022\022\n\nf_job_type\030\004 \001(\t\022\026\n\016f_join_cont"
    "ent\030\005 \001(\t\022\020\n\010f_dep_id\030\006 \001(\t\"\350\002\n\020pb_req_t"
    "_project\022\022\n\nf_prj_name\030\001 \001(\t\022\022\n\nf_prj_ty"
    "pe\030\002 \001(\005\022\023\n\013f_prj_image\030\003 \001(\t\022\022\n\nf_provi"
    "nce\030\004 \001(\t\022\016\n\006f_city\030\005 \001(\t\022\025\n\rf_prj_addre"
    "ss\030\006 \001(\t\022\024\n\014f_floor_area\030\007 \001(\005\022\023\n\013f_prj_"
    "begin\030\010 \001(\005\022\021\n\tf_prj_end\030\t \001(\005\022\030\n\020f_jian"
    "zhu_danwei\030\n \001(\t\022\030\n\020f_shigong_danwei\030\013 \001"
    "(\t\022\027\n\017f_jianli_danwei\030\014 \001(\t\022\027\n\017f_fenbao_"
    "danwei\030\r \001(\t\022\r\n\005f_lat\030\016 \001(\001\022\r\n\005f_lon\030\017 \001"
    "(\001\022\032\n\022f_float_floor_area\030\020 \001(\002\"\205\002\n\024pb_re"
    "q_t_task_report\022\023\n\013f_report_id\030\001 \001(\t\022!\n\t"
    "f_sponsor\030\002 \001(\0132\016.pb_req_t_user\022\"\n\nf_rep"
    "ly_to\030\003 \001(\0132\016.pb_req_t_user\022\017\n\007f_title\030\004"
    " \001(\t\022\021\n\tf_content\030\005 \001(\t\022\026\n\016f_content_typ"
    "e\030\006 \001(\005\022\022\n\nf_playtime\030\007 \001(\005\022*\n\rf_attach_"
    "list\030\010 \003(\0132\023.pb_req_t_base_file\022\025\n\rf_rep"
    "ort_time\030\t \001(\005\"\201\003\n\rpb_req_t_task\022\021\n\tf_ta"
    "sk_id\030\001 \001(\t\022\023\n\013f_task_type\030\002 \001(\005\022\020\n\010f_pr"
    "j_id\030\003 \001(\t\022\023\n\013f_task_desc\030\004 \001(\t\022\030\n\020f_tas"
    "k_desc_type\030\005 \001(\005\022\022\n\nf_playtime\030\006 \001(\005\022!\n"
    "\tf_sponsor\030\007 \001(\0132\016.pb_req_t_user\022!\n\tf_me"
    "mbers\030\010 \003(\0132\016.pb_req_t_user\022\022\n\nf_positio"
    "n\030\t \001(\t\022\025\n\rf_task_status\030\n \001(\005\022*\n\rf_atta"
    "ch_list\030\013 \003(\0132\023.pb_req_t_base_file\022,\n\rf_"
    "report_list\030\014 \003(\0132\025.pb_req_t_task_report"
    "\022\024\n\014f_task_begin\030\r \001(\005\022\022\n\nf_task_end\030\016 \001"
    "(\005\"V\n\017pb_req_t_report\022\024\n\014f_phone_info\030\001 "
    "\001(\t\022\014\n\004f_os\030\002 \001(\t\022\014\n\004f_sp\030\003 \001(\t\022\021\n\tf_net"
    "work\030\004 \001(\t\"a\n\026pb_req_t_user_data_req\022\016\n\006"
    "f_flag\030\001 \001(\005\022\020\n\010f_s_args\030\002 \003(\t\022\020\n\010f_page"
    "NO\030\003 \001(\005\022\023\n\013f_page_size\030\004 \001(\t\"5\n\022pb_req_"
    "t_milestore\022\016\n\006f_time\030\001 \001(\005\022\017\n\007f_event\030\002"
    " \001(\t\"3\n\023pb_req_t_department\022\014\n\004f_id\030\001 \001("
    "\t\022\016\n\006f_name\030\002 \001(\t\"\203\004\n\014pb_req_t_req\022\r\n\005f_"
    "cmd\030\001 \001(\005\022\020\n\010f_i_args\030\002 \003(\005\022\020\n\010f_s_args\030"
    "\003 \003(\t\022!\n\007f_attch\030\004 \003(\0132\020.pb_req_t_attach"
    "\022$\n\tf_project\030\005 \001(\0132\021.pb_req_t_project\022$"
    "\n\014f_prj_member\030\006 \003(\0132\016.pb_req_t_user\022\036\n\006"
    "f_task\030\007 \001(\0132\016.pb_req_t_task\022\"\n\010f_report"
    "\030\010 \001(\0132\020.pb_req_t_report\0220\n\017f_user_data_"
    "req\030\t \001(\0132\027.pb_req_t_user_data_req\022&\n\nf_"
    "msg_book\030\n \001(\0132\022.pb_req_t_msg_book\022,\n\rf_"
    "msg_hotspot\030\013 \001(\0132\025.pb_req_t_msg_hotspot"
    "\022(\n\013f_milestore\030\014 \003(\0132\023.pb_req_t_milesto"
    "re\022*\n\014f_department\030\r \003(\0132\024.pb_req_t_depa"
    "rtment\022/\n\021f_turn_department\030\016 \001(\0132\024.pb_r"
    "eq_t_department", 2695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_gsk_req.proto", &protobuf_RegisterTypes);
  pb_req_t_attach::default_instance_ = new pb_req_t_attach();
  pb_req_t_base_file::default_instance_ = new pb_req_t_base_file();
  pb_req_t_msg_book::default_instance_ = new pb_req_t_msg_book();
  pb_req_t_msg_hotspot::default_instance_ = new pb_req_t_msg_hotspot();
  pb_req_t_user::default_instance_ = new pb_req_t_user();
  pb_req_t_project::default_instance_ = new pb_req_t_project();
  pb_req_t_task_report::default_instance_ = new pb_req_t_task_report();
  pb_req_t_task::default_instance_ = new pb_req_t_task();
  pb_req_t_report::default_instance_ = new pb_req_t_report();
  pb_req_t_user_data_req::default_instance_ = new pb_req_t_user_data_req();
  pb_req_t_milestore::default_instance_ = new pb_req_t_milestore();
  pb_req_t_department::default_instance_ = new pb_req_t_department();
  pb_req_t_req::default_instance_ = new pb_req_t_req();
  pb_req_t_attach::default_instance_->InitAsDefaultInstance();
  pb_req_t_base_file::default_instance_->InitAsDefaultInstance();
  pb_req_t_msg_book::default_instance_->InitAsDefaultInstance();
  pb_req_t_msg_hotspot::default_instance_->InitAsDefaultInstance();
  pb_req_t_user::default_instance_->InitAsDefaultInstance();
  pb_req_t_project::default_instance_->InitAsDefaultInstance();
  pb_req_t_task_report::default_instance_->InitAsDefaultInstance();
  pb_req_t_task::default_instance_->InitAsDefaultInstance();
  pb_req_t_report::default_instance_->InitAsDefaultInstance();
  pb_req_t_user_data_req::default_instance_->InitAsDefaultInstance();
  pb_req_t_milestore::default_instance_->InitAsDefaultInstance();
  pb_req_t_department::default_instance_->InitAsDefaultInstance();
  pb_req_t_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fgsk_5freq_2eproto {
  StaticDescriptorInitializer_pb_5fgsk_5freq_2eproto() {
    protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  }
} static_descriptor_initializer_pb_5fgsk_5freq_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_attach::kFAttachNameFieldNumber;
const int pb_req_t_attach::kFAttachTypeFieldNumber;
const int pb_req_t_attach::kFAttachUrlFieldNumber;
const int pb_req_t_attach::kFAttachSizeFieldNumber;
const int pb_req_t_attach::kFAttachPlaytimeFieldNumber;
const int pb_req_t_attach::kFAttachUploadtimeFieldNumber;
const int pb_req_t_attach::kFAttachIdFieldNumber;
#endif  // !_MSC_VER

pb_req_t_attach::pb_req_t_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_attach)
}

void pb_req_t_attach::InitAsDefaultInstance() {
}

pb_req_t_attach::pb_req_t_attach(const pb_req_t_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_attach)
}

void pb_req_t_attach::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_type_ = 0;
  f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_size_ = 0;
  f_attach_playtime_ = 0;
  f_attach_uploadtime_ = 0;
  f_attach_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_attach::~pb_req_t_attach() {
  // @@protoc_insertion_point(destructor:pb_req_t_attach)
  SharedDtor();
}

void pb_req_t_attach::SharedDtor() {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_;
  }
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_url_;
  }
  if (f_attach_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_attach_descriptor_;
}

const pb_req_t_attach& pb_req_t_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_attach* pb_req_t_attach::default_instance_ = NULL;

pb_req_t_attach* pb_req_t_attach::New() const {
  return new pb_req_t_attach;
}

void pb_req_t_attach::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_attach*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_attach_type_, f_attach_uploadtime_);
    if (has_f_attach_name()) {
      if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_name_->clear();
      }
    }
    if (has_f_attach_url()) {
      if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_url_->clear();
      }
    }
    if (has_f_attach_id()) {
      if (f_attach_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_attach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_attach_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_name().data(), this->f_attach_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_attach_type;
        break;
      }

      // optional int32 f_attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_type_)));
          set_has_f_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_attach_url;
        break;
      }

      // optional string f_attach_url = 3;
      case 3: {
        if (tag == 26) {
         parse_f_attach_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_url().data(), this->f_attach_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_attach_size;
        break;
      }

      // optional int32 f_attach_size = 4;
      case 4: {
        if (tag == 32) {
         parse_f_attach_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_size_)));
          set_has_f_attach_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_attach_playtime;
        break;
      }

      // optional int32 f_attach_playtime = 5;
      case 5: {
        if (tag == 40) {
         parse_f_attach_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_playtime_)));
          set_has_f_attach_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_attach_uploadtime;
        break;
      }

      // optional int32 f_attach_uploadtime = 6;
      case 6: {
        if (tag == 48) {
         parse_f_attach_uploadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_uploadtime_)));
          set_has_f_attach_uploadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_attach_id;
        break;
      }

      // optional string f_attach_id = 7;
      case 7: {
        if (tag == 58) {
         parse_f_attach_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_id().data(), this->f_attach_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_attach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_attach)
  return false;
#undef DO_
}

void pb_req_t_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_attach_name(), output);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_attach_type(), output);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_attach_url(), output);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_attach_size(), output);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_attach_playtime(), output);
  }

  // optional int32 f_attach_uploadtime = 6;
  if (has_f_attach_uploadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_attach_uploadtime(), output);
  }

  // optional string f_attach_id = 7;
  if (has_f_attach_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_id().data(), this->f_attach_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_attach_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_attach)
}

::google::protobuf::uint8* pb_req_t_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_attach_name(), target);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_attach_type(), target);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_attach_url(), target);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_attach_size(), target);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_attach_playtime(), target);
  }

  // optional int32 f_attach_uploadtime = 6;
  if (has_f_attach_uploadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_attach_uploadtime(), target);
  }

  // optional string f_attach_id = 7;
  if (has_f_attach_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_id().data(), this->f_attach_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_attach_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_attach)
  return target;
}

int pb_req_t_attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_attach_name = 1;
    if (has_f_attach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_name());
    }

    // optional int32 f_attach_type = 2;
    if (has_f_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_type());
    }

    // optional string f_attach_url = 3;
    if (has_f_attach_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_url());
    }

    // optional int32 f_attach_size = 4;
    if (has_f_attach_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_size());
    }

    // optional int32 f_attach_playtime = 5;
    if (has_f_attach_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_playtime());
    }

    // optional int32 f_attach_uploadtime = 6;
    if (has_f_attach_uploadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_uploadtime());
    }

    // optional string f_attach_id = 7;
    if (has_f_attach_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_attach::MergeFrom(const pb_req_t_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_attach_name()) {
      set_f_attach_name(from.f_attach_name());
    }
    if (from.has_f_attach_type()) {
      set_f_attach_type(from.f_attach_type());
    }
    if (from.has_f_attach_url()) {
      set_f_attach_url(from.f_attach_url());
    }
    if (from.has_f_attach_size()) {
      set_f_attach_size(from.f_attach_size());
    }
    if (from.has_f_attach_playtime()) {
      set_f_attach_playtime(from.f_attach_playtime());
    }
    if (from.has_f_attach_uploadtime()) {
      set_f_attach_uploadtime(from.f_attach_uploadtime());
    }
    if (from.has_f_attach_id()) {
      set_f_attach_id(from.f_attach_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_attach::CopyFrom(const pb_req_t_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_attach::IsInitialized() const {

  return true;
}

void pb_req_t_attach::Swap(pb_req_t_attach* other) {
  if (other != this) {
    std::swap(f_attach_name_, other->f_attach_name_);
    std::swap(f_attach_type_, other->f_attach_type_);
    std::swap(f_attach_url_, other->f_attach_url_);
    std::swap(f_attach_size_, other->f_attach_size_);
    std::swap(f_attach_playtime_, other->f_attach_playtime_);
    std::swap(f_attach_uploadtime_, other->f_attach_uploadtime_);
    std::swap(f_attach_id_, other->f_attach_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_attach_descriptor_;
  metadata.reflection = pb_req_t_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_base_file::kFBaseinfoFieldNumber;
const int pb_req_t_base_file::kFCreUinFieldNumber;
const int pb_req_t_base_file::kFCreNameFieldNumber;
const int pb_req_t_base_file::kFJobTypeFieldNumber;
const int pb_req_t_base_file::kFTagFieldNumber;
const int pb_req_t_base_file::kFFidFieldNumber;
const int pb_req_t_base_file::kFFpidFieldNumber;
#endif  // !_MSC_VER

pb_req_t_base_file::pb_req_t_base_file()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_base_file)
}

void pb_req_t_base_file::InitAsDefaultInstance() {
  f_baseinfo_ = const_cast< ::pb_req_t_attach*>(&::pb_req_t_attach::default_instance());
}

pb_req_t_base_file::pb_req_t_base_file(const pb_req_t_base_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_base_file)
}

void pb_req_t_base_file::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_baseinfo_ = NULL;
  f_cre_uin_ = 0;
  f_cre_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_base_file::~pb_req_t_base_file() {
  // @@protoc_insertion_point(destructor:pb_req_t_base_file)
  SharedDtor();
}

void pb_req_t_base_file::SharedDtor() {
  if (f_cre_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_cre_name_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_tag_;
  }
  if (f_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fid_;
  }
  if (f_fpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fpid_;
  }
  if (this != default_instance_) {
    delete f_baseinfo_;
  }
}

void pb_req_t_base_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_base_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_base_file_descriptor_;
}

const pb_req_t_base_file& pb_req_t_base_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_base_file* pb_req_t_base_file::default_instance_ = NULL;

pb_req_t_base_file* pb_req_t_base_file::New() const {
  return new pb_req_t_base_file;
}

void pb_req_t_base_file::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_f_baseinfo()) {
      if (f_baseinfo_ != NULL) f_baseinfo_->::pb_req_t_attach::Clear();
    }
    f_cre_uin_ = 0;
    if (has_f_cre_name()) {
      if (f_cre_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_cre_name_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_tag()) {
      if (f_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_tag_->clear();
      }
    }
    if (has_f_fid()) {
      if (f_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fid_->clear();
      }
    }
    if (has_f_fpid()) {
      if (f_fpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fpid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_base_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_base_file)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_req_t_attach f_baseinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_cre_uin;
        break;
      }

      // optional int32 f_cre_uin = 2;
      case 2: {
        if (tag == 16) {
         parse_f_cre_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_cre_uin_)));
          set_has_f_cre_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_cre_name;
        break;
      }

      // optional string f_cre_name = 3;
      case 3: {
        if (tag == 26) {
         parse_f_cre_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_cre_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_cre_name().data(), this->f_cre_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_cre_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 4;
      case 4: {
        if (tag == 34) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_tag;
        break;
      }

      // optional string f_tag = 5;
      case 5: {
        if (tag == 42) {
         parse_f_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_tag().data(), this->f_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_fid;
        break;
      }

      // optional string f_fid = 6;
      case 6: {
        if (tag == 50) {
         parse_f_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fid().data(), this->f_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_fpid;
        break;
      }

      // optional string f_fpid = 7;
      case 7: {
        if (tag == 58) {
         parse_f_fpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fpid().data(), this->f_fpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fpid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_base_file)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_base_file)
  return false;
#undef DO_
}

void pb_req_t_base_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_base_file)
  // optional .pb_req_t_attach f_baseinfo = 1;
  if (has_f_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_baseinfo(), output);
  }

  // optional int32 f_cre_uin = 2;
  if (has_f_cre_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_cre_uin(), output);
  }

  // optional string f_cre_name = 3;
  if (has_f_cre_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_cre_name().data(), this->f_cre_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_cre_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_cre_name(), output);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_job_type(), output);
  }

  // optional string f_tag = 5;
  if (has_f_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tag().data(), this->f_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_tag(), output);
  }

  // optional string f_fid = 6;
  if (has_f_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fid().data(), this->f_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_fid(), output);
  }

  // optional string f_fpid = 7;
  if (has_f_fpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fpid().data(), this->f_fpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fpid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_fpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_base_file)
}

::google::protobuf::uint8* pb_req_t_base_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_base_file)
  // optional .pb_req_t_attach f_baseinfo = 1;
  if (has_f_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_baseinfo(), target);
  }

  // optional int32 f_cre_uin = 2;
  if (has_f_cre_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_cre_uin(), target);
  }

  // optional string f_cre_name = 3;
  if (has_f_cre_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_cre_name().data(), this->f_cre_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_cre_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_cre_name(), target);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_job_type(), target);
  }

  // optional string f_tag = 5;
  if (has_f_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tag().data(), this->f_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_tag(), target);
  }

  // optional string f_fid = 6;
  if (has_f_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fid().data(), this->f_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_fid(), target);
  }

  // optional string f_fpid = 7;
  if (has_f_fpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fpid().data(), this->f_fpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fpid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_fpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_base_file)
  return target;
}

int pb_req_t_base_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_req_t_attach f_baseinfo = 1;
    if (has_f_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_baseinfo());
    }

    // optional int32 f_cre_uin = 2;
    if (has_f_cre_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_cre_uin());
    }

    // optional string f_cre_name = 3;
    if (has_f_cre_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_cre_name());
    }

    // optional string f_job_type = 4;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_tag = 5;
    if (has_f_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_tag());
    }

    // optional string f_fid = 6;
    if (has_f_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fid());
    }

    // optional string f_fpid = 7;
    if (has_f_fpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_base_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_base_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_base_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_base_file::MergeFrom(const pb_req_t_base_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_baseinfo()) {
      mutable_f_baseinfo()->::pb_req_t_attach::MergeFrom(from.f_baseinfo());
    }
    if (from.has_f_cre_uin()) {
      set_f_cre_uin(from.f_cre_uin());
    }
    if (from.has_f_cre_name()) {
      set_f_cre_name(from.f_cre_name());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_tag()) {
      set_f_tag(from.f_tag());
    }
    if (from.has_f_fid()) {
      set_f_fid(from.f_fid());
    }
    if (from.has_f_fpid()) {
      set_f_fpid(from.f_fpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_base_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_base_file::CopyFrom(const pb_req_t_base_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_base_file::IsInitialized() const {

  return true;
}

void pb_req_t_base_file::Swap(pb_req_t_base_file* other) {
  if (other != this) {
    std::swap(f_baseinfo_, other->f_baseinfo_);
    std::swap(f_cre_uin_, other->f_cre_uin_);
    std::swap(f_cre_name_, other->f_cre_name_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_tag_, other->f_tag_);
    std::swap(f_fid_, other->f_fid_);
    std::swap(f_fpid_, other->f_fpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_base_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_base_file_descriptor_;
  metadata.reflection = pb_req_t_base_file_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_msg_book::kFBookTypeFieldNumber;
const int pb_req_t_msg_book::kFBookIdFieldNumber;
const int pb_req_t_msg_book::kFBookNameFieldNumber;
const int pb_req_t_msg_book::kFBookCataIdFieldNumber;
const int pb_req_t_msg_book::kFBookCataInfoFieldNumber;
const int pb_req_t_msg_book::kFBookSubcataIdFieldNumber;
const int pb_req_t_msg_book::kFBookSubcataInfoFieldNumber;
const int pb_req_t_msg_book::kFBookInfoIdFieldNumber;
const int pb_req_t_msg_book::kFBookInfoFieldNumber;
#endif  // !_MSC_VER

pb_req_t_msg_book::pb_req_t_msg_book()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_msg_book)
}

void pb_req_t_msg_book::InitAsDefaultInstance() {
}

pb_req_t_msg_book::pb_req_t_msg_book(const pb_req_t_msg_book& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_msg_book)
}

void pb_req_t_msg_book::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_book_type_ = 0;
  f_book_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_cata_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_cata_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_subcata_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_subcata_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_info_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_msg_book::~pb_req_t_msg_book() {
  // @@protoc_insertion_point(destructor:pb_req_t_msg_book)
  SharedDtor();
}

void pb_req_t_msg_book::SharedDtor() {
  if (f_book_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_id_;
  }
  if (f_book_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_name_;
  }
  if (f_book_cata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_cata_id_;
  }
  if (f_book_cata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_cata_info_;
  }
  if (f_book_subcata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_subcata_id_;
  }
  if (f_book_subcata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_subcata_info_;
  }
  if (f_book_info_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_info_id_;
  }
  if (f_book_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_info_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_msg_book::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_msg_book::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_msg_book_descriptor_;
}

const pb_req_t_msg_book& pb_req_t_msg_book::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_msg_book* pb_req_t_msg_book::default_instance_ = NULL;

pb_req_t_msg_book* pb_req_t_msg_book::New() const {
  return new pb_req_t_msg_book;
}

void pb_req_t_msg_book::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    f_book_type_ = 0;
    if (has_f_book_id()) {
      if (f_book_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_id_->clear();
      }
    }
    if (has_f_book_name()) {
      if (f_book_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_name_->clear();
      }
    }
    if (has_f_book_cata_id()) {
      if (f_book_cata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_cata_id_->clear();
      }
    }
    if (has_f_book_cata_info()) {
      if (f_book_cata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_cata_info_->clear();
      }
    }
    if (has_f_book_subcata_id()) {
      if (f_book_subcata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_subcata_id_->clear();
      }
    }
    if (has_f_book_subcata_info()) {
      if (f_book_subcata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_subcata_info_->clear();
      }
    }
    if (has_f_book_info_id()) {
      if (f_book_info_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_info_id_->clear();
      }
    }
  }
  if (has_f_book_info()) {
    if (f_book_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_book_info_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_msg_book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_msg_book)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_book_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_book_type_)));
          set_has_f_book_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_book_id;
        break;
      }

      // optional string f_book_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_book_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_id().data(), this->f_book_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_book_name;
        break;
      }

      // optional string f_book_name = 3;
      case 3: {
        if (tag == 26) {
         parse_f_book_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_name().data(), this->f_book_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_book_cata_id;
        break;
      }

      // optional string f_book_cata_id = 4;
      case 4: {
        if (tag == 34) {
         parse_f_book_cata_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_cata_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_cata_id().data(), this->f_book_cata_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_cata_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_book_cata_info;
        break;
      }

      // optional string f_book_cata_info = 5;
      case 5: {
        if (tag == 42) {
         parse_f_book_cata_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_cata_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_cata_info().data(), this->f_book_cata_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_cata_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_book_subcata_id;
        break;
      }

      // optional string f_book_subcata_id = 6;
      case 6: {
        if (tag == 50) {
         parse_f_book_subcata_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_subcata_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_subcata_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_book_subcata_info;
        break;
      }

      // optional string f_book_subcata_info = 7;
      case 7: {
        if (tag == 58) {
         parse_f_book_subcata_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_subcata_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_subcata_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_book_info_id;
        break;
      }

      // optional string f_book_info_id = 8;
      case 8: {
        if (tag == 66) {
         parse_f_book_info_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_info_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_info_id().data(), this->f_book_info_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_info_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_book_info;
        break;
      }

      // optional string f_book_info = 9;
      case 9: {
        if (tag == 74) {
         parse_f_book_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_info().data(), this->f_book_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_msg_book)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_msg_book)
  return false;
#undef DO_
}

void pb_req_t_msg_book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_msg_book)
  // optional int32 f_book_type = 1;
  if (has_f_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_book_type(), output);
  }

  // optional string f_book_id = 2;
  if (has_f_book_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_id().data(), this->f_book_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_book_id(), output);
  }

  // optional string f_book_name = 3;
  if (has_f_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_name().data(), this->f_book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_book_name(), output);
  }

  // optional string f_book_cata_id = 4;
  if (has_f_book_cata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_id().data(), this->f_book_cata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_book_cata_id(), output);
  }

  // optional string f_book_cata_info = 5;
  if (has_f_book_cata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_info().data(), this->f_book_cata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_book_cata_info(), output);
  }

  // optional string f_book_subcata_id = 6;
  if (has_f_book_subcata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_book_subcata_id(), output);
  }

  // optional string f_book_subcata_info = 7;
  if (has_f_book_subcata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_book_subcata_info(), output);
  }

  // optional string f_book_info_id = 8;
  if (has_f_book_info_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info_id().data(), this->f_book_info_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_book_info_id(), output);
  }

  // optional string f_book_info = 9;
  if (has_f_book_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info().data(), this->f_book_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_book_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_msg_book)
}

::google::protobuf::uint8* pb_req_t_msg_book::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_msg_book)
  // optional int32 f_book_type = 1;
  if (has_f_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_book_type(), target);
  }

  // optional string f_book_id = 2;
  if (has_f_book_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_id().data(), this->f_book_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_book_id(), target);
  }

  // optional string f_book_name = 3;
  if (has_f_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_name().data(), this->f_book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_book_name(), target);
  }

  // optional string f_book_cata_id = 4;
  if (has_f_book_cata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_id().data(), this->f_book_cata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_book_cata_id(), target);
  }

  // optional string f_book_cata_info = 5;
  if (has_f_book_cata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_info().data(), this->f_book_cata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_book_cata_info(), target);
  }

  // optional string f_book_subcata_id = 6;
  if (has_f_book_subcata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_book_subcata_id(), target);
  }

  // optional string f_book_subcata_info = 7;
  if (has_f_book_subcata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_book_subcata_info(), target);
  }

  // optional string f_book_info_id = 8;
  if (has_f_book_info_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info_id().data(), this->f_book_info_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_book_info_id(), target);
  }

  // optional string f_book_info = 9;
  if (has_f_book_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info().data(), this->f_book_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_book_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_msg_book)
  return target;
}

int pb_req_t_msg_book::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_book_type = 1;
    if (has_f_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_book_type());
    }

    // optional string f_book_id = 2;
    if (has_f_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_id());
    }

    // optional string f_book_name = 3;
    if (has_f_book_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_name());
    }

    // optional string f_book_cata_id = 4;
    if (has_f_book_cata_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_cata_id());
    }

    // optional string f_book_cata_info = 5;
    if (has_f_book_cata_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_cata_info());
    }

    // optional string f_book_subcata_id = 6;
    if (has_f_book_subcata_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_subcata_id());
    }

    // optional string f_book_subcata_info = 7;
    if (has_f_book_subcata_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_subcata_info());
    }

    // optional string f_book_info_id = 8;
    if (has_f_book_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_info_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_book_info = 9;
    if (has_f_book_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_msg_book::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_msg_book* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_msg_book*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_msg_book::MergeFrom(const pb_req_t_msg_book& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_book_type()) {
      set_f_book_type(from.f_book_type());
    }
    if (from.has_f_book_id()) {
      set_f_book_id(from.f_book_id());
    }
    if (from.has_f_book_name()) {
      set_f_book_name(from.f_book_name());
    }
    if (from.has_f_book_cata_id()) {
      set_f_book_cata_id(from.f_book_cata_id());
    }
    if (from.has_f_book_cata_info()) {
      set_f_book_cata_info(from.f_book_cata_info());
    }
    if (from.has_f_book_subcata_id()) {
      set_f_book_subcata_id(from.f_book_subcata_id());
    }
    if (from.has_f_book_subcata_info()) {
      set_f_book_subcata_info(from.f_book_subcata_info());
    }
    if (from.has_f_book_info_id()) {
      set_f_book_info_id(from.f_book_info_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_book_info()) {
      set_f_book_info(from.f_book_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_msg_book::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_msg_book::CopyFrom(const pb_req_t_msg_book& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_msg_book::IsInitialized() const {

  return true;
}

void pb_req_t_msg_book::Swap(pb_req_t_msg_book* other) {
  if (other != this) {
    std::swap(f_book_type_, other->f_book_type_);
    std::swap(f_book_id_, other->f_book_id_);
    std::swap(f_book_name_, other->f_book_name_);
    std::swap(f_book_cata_id_, other->f_book_cata_id_);
    std::swap(f_book_cata_info_, other->f_book_cata_info_);
    std::swap(f_book_subcata_id_, other->f_book_subcata_id_);
    std::swap(f_book_subcata_info_, other->f_book_subcata_info_);
    std::swap(f_book_info_id_, other->f_book_info_id_);
    std::swap(f_book_info_, other->f_book_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_msg_book::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_msg_book_descriptor_;
  metadata.reflection = pb_req_t_msg_book_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_msg_hotspot::kFHotspotIdFieldNumber;
const int pb_req_t_msg_hotspot::kFHotspotTitleFieldNumber;
const int pb_req_t_msg_hotspot::kFHotspotFirstImageFieldNumber;
const int pb_req_t_msg_hotspot::kFHotspotSourceSiteFieldNumber;
#endif  // !_MSC_VER

pb_req_t_msg_hotspot::pb_req_t_msg_hotspot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_msg_hotspot)
}

void pb_req_t_msg_hotspot::InitAsDefaultInstance() {
}

pb_req_t_msg_hotspot::pb_req_t_msg_hotspot(const pb_req_t_msg_hotspot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_msg_hotspot)
}

void pb_req_t_msg_hotspot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_hotspot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_first_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_source_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_msg_hotspot::~pb_req_t_msg_hotspot() {
  // @@protoc_insertion_point(destructor:pb_req_t_msg_hotspot)
  SharedDtor();
}

void pb_req_t_msg_hotspot::SharedDtor() {
  if (f_hotspot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_id_;
  }
  if (f_hotspot_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_title_;
  }
  if (f_hotspot_first_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_first_image_;
  }
  if (f_hotspot_source_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_source_site_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_msg_hotspot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_msg_hotspot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_msg_hotspot_descriptor_;
}

const pb_req_t_msg_hotspot& pb_req_t_msg_hotspot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_msg_hotspot* pb_req_t_msg_hotspot::default_instance_ = NULL;

pb_req_t_msg_hotspot* pb_req_t_msg_hotspot::New() const {
  return new pb_req_t_msg_hotspot;
}

void pb_req_t_msg_hotspot::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_f_hotspot_id()) {
      if (f_hotspot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_id_->clear();
      }
    }
    if (has_f_hotspot_title()) {
      if (f_hotspot_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_title_->clear();
      }
    }
    if (has_f_hotspot_first_image()) {
      if (f_hotspot_first_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_first_image_->clear();
      }
    }
    if (has_f_hotspot_source_site()) {
      if (f_hotspot_source_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_source_site_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_msg_hotspot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_msg_hotspot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_hotspot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_id().data(), this->f_hotspot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_hotspot_title;
        break;
      }

      // optional string f_hotspot_title = 2;
      case 2: {
        if (tag == 18) {
         parse_f_hotspot_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_title().data(), this->f_hotspot_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_hotspot_first_image;
        break;
      }

      // optional string f_hotspot_first_image = 3;
      case 3: {
        if (tag == 26) {
         parse_f_hotspot_first_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_first_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_first_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_hotspot_source_site;
        break;
      }

      // optional string f_hotspot_source_site = 4;
      case 4: {
        if (tag == 34) {
         parse_f_hotspot_source_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_source_site()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_source_site");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_msg_hotspot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_msg_hotspot)
  return false;
#undef DO_
}

void pb_req_t_msg_hotspot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_msg_hotspot)
  // optional string f_hotspot_id = 1;
  if (has_f_hotspot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_id().data(), this->f_hotspot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_hotspot_id(), output);
  }

  // optional string f_hotspot_title = 2;
  if (has_f_hotspot_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_title().data(), this->f_hotspot_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_hotspot_title(), output);
  }

  // optional string f_hotspot_first_image = 3;
  if (has_f_hotspot_first_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_first_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_hotspot_first_image(), output);
  }

  // optional string f_hotspot_source_site = 4;
  if (has_f_hotspot_source_site()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_source_site");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_hotspot_source_site(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_msg_hotspot)
}

::google::protobuf::uint8* pb_req_t_msg_hotspot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_msg_hotspot)
  // optional string f_hotspot_id = 1;
  if (has_f_hotspot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_id().data(), this->f_hotspot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_hotspot_id(), target);
  }

  // optional string f_hotspot_title = 2;
  if (has_f_hotspot_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_title().data(), this->f_hotspot_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_hotspot_title(), target);
  }

  // optional string f_hotspot_first_image = 3;
  if (has_f_hotspot_first_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_first_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_hotspot_first_image(), target);
  }

  // optional string f_hotspot_source_site = 4;
  if (has_f_hotspot_source_site()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_source_site");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_hotspot_source_site(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_msg_hotspot)
  return target;
}

int pb_req_t_msg_hotspot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_hotspot_id = 1;
    if (has_f_hotspot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_id());
    }

    // optional string f_hotspot_title = 2;
    if (has_f_hotspot_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_title());
    }

    // optional string f_hotspot_first_image = 3;
    if (has_f_hotspot_first_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_first_image());
    }

    // optional string f_hotspot_source_site = 4;
    if (has_f_hotspot_source_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_source_site());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_msg_hotspot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_msg_hotspot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_msg_hotspot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_msg_hotspot::MergeFrom(const pb_req_t_msg_hotspot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_hotspot_id()) {
      set_f_hotspot_id(from.f_hotspot_id());
    }
    if (from.has_f_hotspot_title()) {
      set_f_hotspot_title(from.f_hotspot_title());
    }
    if (from.has_f_hotspot_first_image()) {
      set_f_hotspot_first_image(from.f_hotspot_first_image());
    }
    if (from.has_f_hotspot_source_site()) {
      set_f_hotspot_source_site(from.f_hotspot_source_site());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_msg_hotspot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_msg_hotspot::CopyFrom(const pb_req_t_msg_hotspot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_msg_hotspot::IsInitialized() const {

  return true;
}

void pb_req_t_msg_hotspot::Swap(pb_req_t_msg_hotspot* other) {
  if (other != this) {
    std::swap(f_hotspot_id_, other->f_hotspot_id_);
    std::swap(f_hotspot_title_, other->f_hotspot_title_);
    std::swap(f_hotspot_first_image_, other->f_hotspot_first_image_);
    std::swap(f_hotspot_source_site_, other->f_hotspot_source_site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_msg_hotspot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_msg_hotspot_descriptor_;
  metadata.reflection = pb_req_t_msg_hotspot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_user::kFUinFieldNumber;
const int pb_req_t_user::kFNameFieldNumber;
const int pb_req_t_user::kFPhoneFieldNumber;
const int pb_req_t_user::kFJobTypeFieldNumber;
const int pb_req_t_user::kFJoinContentFieldNumber;
const int pb_req_t_user::kFDepIdFieldNumber;
#endif  // !_MSC_VER

pb_req_t_user::pb_req_t_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_user)
}

void pb_req_t_user::InitAsDefaultInstance() {
}

pb_req_t_user::pb_req_t_user(const pb_req_t_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_user)
}

void pb_req_t_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_dep_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_user::~pb_req_t_user() {
  // @@protoc_insertion_point(destructor:pb_req_t_user)
  SharedDtor();
}

void pb_req_t_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_join_content_;
  }
  if (f_dep_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_dep_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_user_descriptor_;
}

const pb_req_t_user& pb_req_t_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_user* pb_req_t_user::default_instance_ = NULL;

pb_req_t_user* pb_req_t_user::New() const {
  return new pb_req_t_user;
}

void pb_req_t_user::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    f_uin_ = 0u;
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_join_content()) {
      if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_join_content_->clear();
      }
    }
    if (has_f_dep_id()) {
      if (f_dep_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_dep_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 4;
      case 4: {
        if (tag == 34) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_join_content;
        break;
      }

      // optional string f_join_content = 5;
      case 5: {
        if (tag == 42) {
         parse_f_join_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_join_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_join_content().data(), this->f_join_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_join_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_dep_id;
        break;
      }

      // optional string f_dep_id = 6;
      case 6: {
        if (tag == 50) {
         parse_f_dep_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_dep_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_dep_id().data(), this->f_dep_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_dep_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_user)
  return false;
#undef DO_
}

void pb_req_t_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_phone(), output);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_job_type(), output);
  }

  // optional string f_join_content = 5;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_join_content(), output);
  }

  // optional string f_dep_id = 6;
  if (has_f_dep_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_dep_id().data(), this->f_dep_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_dep_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_dep_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_user)
}

::google::protobuf::uint8* pb_req_t_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_phone(), target);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_job_type(), target);
  }

  // optional string f_join_content = 5;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_join_content(), target);
  }

  // optional string f_dep_id = 6;
  if (has_f_dep_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_dep_id().data(), this->f_dep_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_dep_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_dep_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_user)
  return target;
}

int pb_req_t_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_phone = 3;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional string f_job_type = 4;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_join_content = 5;
    if (has_f_join_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_join_content());
    }

    // optional string f_dep_id = 6;
    if (has_f_dep_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_dep_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_user::MergeFrom(const pb_req_t_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_join_content()) {
      set_f_join_content(from.f_join_content());
    }
    if (from.has_f_dep_id()) {
      set_f_dep_id(from.f_dep_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_user::CopyFrom(const pb_req_t_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_user::IsInitialized() const {

  return true;
}

void pb_req_t_user::Swap(pb_req_t_user* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_join_content_, other->f_join_content_);
    std::swap(f_dep_id_, other->f_dep_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_user_descriptor_;
  metadata.reflection = pb_req_t_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_project::kFPrjNameFieldNumber;
const int pb_req_t_project::kFPrjTypeFieldNumber;
const int pb_req_t_project::kFPrjImageFieldNumber;
const int pb_req_t_project::kFProvinceFieldNumber;
const int pb_req_t_project::kFCityFieldNumber;
const int pb_req_t_project::kFPrjAddressFieldNumber;
const int pb_req_t_project::kFFloorAreaFieldNumber;
const int pb_req_t_project::kFPrjBeginFieldNumber;
const int pb_req_t_project::kFPrjEndFieldNumber;
const int pb_req_t_project::kFJianzhuDanweiFieldNumber;
const int pb_req_t_project::kFShigongDanweiFieldNumber;
const int pb_req_t_project::kFJianliDanweiFieldNumber;
const int pb_req_t_project::kFFenbaoDanweiFieldNumber;
const int pb_req_t_project::kFLatFieldNumber;
const int pb_req_t_project::kFLonFieldNumber;
const int pb_req_t_project::kFFloatFloorAreaFieldNumber;
#endif  // !_MSC_VER

pb_req_t_project::pb_req_t_project()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_project)
}

void pb_req_t_project::InitAsDefaultInstance() {
}

pb_req_t_project::pb_req_t_project(const pb_req_t_project& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_project)
}

void pb_req_t_project::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_type_ = 0;
  f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_floor_area_ = 0;
  f_prj_begin_ = 0;
  f_prj_end_ = 0;
  f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_lat_ = 0;
  f_lon_ = 0;
  f_float_floor_area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_project::~pb_req_t_project() {
  // @@protoc_insertion_point(destructor:pb_req_t_project)
  SharedDtor();
}

void pb_req_t_project::SharedDtor() {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_image_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_address_;
  }
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianzhu_danwei_;
  }
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_shigong_danwei_;
  }
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianli_danwei_;
  }
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fenbao_danwei_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_project::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_project::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_project_descriptor_;
}

const pb_req_t_project& pb_req_t_project::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_project* pb_req_t_project::default_instance_ = NULL;

pb_req_t_project* pb_req_t_project::New() const {
  return new pb_req_t_project;
}

void pb_req_t_project::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_project*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_prj_type_, f_floor_area_);
    if (has_f_prj_name()) {
      if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_name_->clear();
      }
    }
    if (has_f_prj_image()) {
      if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_image_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
    if (has_f_prj_address()) {
      if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_address_->clear();
      }
    }
    f_prj_begin_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(f_lat_, f_float_floor_area_);
    f_prj_end_ = 0;
    if (has_f_jianzhu_danwei()) {
      if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianzhu_danwei_->clear();
      }
    }
    if (has_f_shigong_danwei()) {
      if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_shigong_danwei_->clear();
      }
    }
    if (has_f_jianli_danwei()) {
      if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianli_danwei_->clear();
      }
    }
    if (has_f_fenbao_danwei()) {
      if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fenbao_danwei_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_project)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_name().data(), this->f_prj_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_prj_type;
        break;
      }

      // optional int32 f_prj_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_prj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_type_)));
          set_has_f_prj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_prj_image;
        break;
      }

      // optional string f_prj_image = 3;
      case 3: {
        if (tag == 26) {
         parse_f_prj_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_image().data(), this->f_prj_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_province;
        break;
      }

      // optional string f_province = 4;
      case 4: {
        if (tag == 34) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_city;
        break;
      }

      // optional string f_city = 5;
      case 5: {
        if (tag == 42) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_address;
        break;
      }

      // optional string f_prj_address = 6;
      case 6: {
        if (tag == 50) {
         parse_f_prj_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_address().data(), this->f_prj_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_floor_area;
        break;
      }

      // optional int32 f_floor_area = 7;
      case 7: {
        if (tag == 56) {
         parse_f_floor_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_floor_area_)));
          set_has_f_floor_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_f_prj_begin;
        break;
      }

      // optional int32 f_prj_begin = 8;
      case 8: {
        if (tag == 64) {
         parse_f_prj_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_begin_)));
          set_has_f_prj_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_prj_end;
        break;
      }

      // optional int32 f_prj_end = 9;
      case 9: {
        if (tag == 72) {
         parse_f_prj_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_end_)));
          set_has_f_prj_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_jianzhu_danwei;
        break;
      }

      // optional string f_jianzhu_danwei = 10;
      case 10: {
        if (tag == 82) {
         parse_f_jianzhu_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianzhu_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianzhu_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_shigong_danwei;
        break;
      }

      // optional string f_shigong_danwei = 11;
      case 11: {
        if (tag == 90) {
         parse_f_shigong_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_shigong_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_shigong_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_jianli_danwei;
        break;
      }

      // optional string f_jianli_danwei = 12;
      case 12: {
        if (tag == 98) {
         parse_f_jianli_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianli_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianli_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_fenbao_danwei;
        break;
      }

      // optional string f_fenbao_danwei = 13;
      case 13: {
        if (tag == 106) {
         parse_f_fenbao_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fenbao_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fenbao_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_f_lat;
        break;
      }

      // optional double f_lat = 14;
      case 14: {
        if (tag == 113) {
         parse_f_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lat_)));
          set_has_f_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_f_lon;
        break;
      }

      // optional double f_lon = 15;
      case 15: {
        if (tag == 121) {
         parse_f_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lon_)));
          set_has_f_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_f_float_floor_area;
        break;
      }

      // optional float f_float_floor_area = 16;
      case 16: {
        if (tag == 133) {
         parse_f_float_floor_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_float_floor_area_)));
          set_has_f_float_floor_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_project)
  return false;
#undef DO_
}

void pb_req_t_project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_project)
  // optional string f_prj_name = 1;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_name(), output);
  }

  // optional int32 f_prj_type = 2;
  if (has_f_prj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_prj_type(), output);
  }

  // optional string f_prj_image = 3;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_prj_image(), output);
  }

  // optional string f_province = 4;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_province(), output);
  }

  // optional string f_city = 5;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_city(), output);
  }

  // optional string f_prj_address = 6;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_prj_address(), output);
  }

  // optional int32 f_floor_area = 7;
  if (has_f_floor_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_floor_area(), output);
  }

  // optional int32 f_prj_begin = 8;
  if (has_f_prj_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->f_prj_begin(), output);
  }

  // optional int32 f_prj_end = 9;
  if (has_f_prj_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_prj_end(), output);
  }

  // optional string f_jianzhu_danwei = 10;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_jianzhu_danwei(), output);
  }

  // optional string f_shigong_danwei = 11;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_shigong_danwei(), output);
  }

  // optional string f_jianli_danwei = 12;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->f_jianli_danwei(), output);
  }

  // optional string f_fenbao_danwei = 13;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->f_fenbao_danwei(), output);
  }

  // optional double f_lat = 14;
  if (has_f_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->f_lat(), output);
  }

  // optional double f_lon = 15;
  if (has_f_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->f_lon(), output);
  }

  // optional float f_float_floor_area = 16;
  if (has_f_float_floor_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->f_float_floor_area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_project)
}

::google::protobuf::uint8* pb_req_t_project::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_project)
  // optional string f_prj_name = 1;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_name(), target);
  }

  // optional int32 f_prj_type = 2;
  if (has_f_prj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_prj_type(), target);
  }

  // optional string f_prj_image = 3;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_prj_image(), target);
  }

  // optional string f_province = 4;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_province(), target);
  }

  // optional string f_city = 5;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_city(), target);
  }

  // optional string f_prj_address = 6;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_prj_address(), target);
  }

  // optional int32 f_floor_area = 7;
  if (has_f_floor_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_floor_area(), target);
  }

  // optional int32 f_prj_begin = 8;
  if (has_f_prj_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->f_prj_begin(), target);
  }

  // optional int32 f_prj_end = 9;
  if (has_f_prj_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_prj_end(), target);
  }

  // optional string f_jianzhu_danwei = 10;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_jianzhu_danwei(), target);
  }

  // optional string f_shigong_danwei = 11;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_shigong_danwei(), target);
  }

  // optional string f_jianli_danwei = 12;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->f_jianli_danwei(), target);
  }

  // optional string f_fenbao_danwei = 13;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->f_fenbao_danwei(), target);
  }

  // optional double f_lat = 14;
  if (has_f_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->f_lat(), target);
  }

  // optional double f_lon = 15;
  if (has_f_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->f_lon(), target);
  }

  // optional float f_float_floor_area = 16;
  if (has_f_float_floor_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->f_float_floor_area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_project)
  return target;
}

int pb_req_t_project::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_name = 1;
    if (has_f_prj_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_name());
    }

    // optional int32 f_prj_type = 2;
    if (has_f_prj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_type());
    }

    // optional string f_prj_image = 3;
    if (has_f_prj_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_image());
    }

    // optional string f_province = 4;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 5;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

    // optional string f_prj_address = 6;
    if (has_f_prj_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_address());
    }

    // optional int32 f_floor_area = 7;
    if (has_f_floor_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_floor_area());
    }

    // optional int32 f_prj_begin = 8;
    if (has_f_prj_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_begin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_prj_end = 9;
    if (has_f_prj_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_end());
    }

    // optional string f_jianzhu_danwei = 10;
    if (has_f_jianzhu_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianzhu_danwei());
    }

    // optional string f_shigong_danwei = 11;
    if (has_f_shigong_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_shigong_danwei());
    }

    // optional string f_jianli_danwei = 12;
    if (has_f_jianli_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianli_danwei());
    }

    // optional string f_fenbao_danwei = 13;
    if (has_f_fenbao_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fenbao_danwei());
    }

    // optional double f_lat = 14;
    if (has_f_lat()) {
      total_size += 1 + 8;
    }

    // optional double f_lon = 15;
    if (has_f_lon()) {
      total_size += 1 + 8;
    }

    // optional float f_float_floor_area = 16;
    if (has_f_float_floor_area()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_project::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_project* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_project*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_project::MergeFrom(const pb_req_t_project& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_name()) {
      set_f_prj_name(from.f_prj_name());
    }
    if (from.has_f_prj_type()) {
      set_f_prj_type(from.f_prj_type());
    }
    if (from.has_f_prj_image()) {
      set_f_prj_image(from.f_prj_image());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
    if (from.has_f_prj_address()) {
      set_f_prj_address(from.f_prj_address());
    }
    if (from.has_f_floor_area()) {
      set_f_floor_area(from.f_floor_area());
    }
    if (from.has_f_prj_begin()) {
      set_f_prj_begin(from.f_prj_begin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_prj_end()) {
      set_f_prj_end(from.f_prj_end());
    }
    if (from.has_f_jianzhu_danwei()) {
      set_f_jianzhu_danwei(from.f_jianzhu_danwei());
    }
    if (from.has_f_shigong_danwei()) {
      set_f_shigong_danwei(from.f_shigong_danwei());
    }
    if (from.has_f_jianli_danwei()) {
      set_f_jianli_danwei(from.f_jianli_danwei());
    }
    if (from.has_f_fenbao_danwei()) {
      set_f_fenbao_danwei(from.f_fenbao_danwei());
    }
    if (from.has_f_lat()) {
      set_f_lat(from.f_lat());
    }
    if (from.has_f_lon()) {
      set_f_lon(from.f_lon());
    }
    if (from.has_f_float_floor_area()) {
      set_f_float_floor_area(from.f_float_floor_area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_project::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_project::CopyFrom(const pb_req_t_project& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_project::IsInitialized() const {

  return true;
}

void pb_req_t_project::Swap(pb_req_t_project* other) {
  if (other != this) {
    std::swap(f_prj_name_, other->f_prj_name_);
    std::swap(f_prj_type_, other->f_prj_type_);
    std::swap(f_prj_image_, other->f_prj_image_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_prj_address_, other->f_prj_address_);
    std::swap(f_floor_area_, other->f_floor_area_);
    std::swap(f_prj_begin_, other->f_prj_begin_);
    std::swap(f_prj_end_, other->f_prj_end_);
    std::swap(f_jianzhu_danwei_, other->f_jianzhu_danwei_);
    std::swap(f_shigong_danwei_, other->f_shigong_danwei_);
    std::swap(f_jianli_danwei_, other->f_jianli_danwei_);
    std::swap(f_fenbao_danwei_, other->f_fenbao_danwei_);
    std::swap(f_lat_, other->f_lat_);
    std::swap(f_lon_, other->f_lon_);
    std::swap(f_float_floor_area_, other->f_float_floor_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_project::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_project_descriptor_;
  metadata.reflection = pb_req_t_project_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_task_report::kFReportIdFieldNumber;
const int pb_req_t_task_report::kFSponsorFieldNumber;
const int pb_req_t_task_report::kFReplyToFieldNumber;
const int pb_req_t_task_report::kFTitleFieldNumber;
const int pb_req_t_task_report::kFContentFieldNumber;
const int pb_req_t_task_report::kFContentTypeFieldNumber;
const int pb_req_t_task_report::kFPlaytimeFieldNumber;
const int pb_req_t_task_report::kFAttachListFieldNumber;
const int pb_req_t_task_report::kFReportTimeFieldNumber;
#endif  // !_MSC_VER

pb_req_t_task_report::pb_req_t_task_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_task_report)
}

void pb_req_t_task_report::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
  f_reply_to_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
}

pb_req_t_task_report::pb_req_t_task_report(const pb_req_t_task_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_task_report)
}

void pb_req_t_task_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sponsor_ = NULL;
  f_reply_to_ = NULL;
  f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_type_ = 0;
  f_playtime_ = 0;
  f_report_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_task_report::~pb_req_t_task_report() {
  // @@protoc_insertion_point(destructor:pb_req_t_task_report)
  SharedDtor();
}

void pb_req_t_task_report::SharedDtor() {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_report_id_;
  }
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_title_;
  }
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_content_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
    delete f_reply_to_;
  }
}

void pb_req_t_task_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_task_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_task_report_descriptor_;
}

const pb_req_t_task_report& pb_req_t_task_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_task_report* pb_req_t_task_report::default_instance_ = NULL;

pb_req_t_task_report* pb_req_t_task_report::New() const {
  return new pb_req_t_task_report;
}

void pb_req_t_task_report::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_task_report*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_content_type_, f_playtime_);
    if (has_f_report_id()) {
      if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_report_id_->clear();
      }
    }
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
    }
    if (has_f_reply_to()) {
      if (f_reply_to_ != NULL) f_reply_to_->::pb_req_t_user::Clear();
    }
    if (has_f_title()) {
      if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_title_->clear();
      }
    }
    if (has_f_content()) {
      if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_content_->clear();
      }
    }
  }
  f_report_time_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_attach_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_task_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_task_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_report_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_report_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_report_id().data(), this->f_report_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_report_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_req_t_user f_sponsor = 2;
      case 2: {
        if (tag == 18) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_reply_to;
        break;
      }

      // optional .pb_req_t_user f_reply_to = 3;
      case 3: {
        if (tag == 26) {
         parse_f_reply_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_reply_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_title;
        break;
      }

      // optional string f_title = 4;
      case 4: {
        if (tag == 34) {
         parse_f_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_title().data(), this->f_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_content;
        break;
      }

      // optional string f_content = 5;
      case 5: {
        if (tag == 42) {
         parse_f_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_content().data(), this->f_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_content_type;
        break;
      }

      // optional int32 f_content_type = 6;
      case 6: {
        if (tag == 48) {
         parse_f_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_content_type_)));
          set_has_f_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_playtime;
        break;
      }

      // optional int32 f_playtime = 7;
      case 7: {
        if (tag == 56) {
         parse_f_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_playtime_)));
          set_has_f_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_req_t_base_file f_attach_list = 8;
      case 8: {
        if (tag == 66) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_attach_list;
        if (input->ExpectTag(72)) goto parse_f_report_time;
        break;
      }

      // optional int32 f_report_time = 9;
      case 9: {
        if (tag == 72) {
         parse_f_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_report_time_)));
          set_has_f_report_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_task_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_task_report)
  return false;
#undef DO_
}

void pb_req_t_task_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_report_id(), output);
  }

  // optional .pb_req_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_sponsor(), output);
  }

  // optional .pb_req_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_reply_to(), output);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_title(), output);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_content(), output);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_content_type(), output);
  }

  // optional int32 f_playtime = 7;
  if (has_f_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_playtime(), output);
  }

  // repeated .pb_req_t_base_file f_attach_list = 8;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_attach_list(i), output);
  }

  // optional int32 f_report_time = 9;
  if (has_f_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_report_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_task_report)
}

::google::protobuf::uint8* pb_req_t_task_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_report_id(), target);
  }

  // optional .pb_req_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_sponsor(), target);
  }

  // optional .pb_req_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_reply_to(), target);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_title(), target);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_content(), target);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_content_type(), target);
  }

  // optional int32 f_playtime = 7;
  if (has_f_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_playtime(), target);
  }

  // repeated .pb_req_t_base_file f_attach_list = 8;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_attach_list(i), target);
  }

  // optional int32 f_report_time = 9;
  if (has_f_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_report_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_task_report)
  return target;
}

int pb_req_t_task_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_report_id = 1;
    if (has_f_report_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_report_id());
    }

    // optional .pb_req_t_user f_sponsor = 2;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

    // optional .pb_req_t_user f_reply_to = 3;
    if (has_f_reply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_reply_to());
    }

    // optional string f_title = 4;
    if (has_f_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_title());
    }

    // optional string f_content = 5;
    if (has_f_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_content());
    }

    // optional int32 f_content_type = 6;
    if (has_f_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_content_type());
    }

    // optional int32 f_playtime = 7;
    if (has_f_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_playtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_report_time = 9;
    if (has_f_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_report_time());
    }

  }
  // repeated .pb_req_t_base_file f_attach_list = 8;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_task_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_task_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_task_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_task_report::MergeFrom(const pb_req_t_task_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_report_id()) {
      set_f_report_id(from.f_report_id());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_req_t_user::MergeFrom(from.f_sponsor());
    }
    if (from.has_f_reply_to()) {
      mutable_f_reply_to()->::pb_req_t_user::MergeFrom(from.f_reply_to());
    }
    if (from.has_f_title()) {
      set_f_title(from.f_title());
    }
    if (from.has_f_content()) {
      set_f_content(from.f_content());
    }
    if (from.has_f_content_type()) {
      set_f_content_type(from.f_content_type());
    }
    if (from.has_f_playtime()) {
      set_f_playtime(from.f_playtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_report_time()) {
      set_f_report_time(from.f_report_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_task_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_task_report::CopyFrom(const pb_req_t_task_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_task_report::IsInitialized() const {

  return true;
}

void pb_req_t_task_report::Swap(pb_req_t_task_report* other) {
  if (other != this) {
    std::swap(f_report_id_, other->f_report_id_);
    std::swap(f_sponsor_, other->f_sponsor_);
    std::swap(f_reply_to_, other->f_reply_to_);
    std::swap(f_title_, other->f_title_);
    std::swap(f_content_, other->f_content_);
    std::swap(f_content_type_, other->f_content_type_);
    std::swap(f_playtime_, other->f_playtime_);
    f_attach_list_.Swap(&other->f_attach_list_);
    std::swap(f_report_time_, other->f_report_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_task_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_task_report_descriptor_;
  metadata.reflection = pb_req_t_task_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_task::kFTaskIdFieldNumber;
const int pb_req_t_task::kFTaskTypeFieldNumber;
const int pb_req_t_task::kFPrjIdFieldNumber;
const int pb_req_t_task::kFTaskDescFieldNumber;
const int pb_req_t_task::kFTaskDescTypeFieldNumber;
const int pb_req_t_task::kFPlaytimeFieldNumber;
const int pb_req_t_task::kFSponsorFieldNumber;
const int pb_req_t_task::kFMembersFieldNumber;
const int pb_req_t_task::kFPositionFieldNumber;
const int pb_req_t_task::kFTaskStatusFieldNumber;
const int pb_req_t_task::kFAttachListFieldNumber;
const int pb_req_t_task::kFReportListFieldNumber;
const int pb_req_t_task::kFTaskBeginFieldNumber;
const int pb_req_t_task::kFTaskEndFieldNumber;
#endif  // !_MSC_VER

pb_req_t_task::pb_req_t_task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_task)
}

void pb_req_t_task::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
}

pb_req_t_task::pb_req_t_task(const pb_req_t_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_task)
}

void pb_req_t_task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_type_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_type_ = 0;
  f_playtime_ = 0;
  f_sponsor_ = NULL;
  f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_status_ = 0;
  f_task_begin_ = 0;
  f_task_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_task::~pb_req_t_task() {
  // @@protoc_insertion_point(destructor:pb_req_t_task)
  SharedDtor();
}

void pb_req_t_task::SharedDtor() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
  }
}

void pb_req_t_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_task_descriptor_;
}

const pb_req_t_task& pb_req_t_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_task* pb_req_t_task::default_instance_ = NULL;

pb_req_t_task* pb_req_t_task::New() const {
  return new pb_req_t_task;
}

void pb_req_t_task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_task_type_, f_task_desc_type_);
    if (has_f_task_id()) {
      if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_id_->clear();
      }
    }
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_task_desc()) {
      if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_desc_->clear();
      }
    }
    f_playtime_ = 0;
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 13056) {
    ZR_(f_task_begin_, f_task_end_);
    if (has_f_position()) {
      if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_position_->clear();
      }
    }
    f_task_status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_members_.Clear();
  f_attach_list_.Clear();
  f_report_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_id().data(), this->f_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_task_type;
        break;
      }

      // optional int32 f_task_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_type_)));
          set_has_f_task_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_prj_id;
        break;
      }

      // optional string f_prj_id = 3;
      case 3: {
        if (tag == 26) {
         parse_f_prj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_task_desc;
        break;
      }

      // optional string f_task_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_f_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_desc().data(), this->f_task_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_task_desc_type;
        break;
      }

      // optional int32 f_task_desc_type = 5;
      case 5: {
        if (tag == 40) {
         parse_f_task_desc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_desc_type_)));
          set_has_f_task_desc_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_playtime;
        break;
      }

      // optional int32 f_playtime = 6;
      case 6: {
        if (tag == 48) {
         parse_f_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_playtime_)));
          set_has_f_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_req_t_user f_sponsor = 7;
      case 7: {
        if (tag == 58) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        break;
      }

      // repeated .pb_req_t_user f_members = 8;
      case 8: {
        if (tag == 66) {
         parse_f_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        if (input->ExpectTag(74)) goto parse_f_position;
        break;
      }

      // optional string f_position = 9;
      case 9: {
        if (tag == 74) {
         parse_f_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_position().data(), this->f_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_task_status;
        break;
      }

      // optional int32 f_task_status = 10;
      case 10: {
        if (tag == 80) {
         parse_f_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_status_)));
          set_has_f_task_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_req_t_base_file f_attach_list = 11;
      case 11: {
        if (tag == 90) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        if (input->ExpectTag(98)) goto parse_f_report_list;
        break;
      }

      // repeated .pb_req_t_task_report f_report_list = 12;
      case 12: {
        if (tag == 98) {
         parse_f_report_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_report_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_report_list;
        if (input->ExpectTag(104)) goto parse_f_task_begin;
        break;
      }

      // optional int32 f_task_begin = 13;
      case 13: {
        if (tag == 104) {
         parse_f_task_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_begin_)));
          set_has_f_task_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_f_task_end;
        break;
      }

      // optional int32 f_task_end = 14;
      case 14: {
        if (tag == 112) {
         parse_f_task_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_end_)));
          set_has_f_task_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_task)
  return false;
#undef DO_
}

void pb_req_t_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_task_id(), output);
  }

  // optional int32 f_task_type = 2;
  if (has_f_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_task_type(), output);
  }

  // optional string f_prj_id = 3;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_prj_id(), output);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_task_desc(), output);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_task_desc_type(), output);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_playtime(), output);
  }

  // optional .pb_req_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_sponsor(), output);
  }

  // repeated .pb_req_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_members(i), output);
  }

  // optional string f_position = 9;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_position(), output);
  }

  // optional int32 f_task_status = 10;
  if (has_f_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->f_task_status(), output);
  }

  // repeated .pb_req_t_base_file f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_attach_list(i), output);
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->f_report_list(i), output);
  }

  // optional int32 f_task_begin = 13;
  if (has_f_task_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->f_task_begin(), output);
  }

  // optional int32 f_task_end = 14;
  if (has_f_task_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->f_task_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_task)
}

::google::protobuf::uint8* pb_req_t_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_task_id(), target);
  }

  // optional int32 f_task_type = 2;
  if (has_f_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_task_type(), target);
  }

  // optional string f_prj_id = 3;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_prj_id(), target);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_task_desc(), target);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_task_desc_type(), target);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_playtime(), target);
  }

  // optional .pb_req_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_sponsor(), target);
  }

  // repeated .pb_req_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_members(i), target);
  }

  // optional string f_position = 9;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_position(), target);
  }

  // optional int32 f_task_status = 10;
  if (has_f_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->f_task_status(), target);
  }

  // repeated .pb_req_t_base_file f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_attach_list(i), target);
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->f_report_list(i), target);
  }

  // optional int32 f_task_begin = 13;
  if (has_f_task_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->f_task_begin(), target);
  }

  // optional int32 f_task_end = 14;
  if (has_f_task_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->f_task_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_task)
  return target;
}

int pb_req_t_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_task_id = 1;
    if (has_f_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_id());
    }

    // optional int32 f_task_type = 2;
    if (has_f_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_type());
    }

    // optional string f_prj_id = 3;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional string f_task_desc = 4;
    if (has_f_task_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_desc());
    }

    // optional int32 f_task_desc_type = 5;
    if (has_f_task_desc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_desc_type());
    }

    // optional int32 f_playtime = 6;
    if (has_f_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_playtime());
    }

    // optional .pb_req_t_user f_sponsor = 7;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_position = 9;
    if (has_f_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_position());
    }

    // optional int32 f_task_status = 10;
    if (has_f_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_status());
    }

    // optional int32 f_task_begin = 13;
    if (has_f_task_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_begin());
    }

    // optional int32 f_task_end = 14;
    if (has_f_task_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_end());
    }

  }
  // repeated .pb_req_t_user f_members = 8;
  total_size += 1 * this->f_members_size();
  for (int i = 0; i < this->f_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_members(i));
  }

  // repeated .pb_req_t_base_file f_attach_list = 11;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  total_size += 1 * this->f_report_list_size();
  for (int i = 0; i < this->f_report_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_report_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_task::MergeFrom(const pb_req_t_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_members_.MergeFrom(from.f_members_);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  f_report_list_.MergeFrom(from.f_report_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_task_id()) {
      set_f_task_id(from.f_task_id());
    }
    if (from.has_f_task_type()) {
      set_f_task_type(from.f_task_type());
    }
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_task_desc()) {
      set_f_task_desc(from.f_task_desc());
    }
    if (from.has_f_task_desc_type()) {
      set_f_task_desc_type(from.f_task_desc_type());
    }
    if (from.has_f_playtime()) {
      set_f_playtime(from.f_playtime());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_req_t_user::MergeFrom(from.f_sponsor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_position()) {
      set_f_position(from.f_position());
    }
    if (from.has_f_task_status()) {
      set_f_task_status(from.f_task_status());
    }
    if (from.has_f_task_begin()) {
      set_f_task_begin(from.f_task_begin());
    }
    if (from.has_f_task_end()) {
      set_f_task_end(from.f_task_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_task::CopyFrom(const pb_req_t_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_task::IsInitialized() const {

  return true;
}

void pb_req_t_task::Swap(pb_req_t_task* other) {
  if (other != this) {
    std::swap(f_task_id_, other->f_task_id_);
    std::swap(f_task_type_, other->f_task_type_);
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_task_desc_, other->f_task_desc_);
    std::swap(f_task_desc_type_, other->f_task_desc_type_);
    std::swap(f_playtime_, other->f_playtime_);
    std::swap(f_sponsor_, other->f_sponsor_);
    f_members_.Swap(&other->f_members_);
    std::swap(f_position_, other->f_position_);
    std::swap(f_task_status_, other->f_task_status_);
    f_attach_list_.Swap(&other->f_attach_list_);
    f_report_list_.Swap(&other->f_report_list_);
    std::swap(f_task_begin_, other->f_task_begin_);
    std::swap(f_task_end_, other->f_task_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_task_descriptor_;
  metadata.reflection = pb_req_t_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_report::kFPhoneInfoFieldNumber;
const int pb_req_t_report::kFOsFieldNumber;
const int pb_req_t_report::kFSpFieldNumber;
const int pb_req_t_report::kFNetworkFieldNumber;
#endif  // !_MSC_VER

pb_req_t_report::pb_req_t_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_report)
}

void pb_req_t_report::InitAsDefaultInstance() {
}

pb_req_t_report::pb_req_t_report(const pb_req_t_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_report)
}

void pb_req_t_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_report::~pb_req_t_report() {
  // @@protoc_insertion_point(destructor:pb_req_t_report)
  SharedDtor();
}

void pb_req_t_report::SharedDtor() {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_info_;
  }
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_os_;
  }
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sp_;
  }
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_network_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_report_descriptor_;
}

const pb_req_t_report& pb_req_t_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_report* pb_req_t_report::default_instance_ = NULL;

pb_req_t_report* pb_req_t_report::New() const {
  return new pb_req_t_report;
}

void pb_req_t_report::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_f_phone_info()) {
      if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_info_->clear();
      }
    }
    if (has_f_os()) {
      if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_os_->clear();
      }
    }
    if (has_f_sp()) {
      if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sp_->clear();
      }
    }
    if (has_f_network()) {
      if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_network_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_phone_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone_info().data(), this->f_phone_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_os;
        break;
      }

      // optional string f_os = 2;
      case 2: {
        if (tag == 18) {
         parse_f_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_os().data(), this->f_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_sp;
        break;
      }

      // optional string f_sp = 3;
      case 3: {
        if (tag == 26) {
         parse_f_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sp().data(), this->f_sp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_network;
        break;
      }

      // optional string f_network = 4;
      case 4: {
        if (tag == 34) {
         parse_f_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_network().data(), this->f_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_report)
  return false;
#undef DO_
}

void pb_req_t_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_report)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_phone_info(), output);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_os(), output);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_sp(), output);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_network(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_report)
}

::google::protobuf::uint8* pb_req_t_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_report)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_phone_info(), target);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_os(), target);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_sp(), target);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_network(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_report)
  return target;
}

int pb_req_t_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_phone_info = 1;
    if (has_f_phone_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone_info());
    }

    // optional string f_os = 2;
    if (has_f_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_os());
    }

    // optional string f_sp = 3;
    if (has_f_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sp());
    }

    // optional string f_network = 4;
    if (has_f_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_network());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_report::MergeFrom(const pb_req_t_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_phone_info()) {
      set_f_phone_info(from.f_phone_info());
    }
    if (from.has_f_os()) {
      set_f_os(from.f_os());
    }
    if (from.has_f_sp()) {
      set_f_sp(from.f_sp());
    }
    if (from.has_f_network()) {
      set_f_network(from.f_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_report::CopyFrom(const pb_req_t_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_report::IsInitialized() const {

  return true;
}

void pb_req_t_report::Swap(pb_req_t_report* other) {
  if (other != this) {
    std::swap(f_phone_info_, other->f_phone_info_);
    std::swap(f_os_, other->f_os_);
    std::swap(f_sp_, other->f_sp_);
    std::swap(f_network_, other->f_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_report_descriptor_;
  metadata.reflection = pb_req_t_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_user_data_req::kFFlagFieldNumber;
const int pb_req_t_user_data_req::kFSArgsFieldNumber;
const int pb_req_t_user_data_req::kFPageNOFieldNumber;
const int pb_req_t_user_data_req::kFPageSizeFieldNumber;
#endif  // !_MSC_VER

pb_req_t_user_data_req::pb_req_t_user_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_user_data_req)
}

void pb_req_t_user_data_req::InitAsDefaultInstance() {
}

pb_req_t_user_data_req::pb_req_t_user_data_req(const pb_req_t_user_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_user_data_req)
}

void pb_req_t_user_data_req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_flag_ = 0;
  f_pageno_ = 0;
  f_page_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_user_data_req::~pb_req_t_user_data_req() {
  // @@protoc_insertion_point(destructor:pb_req_t_user_data_req)
  SharedDtor();
}

void pb_req_t_user_data_req::SharedDtor() {
  if (f_page_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_page_size_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_user_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_user_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_user_data_req_descriptor_;
}

const pb_req_t_user_data_req& pb_req_t_user_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_user_data_req* pb_req_t_user_data_req::default_instance_ = NULL;

pb_req_t_user_data_req* pb_req_t_user_data_req::New() const {
  return new pb_req_t_user_data_req;
}

void pb_req_t_user_data_req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_user_data_req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(f_flag_, f_pageno_);
    if (has_f_page_size()) {
      if (f_page_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_page_size_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_s_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_user_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_user_data_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_flag_)));
          set_has_f_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_s_args;
        break;
      }

      // repeated string f_s_args = 2;
      case 2: {
        if (tag == 18) {
         parse_f_s_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_s_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_s_args(this->f_s_args_size() - 1).data(),
            this->f_s_args(this->f_s_args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_s_args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_s_args;
        if (input->ExpectTag(24)) goto parse_f_pageNO;
        break;
      }

      // optional int32 f_pageNO = 3;
      case 3: {
        if (tag == 24) {
         parse_f_pageNO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_pageno_)));
          set_has_f_pageno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_page_size;
        break;
      }

      // optional string f_page_size = 4;
      case 4: {
        if (tag == 34) {
         parse_f_page_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_page_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_page_size().data(), this->f_page_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_page_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_user_data_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_user_data_req)
  return false;
#undef DO_
}

void pb_req_t_user_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_user_data_req)
  // optional int32 f_flag = 1;
  if (has_f_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_flag(), output);
  }

  // repeated string f_s_args = 2;
  for (int i = 0; i < this->f_s_args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_s_args(i).data(), this->f_s_args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_s_args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->f_s_args(i), output);
  }

  // optional int32 f_pageNO = 3;
  if (has_f_pageno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_pageno(), output);
  }

  // optional string f_page_size = 4;
  if (has_f_page_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_page_size().data(), this->f_page_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_page_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_page_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_user_data_req)
}

::google::protobuf::uint8* pb_req_t_user_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_user_data_req)
  // optional int32 f_flag = 1;
  if (has_f_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_flag(), target);
  }

  // repeated string f_s_args = 2;
  for (int i = 0; i < this->f_s_args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_s_args(i).data(), this->f_s_args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_s_args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->f_s_args(i), target);
  }

  // optional int32 f_pageNO = 3;
  if (has_f_pageno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_pageno(), target);
  }

  // optional string f_page_size = 4;
  if (has_f_page_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_page_size().data(), this->f_page_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_page_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_page_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_user_data_req)
  return target;
}

int pb_req_t_user_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_flag = 1;
    if (has_f_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_flag());
    }

    // optional int32 f_pageNO = 3;
    if (has_f_pageno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_pageno());
    }

    // optional string f_page_size = 4;
    if (has_f_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_page_size());
    }

  }
  // repeated string f_s_args = 2;
  total_size += 1 * this->f_s_args_size();
  for (int i = 0; i < this->f_s_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_s_args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_user_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_user_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_user_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_user_data_req::MergeFrom(const pb_req_t_user_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_s_args_.MergeFrom(from.f_s_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_flag()) {
      set_f_flag(from.f_flag());
    }
    if (from.has_f_pageno()) {
      set_f_pageno(from.f_pageno());
    }
    if (from.has_f_page_size()) {
      set_f_page_size(from.f_page_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_user_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_user_data_req::CopyFrom(const pb_req_t_user_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_user_data_req::IsInitialized() const {

  return true;
}

void pb_req_t_user_data_req::Swap(pb_req_t_user_data_req* other) {
  if (other != this) {
    std::swap(f_flag_, other->f_flag_);
    f_s_args_.Swap(&other->f_s_args_);
    std::swap(f_pageno_, other->f_pageno_);
    std::swap(f_page_size_, other->f_page_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_user_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_user_data_req_descriptor_;
  metadata.reflection = pb_req_t_user_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_milestore::kFTimeFieldNumber;
const int pb_req_t_milestore::kFEventFieldNumber;
#endif  // !_MSC_VER

pb_req_t_milestore::pb_req_t_milestore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_milestore)
}

void pb_req_t_milestore::InitAsDefaultInstance() {
}

pb_req_t_milestore::pb_req_t_milestore(const pb_req_t_milestore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_milestore)
}

void pb_req_t_milestore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_time_ = 0;
  f_event_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_milestore::~pb_req_t_milestore() {
  // @@protoc_insertion_point(destructor:pb_req_t_milestore)
  SharedDtor();
}

void pb_req_t_milestore::SharedDtor() {
  if (f_event_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_event_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_milestore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_milestore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_milestore_descriptor_;
}

const pb_req_t_milestore& pb_req_t_milestore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_milestore* pb_req_t_milestore::default_instance_ = NULL;

pb_req_t_milestore* pb_req_t_milestore::New() const {
  return new pb_req_t_milestore;
}

void pb_req_t_milestore::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_time_ = 0;
    if (has_f_event()) {
      if (f_event_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_event_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_milestore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_milestore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_event;
        break;
      }

      // optional string f_event = 2;
      case 2: {
        if (tag == 18) {
         parse_f_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_event().data(), this->f_event().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_milestore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_milestore)
  return false;
#undef DO_
}

void pb_req_t_milestore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_milestore)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_time(), output);
  }

  // optional string f_event = 2;
  if (has_f_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_event().data(), this->f_event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_milestore)
}

::google::protobuf::uint8* pb_req_t_milestore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_milestore)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_time(), target);
  }

  // optional string f_event = 2;
  if (has_f_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_event().data(), this->f_event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_milestore)
  return target;
}

int pb_req_t_milestore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_time = 1;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

    // optional string f_event = 2;
    if (has_f_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_milestore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_milestore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_milestore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_milestore::MergeFrom(const pb_req_t_milestore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
    if (from.has_f_event()) {
      set_f_event(from.f_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_milestore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_milestore::CopyFrom(const pb_req_t_milestore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_milestore::IsInitialized() const {

  return true;
}

void pb_req_t_milestore::Swap(pb_req_t_milestore* other) {
  if (other != this) {
    std::swap(f_time_, other->f_time_);
    std::swap(f_event_, other->f_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_milestore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_milestore_descriptor_;
  metadata.reflection = pb_req_t_milestore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_department::kFIdFieldNumber;
const int pb_req_t_department::kFNameFieldNumber;
#endif  // !_MSC_VER

pb_req_t_department::pb_req_t_department()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_department)
}

void pb_req_t_department::InitAsDefaultInstance() {
}

pb_req_t_department::pb_req_t_department(const pb_req_t_department& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_department)
}

void pb_req_t_department::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_department::~pb_req_t_department() {
  // @@protoc_insertion_point(destructor:pb_req_t_department)
  SharedDtor();
}

void pb_req_t_department::SharedDtor() {
  if (f_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_id_;
  }
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_department::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_department::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_department_descriptor_;
}

const pb_req_t_department& pb_req_t_department::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_department* pb_req_t_department::default_instance_ = NULL;

pb_req_t_department* pb_req_t_department::New() const {
  return new pb_req_t_department;
}

void pb_req_t_department::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_id()) {
      if (f_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_id_->clear();
      }
    }
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_department::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_department)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_id().data(), this->f_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_department)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_department)
  return false;
#undef DO_
}

void pb_req_t_department::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_department)
  // optional string f_id = 1;
  if (has_f_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_id(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_department)
}

::google::protobuf::uint8* pb_req_t_department::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_department)
  // optional string f_id = 1;
  if (has_f_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_id(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_department)
  return target;
}

int pb_req_t_department::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_id = 1;
    if (has_f_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_id());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_department::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_department* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_department*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_department::MergeFrom(const pb_req_t_department& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_id()) {
      set_f_id(from.f_id());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_department::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_department::CopyFrom(const pb_req_t_department& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_department::IsInitialized() const {

  return true;
}

void pb_req_t_department::Swap(pb_req_t_department* other) {
  if (other != this) {
    std::swap(f_id_, other->f_id_);
    std::swap(f_name_, other->f_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_department::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_department_descriptor_;
  metadata.reflection = pb_req_t_department_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_req::kFCmdFieldNumber;
const int pb_req_t_req::kFIArgsFieldNumber;
const int pb_req_t_req::kFSArgsFieldNumber;
const int pb_req_t_req::kFAttchFieldNumber;
const int pb_req_t_req::kFProjectFieldNumber;
const int pb_req_t_req::kFPrjMemberFieldNumber;
const int pb_req_t_req::kFTaskFieldNumber;
const int pb_req_t_req::kFReportFieldNumber;
const int pb_req_t_req::kFUserDataReqFieldNumber;
const int pb_req_t_req::kFMsgBookFieldNumber;
const int pb_req_t_req::kFMsgHotspotFieldNumber;
const int pb_req_t_req::kFMilestoreFieldNumber;
const int pb_req_t_req::kFDepartmentFieldNumber;
const int pb_req_t_req::kFTurnDepartmentFieldNumber;
#endif  // !_MSC_VER

pb_req_t_req::pb_req_t_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_req)
}

void pb_req_t_req::InitAsDefaultInstance() {
  f_project_ = const_cast< ::pb_req_t_project*>(&::pb_req_t_project::default_instance());
  f_task_ = const_cast< ::pb_req_t_task*>(&::pb_req_t_task::default_instance());
  f_report_ = const_cast< ::pb_req_t_report*>(&::pb_req_t_report::default_instance());
  f_user_data_req_ = const_cast< ::pb_req_t_user_data_req*>(&::pb_req_t_user_data_req::default_instance());
  f_msg_book_ = const_cast< ::pb_req_t_msg_book*>(&::pb_req_t_msg_book::default_instance());
  f_msg_hotspot_ = const_cast< ::pb_req_t_msg_hotspot*>(&::pb_req_t_msg_hotspot::default_instance());
  f_turn_department_ = const_cast< ::pb_req_t_department*>(&::pb_req_t_department::default_instance());
}

pb_req_t_req::pb_req_t_req(const pb_req_t_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_req)
}

void pb_req_t_req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_cmd_ = 0;
  f_project_ = NULL;
  f_task_ = NULL;
  f_report_ = NULL;
  f_user_data_req_ = NULL;
  f_msg_book_ = NULL;
  f_msg_hotspot_ = NULL;
  f_turn_department_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_req::~pb_req_t_req() {
  // @@protoc_insertion_point(destructor:pb_req_t_req)
  SharedDtor();
}

void pb_req_t_req::SharedDtor() {
  if (this != default_instance_) {
    delete f_project_;
    delete f_task_;
    delete f_report_;
    delete f_user_data_req_;
    delete f_msg_book_;
    delete f_msg_hotspot_;
    delete f_turn_department_;
  }
}

void pb_req_t_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_req_descriptor_;
}

const pb_req_t_req& pb_req_t_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_req* pb_req_t_req::default_instance_ = NULL;

pb_req_t_req* pb_req_t_req::New() const {
  return new pb_req_t_req;
}

void pb_req_t_req::Clear() {
  if (_has_bits_[0 / 32] & 209) {
    f_cmd_ = 0;
    if (has_f_project()) {
      if (f_project_ != NULL) f_project_->::pb_req_t_project::Clear();
    }
    if (has_f_task()) {
      if (f_task_ != NULL) f_task_->::pb_req_t_task::Clear();
    }
    if (has_f_report()) {
      if (f_report_ != NULL) f_report_->::pb_req_t_report::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 9984) {
    if (has_f_user_data_req()) {
      if (f_user_data_req_ != NULL) f_user_data_req_->::pb_req_t_user_data_req::Clear();
    }
    if (has_f_msg_book()) {
      if (f_msg_book_ != NULL) f_msg_book_->::pb_req_t_msg_book::Clear();
    }
    if (has_f_msg_hotspot()) {
      if (f_msg_hotspot_ != NULL) f_msg_hotspot_->::pb_req_t_msg_hotspot::Clear();
    }
    if (has_f_turn_department()) {
      if (f_turn_department_ != NULL) f_turn_department_->::pb_req_t_department::Clear();
    }
  }
  f_i_args_.Clear();
  f_s_args_.Clear();
  f_attch_.Clear();
  f_prj_member_.Clear();
  f_milestore_.Clear();
  f_department_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_cmd_)));
          set_has_f_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_i_args;
        break;
      }

      // repeated int32 f_i_args = 2;
      case 2: {
        if (tag == 16) {
         parse_f_i_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_f_i_args())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_f_i_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_i_args;
        if (input->ExpectTag(26)) goto parse_f_s_args;
        break;
      }

      // repeated string f_s_args = 3;
      case 3: {
        if (tag == 26) {
         parse_f_s_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_s_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_s_args(this->f_s_args_size() - 1).data(),
            this->f_s_args(this->f_s_args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_s_args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_s_args;
        if (input->ExpectTag(34)) goto parse_f_attch;
        break;
      }

      // repeated .pb_req_t_attach f_attch = 4;
      case 4: {
        if (tag == 34) {
         parse_f_attch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_attch;
        if (input->ExpectTag(42)) goto parse_f_project;
        break;
      }

      // optional .pb_req_t_project f_project = 5;
      case 5: {
        if (tag == 42) {
         parse_f_project:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_project()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_member;
        break;
      }

      // repeated .pb_req_t_user f_prj_member = 6;
      case 6: {
        if (tag == 50) {
         parse_f_prj_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_member;
        if (input->ExpectTag(58)) goto parse_f_task;
        break;
      }

      // optional .pb_req_t_task f_task = 7;
      case 7: {
        if (tag == 58) {
         parse_f_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_report;
        break;
      }

      // optional .pb_req_t_report f_report = 8;
      case 8: {
        if (tag == 66) {
         parse_f_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_user_data_req;
        break;
      }

      // optional .pb_req_t_user_data_req f_user_data_req = 9;
      case 9: {
        if (tag == 74) {
         parse_f_user_data_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_user_data_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_msg_book;
        break;
      }

      // optional .pb_req_t_msg_book f_msg_book = 10;
      case 10: {
        if (tag == 82) {
         parse_f_msg_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_book()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_msg_hotspot;
        break;
      }

      // optional .pb_req_t_msg_hotspot f_msg_hotspot = 11;
      case 11: {
        if (tag == 90) {
         parse_f_msg_hotspot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_hotspot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_milestore;
        break;
      }

      // repeated .pb_req_t_milestore f_milestore = 12;
      case 12: {
        if (tag == 98) {
         parse_f_milestore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_milestore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_milestore;
        if (input->ExpectTag(106)) goto parse_f_department;
        break;
      }

      // repeated .pb_req_t_department f_department = 13;
      case 13: {
        if (tag == 106) {
         parse_f_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_department;
        if (input->ExpectTag(114)) goto parse_f_turn_department;
        break;
      }

      // optional .pb_req_t_department f_turn_department = 14;
      case 14: {
        if (tag == 114) {
         parse_f_turn_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_turn_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_req)
  return false;
#undef DO_
}

void pb_req_t_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_req)
  // optional int32 f_cmd = 1;
  if (has_f_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_cmd(), output);
  }

  // repeated int32 f_i_args = 2;
  for (int i = 0; i < this->f_i_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->f_i_args(i), output);
  }

  // repeated string f_s_args = 3;
  for (int i = 0; i < this->f_s_args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_s_args(i).data(), this->f_s_args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_s_args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->f_s_args(i), output);
  }

  // repeated .pb_req_t_attach f_attch = 4;
  for (int i = 0; i < this->f_attch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->f_attch(i), output);
  }

  // optional .pb_req_t_project f_project = 5;
  if (has_f_project()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_project(), output);
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_prj_member(i), output);
  }

  // optional .pb_req_t_task f_task = 7;
  if (has_f_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_task(), output);
  }

  // optional .pb_req_t_report f_report = 8;
  if (has_f_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_report(), output);
  }

  // optional .pb_req_t_user_data_req f_user_data_req = 9;
  if (has_f_user_data_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->f_user_data_req(), output);
  }

  // optional .pb_req_t_msg_book f_msg_book = 10;
  if (has_f_msg_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f_msg_book(), output);
  }

  // optional .pb_req_t_msg_hotspot f_msg_hotspot = 11;
  if (has_f_msg_hotspot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_msg_hotspot(), output);
  }

  // repeated .pb_req_t_milestore f_milestore = 12;
  for (int i = 0; i < this->f_milestore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->f_milestore(i), output);
  }

  // repeated .pb_req_t_department f_department = 13;
  for (int i = 0; i < this->f_department_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->f_department(i), output);
  }

  // optional .pb_req_t_department f_turn_department = 14;
  if (has_f_turn_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->f_turn_department(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_req)
}

::google::protobuf::uint8* pb_req_t_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_req)
  // optional int32 f_cmd = 1;
  if (has_f_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_cmd(), target);
  }

  // repeated int32 f_i_args = 2;
  for (int i = 0; i < this->f_i_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->f_i_args(i), target);
  }

  // repeated string f_s_args = 3;
  for (int i = 0; i < this->f_s_args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_s_args(i).data(), this->f_s_args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_s_args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->f_s_args(i), target);
  }

  // repeated .pb_req_t_attach f_attch = 4;
  for (int i = 0; i < this->f_attch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->f_attch(i), target);
  }

  // optional .pb_req_t_project f_project = 5;
  if (has_f_project()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_project(), target);
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_prj_member(i), target);
  }

  // optional .pb_req_t_task f_task = 7;
  if (has_f_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_task(), target);
  }

  // optional .pb_req_t_report f_report = 8;
  if (has_f_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_report(), target);
  }

  // optional .pb_req_t_user_data_req f_user_data_req = 9;
  if (has_f_user_data_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->f_user_data_req(), target);
  }

  // optional .pb_req_t_msg_book f_msg_book = 10;
  if (has_f_msg_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f_msg_book(), target);
  }

  // optional .pb_req_t_msg_hotspot f_msg_hotspot = 11;
  if (has_f_msg_hotspot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_msg_hotspot(), target);
  }

  // repeated .pb_req_t_milestore f_milestore = 12;
  for (int i = 0; i < this->f_milestore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->f_milestore(i), target);
  }

  // repeated .pb_req_t_department f_department = 13;
  for (int i = 0; i < this->f_department_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->f_department(i), target);
  }

  // optional .pb_req_t_department f_turn_department = 14;
  if (has_f_turn_department()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->f_turn_department(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_req)
  return target;
}

int pb_req_t_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_cmd = 1;
    if (has_f_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_cmd());
    }

    // optional .pb_req_t_project f_project = 5;
    if (has_f_project()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_project());
    }

    // optional .pb_req_t_task f_task = 7;
    if (has_f_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task());
    }

    // optional .pb_req_t_report f_report = 8;
    if (has_f_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_report());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb_req_t_user_data_req f_user_data_req = 9;
    if (has_f_user_data_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_user_data_req());
    }

    // optional .pb_req_t_msg_book f_msg_book = 10;
    if (has_f_msg_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_book());
    }

    // optional .pb_req_t_msg_hotspot f_msg_hotspot = 11;
    if (has_f_msg_hotspot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_hotspot());
    }

    // optional .pb_req_t_department f_turn_department = 14;
    if (has_f_turn_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_turn_department());
    }

  }
  // repeated int32 f_i_args = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->f_i_args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->f_i_args(i));
    }
    total_size += 1 * this->f_i_args_size() + data_size;
  }

  // repeated string f_s_args = 3;
  total_size += 1 * this->f_s_args_size();
  for (int i = 0; i < this->f_s_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_s_args(i));
  }

  // repeated .pb_req_t_attach f_attch = 4;
  total_size += 1 * this->f_attch_size();
  for (int i = 0; i < this->f_attch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attch(i));
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  total_size += 1 * this->f_prj_member_size();
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_member(i));
  }

  // repeated .pb_req_t_milestore f_milestore = 12;
  total_size += 1 * this->f_milestore_size();
  for (int i = 0; i < this->f_milestore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_milestore(i));
  }

  // repeated .pb_req_t_department f_department = 13;
  total_size += 1 * this->f_department_size();
  for (int i = 0; i < this->f_department_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_department(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_req::MergeFrom(const pb_req_t_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_i_args_.MergeFrom(from.f_i_args_);
  f_s_args_.MergeFrom(from.f_s_args_);
  f_attch_.MergeFrom(from.f_attch_);
  f_prj_member_.MergeFrom(from.f_prj_member_);
  f_milestore_.MergeFrom(from.f_milestore_);
  f_department_.MergeFrom(from.f_department_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_cmd()) {
      set_f_cmd(from.f_cmd());
    }
    if (from.has_f_project()) {
      mutable_f_project()->::pb_req_t_project::MergeFrom(from.f_project());
    }
    if (from.has_f_task()) {
      mutable_f_task()->::pb_req_t_task::MergeFrom(from.f_task());
    }
    if (from.has_f_report()) {
      mutable_f_report()->::pb_req_t_report::MergeFrom(from.f_report());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_user_data_req()) {
      mutable_f_user_data_req()->::pb_req_t_user_data_req::MergeFrom(from.f_user_data_req());
    }
    if (from.has_f_msg_book()) {
      mutable_f_msg_book()->::pb_req_t_msg_book::MergeFrom(from.f_msg_book());
    }
    if (from.has_f_msg_hotspot()) {
      mutable_f_msg_hotspot()->::pb_req_t_msg_hotspot::MergeFrom(from.f_msg_hotspot());
    }
    if (from.has_f_turn_department()) {
      mutable_f_turn_department()->::pb_req_t_department::MergeFrom(from.f_turn_department());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_req::CopyFrom(const pb_req_t_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_req::IsInitialized() const {

  return true;
}

void pb_req_t_req::Swap(pb_req_t_req* other) {
  if (other != this) {
    std::swap(f_cmd_, other->f_cmd_);
    f_i_args_.Swap(&other->f_i_args_);
    f_s_args_.Swap(&other->f_s_args_);
    f_attch_.Swap(&other->f_attch_);
    std::swap(f_project_, other->f_project_);
    f_prj_member_.Swap(&other->f_prj_member_);
    std::swap(f_task_, other->f_task_);
    std::swap(f_report_, other->f_report_);
    std::swap(f_user_data_req_, other->f_user_data_req_);
    std::swap(f_msg_book_, other->f_msg_book_);
    std::swap(f_msg_hotspot_, other->f_msg_hotspot_);
    f_milestore_.Swap(&other->f_milestore_);
    f_department_.Swap(&other->f_department_);
    std::swap(f_turn_department_, other->f_turn_department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_req_descriptor_;
  metadata.reflection = pb_req_t_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
