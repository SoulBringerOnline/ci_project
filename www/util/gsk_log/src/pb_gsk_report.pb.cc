// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_gsk_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pb_report_t_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_report_t_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_report_t_client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_report_t_client_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_report_t_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_report_t_report_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto() {
  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_gsk_report.proto");
  GOOGLE_CHECK(file != NULL);
  pb_report_t_base_info_descriptor_ = file->message_type(0);
  static const int pb_report_t_base_info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_clt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_dye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_company_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_years_of_working_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, f_job_title_),
  };
  pb_report_t_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_report_t_base_info_descriptor_,
      pb_report_t_base_info::default_instance_,
      pb_report_t_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_report_t_base_info));
  pb_report_t_client_descriptor_ = file->message_type(1);
  static const int pb_report_t_client_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, f_phone_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, f_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, f_sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, f_network_),
  };
  pb_report_t_client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_report_t_client_descriptor_,
      pb_report_t_client::default_instance_,
      pb_report_t_client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_report_t_client));
  pb_report_t_report_descriptor_ = file->message_type(2);
  static const int pb_report_t_report_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_i_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_s_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, f_client_),
  };
  pb_report_t_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_report_t_report_descriptor_,
      pb_report_t_report::default_instance_,
      pb_report_t_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_report_t_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_report_t_report));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fgsk_5freport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_report_t_base_info_descriptor_, &pb_report_t_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_report_t_client_descriptor_, &pb_report_t_client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_report_t_report_descriptor_, &pb_report_t_report::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto() {
  delete pb_report_t_base_info::default_instance_;
  delete pb_report_t_base_info_reflection_;
  delete pb_report_t_client::default_instance_;
  delete pb_report_t_client_reflection_;
  delete pb_report_t_report::default_instance_;
  delete pb_report_t_report_reflection_;
}

void protobuf_AddDesc_pb_5fgsk_5freport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023pb_gsk_report.proto\"\364\001\n\025pb_report_t_ba"
    "se_info\022\r\n\005f_uin\030\001 \001(\r\022\r\n\005f_clt\030\002 \001(\005\022\017\n"
    "\007f_phone\030\003 \001(\t\022\r\n\005f_dye\030\004 \001(\005\022\014\n\004f_ip\030\005 "
    "\001(\t\022\016\n\006f_name\030\006 \001(\t\022\022\n\nf_province\030\007 \001(\t\022"
    "\016\n\006f_city\030\010 \001(\t\022\026\n\016f_company_type\030\t \001(\t\022"
    "\032\n\022f_years_of_working\030\n \001(\t\022\022\n\nf_job_typ"
    "e\030\013 \001(\t\022\023\n\013f_job_title\030\014 \001(\t\"Y\n\022pb_repor"
    "t_t_client\022\024\n\014f_phone_info\030\001 \001(\t\022\014\n\004f_os"
    "\030\002 \001(\t\022\014\n\004f_sp\030\003 \001(\t\022\021\n\tf_network\030\004 \001(\t\""
    "\270\001\n\022pb_report_t_report\022\022\n\nf_msg_type\030\001 \001"
    "(\005\022\017\n\007f_i_cmd\030\002 \001(\005\022\017\n\007f_s_cmd\030\003 \001(\t\022\016\n\006"
    "f_time\030\004 \001(\005\022\r\n\005f_log\030\005 \001(\t\022&\n\006f_info\030\006 "
    "\001(\0132\026.pb_report_t_base_info\022%\n\010f_client\030"
    "\007 \001(\0132\023.pb_report_t_client", 546);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_gsk_report.proto", &protobuf_RegisterTypes);
  pb_report_t_base_info::default_instance_ = new pb_report_t_base_info();
  pb_report_t_client::default_instance_ = new pb_report_t_client();
  pb_report_t_report::default_instance_ = new pb_report_t_report();
  pb_report_t_base_info::default_instance_->InitAsDefaultInstance();
  pb_report_t_client::default_instance_->InitAsDefaultInstance();
  pb_report_t_report::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fgsk_5freport_2eproto {
  StaticDescriptorInitializer_pb_5fgsk_5freport_2eproto() {
    protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  }
} static_descriptor_initializer_pb_5fgsk_5freport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pb_report_t_base_info::kFUinFieldNumber;
const int pb_report_t_base_info::kFCltFieldNumber;
const int pb_report_t_base_info::kFPhoneFieldNumber;
const int pb_report_t_base_info::kFDyeFieldNumber;
const int pb_report_t_base_info::kFIpFieldNumber;
const int pb_report_t_base_info::kFNameFieldNumber;
const int pb_report_t_base_info::kFProvinceFieldNumber;
const int pb_report_t_base_info::kFCityFieldNumber;
const int pb_report_t_base_info::kFCompanyTypeFieldNumber;
const int pb_report_t_base_info::kFYearsOfWorkingFieldNumber;
const int pb_report_t_base_info::kFJobTypeFieldNumber;
const int pb_report_t_base_info::kFJobTitleFieldNumber;
#endif  // !_MSC_VER

pb_report_t_base_info::pb_report_t_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_report_t_base_info)
}

void pb_report_t_base_info::InitAsDefaultInstance() {
}

pb_report_t_base_info::pb_report_t_base_info(const pb_report_t_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_report_t_base_info)
}

void pb_report_t_base_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_clt_ = 0;
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_dye_ = 0;
  f_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_report_t_base_info::~pb_report_t_base_info() {
  // @@protoc_insertion_point(destructor:pb_report_t_base_info)
  SharedDtor();
}

void pb_report_t_base_info::SharedDtor() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_ip_;
  }
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_years_of_working_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_title_;
  }
  if (this != default_instance_) {
  }
}

void pb_report_t_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_report_t_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_report_t_base_info_descriptor_;
}

const pb_report_t_base_info& pb_report_t_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  return *default_instance_;
}

pb_report_t_base_info* pb_report_t_base_info::default_instance_ = NULL;

pb_report_t_base_info* pb_report_t_base_info::New() const {
  return new pb_report_t_base_info;
}

void pb_report_t_base_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_report_t_base_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_uin_, f_clt_);
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    f_dye_ = 0;
    if (has_f_ip()) {
      if (f_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_ip_->clear();
      }
    }
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_f_company_type()) {
      if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_type_->clear();
      }
    }
    if (has_f_years_of_working()) {
      if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_years_of_working_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_job_title()) {
      if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_report_t_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_report_t_base_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_clt;
        break;
      }

      // optional int32 f_clt = 2;
      case 2: {
        if (tag == 16) {
         parse_f_clt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_clt_)));
          set_has_f_clt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_dye;
        break;
      }

      // optional int32 f_dye = 4;
      case 4: {
        if (tag == 32) {
         parse_f_dye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_dye_)));
          set_has_f_dye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_ip;
        break;
      }

      // optional string f_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_f_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_ip().data(), this->f_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_name;
        break;
      }

      // optional string f_name = 6;
      case 6: {
        if (tag == 50) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_province;
        break;
      }

      // optional string f_province = 7;
      case 7: {
        if (tag == 58) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_city;
        break;
      }

      // optional string f_city = 8;
      case 8: {
        if (tag == 66) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_company_type;
        break;
      }

      // optional string f_company_type = 9;
      case 9: {
        if (tag == 74) {
         parse_f_company_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company_type().data(), this->f_company_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_years_of_working;
        break;
      }

      // optional string f_years_of_working = 10;
      case 10: {
        if (tag == 82) {
         parse_f_years_of_working:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_years_of_working()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_years_of_working().data(), this->f_years_of_working().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_years_of_working");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 11;
      case 11: {
        if (tag == 90) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_job_title;
        break;
      }

      // optional string f_job_title = 12;
      case 12: {
        if (tag == 98) {
         parse_f_job_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_title().data(), this->f_job_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_report_t_base_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_report_t_base_info)
  return false;
#undef DO_
}

void pb_report_t_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_report_t_base_info)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional int32 f_clt = 2;
  if (has_f_clt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_clt(), output);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_phone(), output);
  }

  // optional int32 f_dye = 4;
  if (has_f_dye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_dye(), output);
  }

  // optional string f_ip = 5;
  if (has_f_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_ip().data(), this->f_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_ip(), output);
  }

  // optional string f_name = 6;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_name(), output);
  }

  // optional string f_province = 7;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_province(), output);
  }

  // optional string f_city = 8;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_city(), output);
  }

  // optional string f_company_type = 9;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_company_type(), output);
  }

  // optional string f_years_of_working = 10;
  if (has_f_years_of_working()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_years_of_working().data(), this->f_years_of_working().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_years_of_working");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_years_of_working(), output);
  }

  // optional string f_job_type = 11;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_job_type(), output);
  }

  // optional string f_job_title = 12;
  if (has_f_job_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_title().data(), this->f_job_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->f_job_title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_report_t_base_info)
}

::google::protobuf::uint8* pb_report_t_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report_t_base_info)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional int32 f_clt = 2;
  if (has_f_clt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_clt(), target);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_phone(), target);
  }

  // optional int32 f_dye = 4;
  if (has_f_dye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_dye(), target);
  }

  // optional string f_ip = 5;
  if (has_f_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_ip().data(), this->f_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_ip(), target);
  }

  // optional string f_name = 6;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_name(), target);
  }

  // optional string f_province = 7;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_province(), target);
  }

  // optional string f_city = 8;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_city(), target);
  }

  // optional string f_company_type = 9;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_company_type(), target);
  }

  // optional string f_years_of_working = 10;
  if (has_f_years_of_working()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_years_of_working().data(), this->f_years_of_working().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_years_of_working");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_years_of_working(), target);
  }

  // optional string f_job_type = 11;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_job_type(), target);
  }

  // optional string f_job_title = 12;
  if (has_f_job_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_title().data(), this->f_job_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->f_job_title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report_t_base_info)
  return target;
}

int pb_report_t_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional int32 f_clt = 2;
    if (has_f_clt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_clt());
    }

    // optional string f_phone = 3;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional int32 f_dye = 4;
    if (has_f_dye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_dye());
    }

    // optional string f_ip = 5;
    if (has_f_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_ip());
    }

    // optional string f_name = 6;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_province = 7;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 8;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_company_type = 9;
    if (has_f_company_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company_type());
    }

    // optional string f_years_of_working = 10;
    if (has_f_years_of_working()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_years_of_working());
    }

    // optional string f_job_type = 11;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_job_title = 12;
    if (has_f_job_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_report_t_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_report_t_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_report_t_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_report_t_base_info::MergeFrom(const pb_report_t_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_clt()) {
      set_f_clt(from.f_clt());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_dye()) {
      set_f_dye(from.f_dye());
    }
    if (from.has_f_ip()) {
      set_f_ip(from.f_ip());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_company_type()) {
      set_f_company_type(from.f_company_type());
    }
    if (from.has_f_years_of_working()) {
      set_f_years_of_working(from.f_years_of_working());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_job_title()) {
      set_f_job_title(from.f_job_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_report_t_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_report_t_base_info::CopyFrom(const pb_report_t_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_report_t_base_info::IsInitialized() const {

  return true;
}

void pb_report_t_base_info::Swap(pb_report_t_base_info* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_clt_, other->f_clt_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_dye_, other->f_dye_);
    std::swap(f_ip_, other->f_ip_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_company_type_, other->f_company_type_);
    std::swap(f_years_of_working_, other->f_years_of_working_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_job_title_, other->f_job_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_report_t_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_report_t_base_info_descriptor_;
  metadata.reflection = pb_report_t_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_report_t_client::kFPhoneInfoFieldNumber;
const int pb_report_t_client::kFOsFieldNumber;
const int pb_report_t_client::kFSpFieldNumber;
const int pb_report_t_client::kFNetworkFieldNumber;
#endif  // !_MSC_VER

pb_report_t_client::pb_report_t_client()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_report_t_client)
}

void pb_report_t_client::InitAsDefaultInstance() {
}

pb_report_t_client::pb_report_t_client(const pb_report_t_client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_report_t_client)
}

void pb_report_t_client::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_report_t_client::~pb_report_t_client() {
  // @@protoc_insertion_point(destructor:pb_report_t_client)
  SharedDtor();
}

void pb_report_t_client::SharedDtor() {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_info_;
  }
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_os_;
  }
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sp_;
  }
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_network_;
  }
  if (this != default_instance_) {
  }
}

void pb_report_t_client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_report_t_client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_report_t_client_descriptor_;
}

const pb_report_t_client& pb_report_t_client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  return *default_instance_;
}

pb_report_t_client* pb_report_t_client::default_instance_ = NULL;

pb_report_t_client* pb_report_t_client::New() const {
  return new pb_report_t_client;
}

void pb_report_t_client::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_f_phone_info()) {
      if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_info_->clear();
      }
    }
    if (has_f_os()) {
      if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_os_->clear();
      }
    }
    if (has_f_sp()) {
      if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sp_->clear();
      }
    }
    if (has_f_network()) {
      if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_network_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_report_t_client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_report_t_client)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_phone_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone_info().data(), this->f_phone_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_os;
        break;
      }

      // optional string f_os = 2;
      case 2: {
        if (tag == 18) {
         parse_f_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_os().data(), this->f_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_sp;
        break;
      }

      // optional string f_sp = 3;
      case 3: {
        if (tag == 26) {
         parse_f_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sp().data(), this->f_sp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_network;
        break;
      }

      // optional string f_network = 4;
      case 4: {
        if (tag == 34) {
         parse_f_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_network().data(), this->f_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_report_t_client)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_report_t_client)
  return false;
#undef DO_
}

void pb_report_t_client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_report_t_client)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_phone_info(), output);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_os(), output);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_sp(), output);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_network(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_report_t_client)
}

::google::protobuf::uint8* pb_report_t_client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report_t_client)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_phone_info(), target);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_os(), target);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_sp(), target);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_network(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report_t_client)
  return target;
}

int pb_report_t_client::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_phone_info = 1;
    if (has_f_phone_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone_info());
    }

    // optional string f_os = 2;
    if (has_f_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_os());
    }

    // optional string f_sp = 3;
    if (has_f_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sp());
    }

    // optional string f_network = 4;
    if (has_f_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_network());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_report_t_client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_report_t_client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_report_t_client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_report_t_client::MergeFrom(const pb_report_t_client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_phone_info()) {
      set_f_phone_info(from.f_phone_info());
    }
    if (from.has_f_os()) {
      set_f_os(from.f_os());
    }
    if (from.has_f_sp()) {
      set_f_sp(from.f_sp());
    }
    if (from.has_f_network()) {
      set_f_network(from.f_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_report_t_client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_report_t_client::CopyFrom(const pb_report_t_client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_report_t_client::IsInitialized() const {

  return true;
}

void pb_report_t_client::Swap(pb_report_t_client* other) {
  if (other != this) {
    std::swap(f_phone_info_, other->f_phone_info_);
    std::swap(f_os_, other->f_os_);
    std::swap(f_sp_, other->f_sp_);
    std::swap(f_network_, other->f_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_report_t_client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_report_t_client_descriptor_;
  metadata.reflection = pb_report_t_client_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_report_t_report::kFMsgTypeFieldNumber;
const int pb_report_t_report::kFICmdFieldNumber;
const int pb_report_t_report::kFSCmdFieldNumber;
const int pb_report_t_report::kFTimeFieldNumber;
const int pb_report_t_report::kFLogFieldNumber;
const int pb_report_t_report::kFInfoFieldNumber;
const int pb_report_t_report::kFClientFieldNumber;
#endif  // !_MSC_VER

pb_report_t_report::pb_report_t_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_report_t_report)
}

void pb_report_t_report::InitAsDefaultInstance() {
  f_info_ = const_cast< ::pb_report_t_base_info*>(&::pb_report_t_base_info::default_instance());
  f_client_ = const_cast< ::pb_report_t_client*>(&::pb_report_t_client::default_instance());
}

pb_report_t_report::pb_report_t_report(const pb_report_t_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_report_t_report)
}

void pb_report_t_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_msg_type_ = 0;
  f_i_cmd_ = 0;
  f_s_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_time_ = 0;
  f_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_info_ = NULL;
  f_client_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_report_t_report::~pb_report_t_report() {
  // @@protoc_insertion_point(destructor:pb_report_t_report)
  SharedDtor();
}

void pb_report_t_report::SharedDtor() {
  if (f_s_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_s_cmd_;
  }
  if (f_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_log_;
  }
  if (this != default_instance_) {
    delete f_info_;
    delete f_client_;
  }
}

void pb_report_t_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_report_t_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_report_t_report_descriptor_;
}

const pb_report_t_report& pb_report_t_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  return *default_instance_;
}

pb_report_t_report* pb_report_t_report::default_instance_ = NULL;

pb_report_t_report* pb_report_t_report::New() const {
  return new pb_report_t_report;
}

void pb_report_t_report::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_report_t_report*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_msg_type_, f_i_cmd_);
    if (has_f_s_cmd()) {
      if (f_s_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_s_cmd_->clear();
      }
    }
    f_time_ = 0;
    if (has_f_log()) {
      if (f_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_log_->clear();
      }
    }
    if (has_f_info()) {
      if (f_info_ != NULL) f_info_->::pb_report_t_base_info::Clear();
    }
    if (has_f_client()) {
      if (f_client_ != NULL) f_client_->::pb_report_t_client::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_report_t_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_report_t_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_msg_type_)));
          set_has_f_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_i_cmd;
        break;
      }

      // optional int32 f_i_cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_f_i_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_i_cmd_)));
          set_has_f_i_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_s_cmd;
        break;
      }

      // optional string f_s_cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_f_s_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_s_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_s_cmd().data(), this->f_s_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_s_cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_time;
        break;
      }

      // optional int32 f_time = 4;
      case 4: {
        if (tag == 32) {
         parse_f_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_log;
        break;
      }

      // optional string f_log = 5;
      case 5: {
        if (tag == 42) {
         parse_f_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_log().data(), this->f_log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_info;
        break;
      }

      // optional .pb_report_t_base_info f_info = 6;
      case 6: {
        if (tag == 50) {
         parse_f_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_client;
        break;
      }

      // optional .pb_report_t_client f_client = 7;
      case 7: {
        if (tag == 58) {
         parse_f_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_report_t_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_report_t_report)
  return false;
#undef DO_
}

void pb_report_t_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_report_t_report)
  // optional int32 f_msg_type = 1;
  if (has_f_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_msg_type(), output);
  }

  // optional int32 f_i_cmd = 2;
  if (has_f_i_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_i_cmd(), output);
  }

  // optional string f_s_cmd = 3;
  if (has_f_s_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_s_cmd().data(), this->f_s_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_s_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_s_cmd(), output);
  }

  // optional int32 f_time = 4;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_time(), output);
  }

  // optional string f_log = 5;
  if (has_f_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_log().data(), this->f_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_log(), output);
  }

  // optional .pb_report_t_base_info f_info = 6;
  if (has_f_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_info(), output);
  }

  // optional .pb_report_t_client f_client = 7;
  if (has_f_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_report_t_report)
}

::google::protobuf::uint8* pb_report_t_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_report_t_report)
  // optional int32 f_msg_type = 1;
  if (has_f_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_msg_type(), target);
  }

  // optional int32 f_i_cmd = 2;
  if (has_f_i_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_i_cmd(), target);
  }

  // optional string f_s_cmd = 3;
  if (has_f_s_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_s_cmd().data(), this->f_s_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_s_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_s_cmd(), target);
  }

  // optional int32 f_time = 4;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_time(), target);
  }

  // optional string f_log = 5;
  if (has_f_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_log().data(), this->f_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_log(), target);
  }

  // optional .pb_report_t_base_info f_info = 6;
  if (has_f_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_info(), target);
  }

  // optional .pb_report_t_client f_client = 7;
  if (has_f_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_report_t_report)
  return target;
}

int pb_report_t_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_msg_type = 1;
    if (has_f_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_msg_type());
    }

    // optional int32 f_i_cmd = 2;
    if (has_f_i_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_i_cmd());
    }

    // optional string f_s_cmd = 3;
    if (has_f_s_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_s_cmd());
    }

    // optional int32 f_time = 4;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

    // optional string f_log = 5;
    if (has_f_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_log());
    }

    // optional .pb_report_t_base_info f_info = 6;
    if (has_f_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_info());
    }

    // optional .pb_report_t_client f_client = 7;
    if (has_f_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_client());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_report_t_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_report_t_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_report_t_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_report_t_report::MergeFrom(const pb_report_t_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_msg_type()) {
      set_f_msg_type(from.f_msg_type());
    }
    if (from.has_f_i_cmd()) {
      set_f_i_cmd(from.f_i_cmd());
    }
    if (from.has_f_s_cmd()) {
      set_f_s_cmd(from.f_s_cmd());
    }
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
    if (from.has_f_log()) {
      set_f_log(from.f_log());
    }
    if (from.has_f_info()) {
      mutable_f_info()->::pb_report_t_base_info::MergeFrom(from.f_info());
    }
    if (from.has_f_client()) {
      mutable_f_client()->::pb_report_t_client::MergeFrom(from.f_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_report_t_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_report_t_report::CopyFrom(const pb_report_t_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_report_t_report::IsInitialized() const {

  return true;
}

void pb_report_t_report::Swap(pb_report_t_report* other) {
  if (other != this) {
    std::swap(f_msg_type_, other->f_msg_type_);
    std::swap(f_i_cmd_, other->f_i_cmd_);
    std::swap(f_s_cmd_, other->f_s_cmd_);
    std::swap(f_time_, other->f_time_);
    std::swap(f_log_, other->f_log_);
    std::swap(f_info_, other->f_info_);
    std::swap(f_client_, other->f_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_report_t_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_report_t_report_descriptor_;
  metadata.reflection = pb_report_t_report_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
