// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk_req.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_gsk_req.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pb_req_t_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_project_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_project_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_task_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_task_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_req_t_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_req_t_req_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto() {
  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_gsk_req.proto");
  GOOGLE_CHECK(file != NULL);
  pb_req_t_attach_descriptor_ = file->message_type(0);
  static const int pb_req_t_attach_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, f_attach_playtime_),
  };
  pb_req_t_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_attach_descriptor_,
      pb_req_t_attach::default_instance_,
      pb_req_t_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_attach));
  pb_req_t_user_descriptor_ = file->message_type(1);
  static const int pb_req_t_user_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, f_join_content_),
  };
  pb_req_t_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_user_descriptor_,
      pb_req_t_user::default_instance_,
      pb_req_t_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_user));
  pb_req_t_project_descriptor_ = file->message_type(2);
  static const int pb_req_t_project_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_floor_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_prj_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_jianzhu_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_shigong_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_jianli_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_fenbao_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, f_lon_),
  };
  pb_req_t_project_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_project_descriptor_,
      pb_req_t_project::default_instance_,
      pb_req_t_project_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_project, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_project));
  pb_req_t_task_report_descriptor_ = file->message_type(3);
  static const int pb_req_t_task_report_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_reply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, f_report_time_),
  };
  pb_req_t_task_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_task_report_descriptor_,
      pb_req_t_task_report::default_instance_,
      pb_req_t_task_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_task_report));
  pb_req_t_task_descriptor_ = file->message_type(4);
  static const int pb_req_t_task_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_desc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_report_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, f_task_end_),
  };
  pb_req_t_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_task_descriptor_,
      pb_req_t_task::default_instance_,
      pb_req_t_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_task));
  pb_req_t_report_descriptor_ = file->message_type(5);
  static const int pb_req_t_report_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_phone_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, f_network_),
  };
  pb_req_t_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_report_descriptor_,
      pb_req_t_report::default_instance_,
      pb_req_t_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_report));
  pb_req_t_req_descriptor_ = file->message_type(6);
  static const int pb_req_t_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_i_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_s_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_attch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_prj_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, f_report_),
  };
  pb_req_t_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_req_t_req_descriptor_,
      pb_req_t_req::default_instance_,
      pb_req_t_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_req_t_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_req_t_req));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fgsk_5freq_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_attach_descriptor_, &pb_req_t_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_user_descriptor_, &pb_req_t_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_project_descriptor_, &pb_req_t_project::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_task_report_descriptor_, &pb_req_t_task_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_task_descriptor_, &pb_req_t_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_report_descriptor_, &pb_req_t_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_req_t_req_descriptor_, &pb_req_t_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto() {
  delete pb_req_t_attach::default_instance_;
  delete pb_req_t_attach_reflection_;
  delete pb_req_t_user::default_instance_;
  delete pb_req_t_user_reflection_;
  delete pb_req_t_project::default_instance_;
  delete pb_req_t_project_reflection_;
  delete pb_req_t_task_report::default_instance_;
  delete pb_req_t_task_report_reflection_;
  delete pb_req_t_task::default_instance_;
  delete pb_req_t_task_reflection_;
  delete pb_req_t_report::default_instance_;
  delete pb_req_t_report_reflection_;
  delete pb_req_t_req::default_instance_;
  delete pb_req_t_req_reflection_;
}

void protobuf_AddDesc_pb_5fgsk_5freq_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020pb_gsk_req.proto\"\207\001\n\017pb_req_t_attach\022\025"
    "\n\rf_attach_name\030\001 \001(\t\022\025\n\rf_attach_type\030\002"
    " \001(\005\022\024\n\014f_attach_url\030\003 \001(\t\022\025\n\rf_attach_s"
    "ize\030\004 \001(\005\022\031\n\021f_attach_playtime\030\005 \001(\005\"k\n\r"
    "pb_req_t_user\022\r\n\005f_uin\030\001 \001(\r\022\016\n\006f_name\030\002"
    " \001(\t\022\017\n\007f_phone\030\003 \001(\t\022\022\n\nf_job_type\030\004 \001("
    "\t\022\026\n\016f_join_content\030\005 \001(\t\"\314\002\n\020pb_req_t_p"
    "roject\022\022\n\nf_prj_name\030\001 \001(\t\022\022\n\nf_prj_type"
    "\030\002 \001(\005\022\023\n\013f_prj_image\030\003 \001(\t\022\022\n\nf_provinc"
    "e\030\004 \001(\t\022\016\n\006f_city\030\005 \001(\t\022\025\n\rf_prj_address"
    "\030\006 \001(\t\022\024\n\014f_floor_area\030\007 \001(\005\022\023\n\013f_prj_be"
    "gin\030\010 \001(\005\022\021\n\tf_prj_end\030\t \001(\005\022\030\n\020f_jianzh"
    "u_danwei\030\n \001(\t\022\030\n\020f_shigong_danwei\030\013 \001(\t"
    "\022\027\n\017f_jianli_danwei\030\014 \001(\t\022\027\n\017f_fenbao_da"
    "nwei\030\r \001(\t\022\r\n\005f_lat\030\016 \001(\001\022\r\n\005f_lon\030\017 \001(\001"
    "\"\356\001\n\024pb_req_t_task_report\022\023\n\013f_report_id"
    "\030\001 \001(\t\022!\n\tf_sponsor\030\002 \001(\0132\016.pb_req_t_use"
    "r\022\"\n\nf_reply_to\030\003 \001(\0132\016.pb_req_t_user\022\017\n"
    "\007f_title\030\004 \001(\t\022\021\n\tf_content\030\005 \001(\t\022\026\n\016f_c"
    "ontent_type\030\006 \001(\005\022\'\n\rf_attach_list\030\007 \003(\013"
    "2\020.pb_req_t_attach\022\025\n\rf_report_time\030\010 \001("
    "\005\"\376\002\n\rpb_req_t_task\022\021\n\tf_task_id\030\001 \001(\t\022\023"
    "\n\013f_task_type\030\002 \001(\005\022\020\n\010f_prj_id\030\003 \001(\t\022\023\n"
    "\013f_task_desc\030\004 \001(\t\022\030\n\020f_task_desc_type\030\005"
    " \001(\005\022\022\n\nf_playtime\030\006 \001(\005\022!\n\tf_sponsor\030\007 "
    "\001(\0132\016.pb_req_t_user\022!\n\tf_members\030\010 \003(\0132\016"
    ".pb_req_t_user\022\022\n\nf_position\030\t \001(\t\022\025\n\rf_"
    "task_status\030\n \001(\005\022\'\n\rf_attach_list\030\013 \003(\013"
    "2\020.pb_req_t_attach\022,\n\rf_report_list\030\014 \003("
    "\0132\025.pb_req_t_task_report\022\024\n\014f_task_begin"
    "\030\r \001(\005\022\022\n\nf_task_end\030\016 \001(\005\"V\n\017pb_req_t_r"
    "eport\022\024\n\014f_phone_info\030\001 \001(\t\022\014\n\004f_os\030\002 \001("
    "\t\022\014\n\004f_sp\030\003 \001(\t\022\021\n\tf_network\030\004 \001(\t\"\364\001\n\014p"
    "b_req_t_req\022\r\n\005f_cmd\030\001 \001(\005\022\020\n\010f_i_args\030\002"
    " \003(\005\022\020\n\010f_s_args\030\003 \003(\t\022!\n\007f_attch\030\004 \003(\0132"
    "\020.pb_req_t_attach\022$\n\tf_project\030\005 \001(\0132\021.p"
    "b_req_t_project\022$\n\014f_prj_member\030\006 \003(\0132\016."
    "pb_req_t_user\022\036\n\006f_task\030\007 \001(\0132\016.pb_req_t"
    "_task\022\"\n\010f_report\030\010 \001(\0132\020.pb_req_t_repor"
    "t", 1561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_gsk_req.proto", &protobuf_RegisterTypes);
  pb_req_t_attach::default_instance_ = new pb_req_t_attach();
  pb_req_t_user::default_instance_ = new pb_req_t_user();
  pb_req_t_project::default_instance_ = new pb_req_t_project();
  pb_req_t_task_report::default_instance_ = new pb_req_t_task_report();
  pb_req_t_task::default_instance_ = new pb_req_t_task();
  pb_req_t_report::default_instance_ = new pb_req_t_report();
  pb_req_t_req::default_instance_ = new pb_req_t_req();
  pb_req_t_attach::default_instance_->InitAsDefaultInstance();
  pb_req_t_user::default_instance_->InitAsDefaultInstance();
  pb_req_t_project::default_instance_->InitAsDefaultInstance();
  pb_req_t_task_report::default_instance_->InitAsDefaultInstance();
  pb_req_t_task::default_instance_->InitAsDefaultInstance();
  pb_req_t_report::default_instance_->InitAsDefaultInstance();
  pb_req_t_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fgsk_5freq_2eproto {
  StaticDescriptorInitializer_pb_5fgsk_5freq_2eproto() {
    protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  }
} static_descriptor_initializer_pb_5fgsk_5freq_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_attach::kFAttachNameFieldNumber;
const int pb_req_t_attach::kFAttachTypeFieldNumber;
const int pb_req_t_attach::kFAttachUrlFieldNumber;
const int pb_req_t_attach::kFAttachSizeFieldNumber;
const int pb_req_t_attach::kFAttachPlaytimeFieldNumber;
#endif  // !_MSC_VER

pb_req_t_attach::pb_req_t_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_attach)
}

void pb_req_t_attach::InitAsDefaultInstance() {
}

pb_req_t_attach::pb_req_t_attach(const pb_req_t_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_attach)
}

void pb_req_t_attach::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_type_ = 0;
  f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_size_ = 0;
  f_attach_playtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_attach::~pb_req_t_attach() {
  // @@protoc_insertion_point(destructor:pb_req_t_attach)
  SharedDtor();
}

void pb_req_t_attach::SharedDtor() {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_;
  }
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_url_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_attach_descriptor_;
}

const pb_req_t_attach& pb_req_t_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_attach* pb_req_t_attach::default_instance_ = NULL;

pb_req_t_attach* pb_req_t_attach::New() const {
  return new pb_req_t_attach;
}

void pb_req_t_attach::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_attach*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(f_attach_type_, f_attach_playtime_);
    if (has_f_attach_name()) {
      if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_name_->clear();
      }
    }
    if (has_f_attach_url()) {
      if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_attach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_attach_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_name().data(), this->f_attach_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_attach_type;
        break;
      }

      // optional int32 f_attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_type_)));
          set_has_f_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_attach_url;
        break;
      }

      // optional string f_attach_url = 3;
      case 3: {
        if (tag == 26) {
         parse_f_attach_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_url().data(), this->f_attach_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_attach_size;
        break;
      }

      // optional int32 f_attach_size = 4;
      case 4: {
        if (tag == 32) {
         parse_f_attach_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_size_)));
          set_has_f_attach_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_attach_playtime;
        break;
      }

      // optional int32 f_attach_playtime = 5;
      case 5: {
        if (tag == 40) {
         parse_f_attach_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_playtime_)));
          set_has_f_attach_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_attach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_attach)
  return false;
#undef DO_
}

void pb_req_t_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_attach_name(), output);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_attach_type(), output);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_attach_url(), output);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_attach_size(), output);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_attach_playtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_attach)
}

::google::protobuf::uint8* pb_req_t_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_attach_name(), target);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_attach_type(), target);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_attach_url(), target);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_attach_size(), target);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_attach_playtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_attach)
  return target;
}

int pb_req_t_attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_attach_name = 1;
    if (has_f_attach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_name());
    }

    // optional int32 f_attach_type = 2;
    if (has_f_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_type());
    }

    // optional string f_attach_url = 3;
    if (has_f_attach_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_url());
    }

    // optional int32 f_attach_size = 4;
    if (has_f_attach_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_size());
    }

    // optional int32 f_attach_playtime = 5;
    if (has_f_attach_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_playtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_attach::MergeFrom(const pb_req_t_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_attach_name()) {
      set_f_attach_name(from.f_attach_name());
    }
    if (from.has_f_attach_type()) {
      set_f_attach_type(from.f_attach_type());
    }
    if (from.has_f_attach_url()) {
      set_f_attach_url(from.f_attach_url());
    }
    if (from.has_f_attach_size()) {
      set_f_attach_size(from.f_attach_size());
    }
    if (from.has_f_attach_playtime()) {
      set_f_attach_playtime(from.f_attach_playtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_attach::CopyFrom(const pb_req_t_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_attach::IsInitialized() const {

  return true;
}

void pb_req_t_attach::Swap(pb_req_t_attach* other) {
  if (other != this) {
    std::swap(f_attach_name_, other->f_attach_name_);
    std::swap(f_attach_type_, other->f_attach_type_);
    std::swap(f_attach_url_, other->f_attach_url_);
    std::swap(f_attach_size_, other->f_attach_size_);
    std::swap(f_attach_playtime_, other->f_attach_playtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_attach_descriptor_;
  metadata.reflection = pb_req_t_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_user::kFUinFieldNumber;
const int pb_req_t_user::kFNameFieldNumber;
const int pb_req_t_user::kFPhoneFieldNumber;
const int pb_req_t_user::kFJobTypeFieldNumber;
const int pb_req_t_user::kFJoinContentFieldNumber;
#endif  // !_MSC_VER

pb_req_t_user::pb_req_t_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_user)
}

void pb_req_t_user::InitAsDefaultInstance() {
}

pb_req_t_user::pb_req_t_user(const pb_req_t_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_user)
}

void pb_req_t_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_user::~pb_req_t_user() {
  // @@protoc_insertion_point(destructor:pb_req_t_user)
  SharedDtor();
}

void pb_req_t_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_join_content_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_user_descriptor_;
}

const pb_req_t_user& pb_req_t_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_user* pb_req_t_user::default_instance_ = NULL;

pb_req_t_user* pb_req_t_user::New() const {
  return new pb_req_t_user;
}

void pb_req_t_user::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    f_uin_ = 0u;
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_join_content()) {
      if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_join_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 4;
      case 4: {
        if (tag == 34) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_join_content;
        break;
      }

      // optional string f_join_content = 5;
      case 5: {
        if (tag == 42) {
         parse_f_join_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_join_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_join_content().data(), this->f_join_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_join_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_user)
  return false;
#undef DO_
}

void pb_req_t_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_phone(), output);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_job_type(), output);
  }

  // optional string f_join_content = 5;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_join_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_user)
}

::google::protobuf::uint8* pb_req_t_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_phone(), target);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_job_type(), target);
  }

  // optional string f_join_content = 5;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_join_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_user)
  return target;
}

int pb_req_t_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_phone = 3;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional string f_job_type = 4;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_join_content = 5;
    if (has_f_join_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_join_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_user::MergeFrom(const pb_req_t_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_join_content()) {
      set_f_join_content(from.f_join_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_user::CopyFrom(const pb_req_t_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_user::IsInitialized() const {

  return true;
}

void pb_req_t_user::Swap(pb_req_t_user* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_join_content_, other->f_join_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_user_descriptor_;
  metadata.reflection = pb_req_t_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_project::kFPrjNameFieldNumber;
const int pb_req_t_project::kFPrjTypeFieldNumber;
const int pb_req_t_project::kFPrjImageFieldNumber;
const int pb_req_t_project::kFProvinceFieldNumber;
const int pb_req_t_project::kFCityFieldNumber;
const int pb_req_t_project::kFPrjAddressFieldNumber;
const int pb_req_t_project::kFFloorAreaFieldNumber;
const int pb_req_t_project::kFPrjBeginFieldNumber;
const int pb_req_t_project::kFPrjEndFieldNumber;
const int pb_req_t_project::kFJianzhuDanweiFieldNumber;
const int pb_req_t_project::kFShigongDanweiFieldNumber;
const int pb_req_t_project::kFJianliDanweiFieldNumber;
const int pb_req_t_project::kFFenbaoDanweiFieldNumber;
const int pb_req_t_project::kFLatFieldNumber;
const int pb_req_t_project::kFLonFieldNumber;
#endif  // !_MSC_VER

pb_req_t_project::pb_req_t_project()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_project)
}

void pb_req_t_project::InitAsDefaultInstance() {
}

pb_req_t_project::pb_req_t_project(const pb_req_t_project& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_project)
}

void pb_req_t_project::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_type_ = 0;
  f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_floor_area_ = 0;
  f_prj_begin_ = 0;
  f_prj_end_ = 0;
  f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_lat_ = 0;
  f_lon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_project::~pb_req_t_project() {
  // @@protoc_insertion_point(destructor:pb_req_t_project)
  SharedDtor();
}

void pb_req_t_project::SharedDtor() {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_image_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_address_;
  }
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianzhu_danwei_;
  }
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_shigong_danwei_;
  }
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianli_danwei_;
  }
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fenbao_danwei_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_project::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_project::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_project_descriptor_;
}

const pb_req_t_project& pb_req_t_project::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_project* pb_req_t_project::default_instance_ = NULL;

pb_req_t_project* pb_req_t_project::New() const {
  return new pb_req_t_project;
}

void pb_req_t_project::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_project*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_prj_type_, f_floor_area_);
    if (has_f_prj_name()) {
      if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_name_->clear();
      }
    }
    if (has_f_prj_image()) {
      if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_image_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
    if (has_f_prj_address()) {
      if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_address_->clear();
      }
    }
    f_prj_begin_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(f_lat_, f_lon_);
    f_prj_end_ = 0;
    if (has_f_jianzhu_danwei()) {
      if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianzhu_danwei_->clear();
      }
    }
    if (has_f_shigong_danwei()) {
      if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_shigong_danwei_->clear();
      }
    }
    if (has_f_jianli_danwei()) {
      if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianli_danwei_->clear();
      }
    }
    if (has_f_fenbao_danwei()) {
      if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fenbao_danwei_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_project)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_name().data(), this->f_prj_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_prj_type;
        break;
      }

      // optional int32 f_prj_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_prj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_type_)));
          set_has_f_prj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_prj_image;
        break;
      }

      // optional string f_prj_image = 3;
      case 3: {
        if (tag == 26) {
         parse_f_prj_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_image().data(), this->f_prj_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_province;
        break;
      }

      // optional string f_province = 4;
      case 4: {
        if (tag == 34) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_city;
        break;
      }

      // optional string f_city = 5;
      case 5: {
        if (tag == 42) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_address;
        break;
      }

      // optional string f_prj_address = 6;
      case 6: {
        if (tag == 50) {
         parse_f_prj_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_address().data(), this->f_prj_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_floor_area;
        break;
      }

      // optional int32 f_floor_area = 7;
      case 7: {
        if (tag == 56) {
         parse_f_floor_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_floor_area_)));
          set_has_f_floor_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_f_prj_begin;
        break;
      }

      // optional int32 f_prj_begin = 8;
      case 8: {
        if (tag == 64) {
         parse_f_prj_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_begin_)));
          set_has_f_prj_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_prj_end;
        break;
      }

      // optional int32 f_prj_end = 9;
      case 9: {
        if (tag == 72) {
         parse_f_prj_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_end_)));
          set_has_f_prj_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_jianzhu_danwei;
        break;
      }

      // optional string f_jianzhu_danwei = 10;
      case 10: {
        if (tag == 82) {
         parse_f_jianzhu_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianzhu_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianzhu_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_shigong_danwei;
        break;
      }

      // optional string f_shigong_danwei = 11;
      case 11: {
        if (tag == 90) {
         parse_f_shigong_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_shigong_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_shigong_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_jianli_danwei;
        break;
      }

      // optional string f_jianli_danwei = 12;
      case 12: {
        if (tag == 98) {
         parse_f_jianli_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianli_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianli_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_fenbao_danwei;
        break;
      }

      // optional string f_fenbao_danwei = 13;
      case 13: {
        if (tag == 106) {
         parse_f_fenbao_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fenbao_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fenbao_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_f_lat;
        break;
      }

      // optional double f_lat = 14;
      case 14: {
        if (tag == 113) {
         parse_f_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lat_)));
          set_has_f_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_f_lon;
        break;
      }

      // optional double f_lon = 15;
      case 15: {
        if (tag == 121) {
         parse_f_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lon_)));
          set_has_f_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_project)
  return false;
#undef DO_
}

void pb_req_t_project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_project)
  // optional string f_prj_name = 1;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_name(), output);
  }

  // optional int32 f_prj_type = 2;
  if (has_f_prj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_prj_type(), output);
  }

  // optional string f_prj_image = 3;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_prj_image(), output);
  }

  // optional string f_province = 4;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_province(), output);
  }

  // optional string f_city = 5;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_city(), output);
  }

  // optional string f_prj_address = 6;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_prj_address(), output);
  }

  // optional int32 f_floor_area = 7;
  if (has_f_floor_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_floor_area(), output);
  }

  // optional int32 f_prj_begin = 8;
  if (has_f_prj_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->f_prj_begin(), output);
  }

  // optional int32 f_prj_end = 9;
  if (has_f_prj_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_prj_end(), output);
  }

  // optional string f_jianzhu_danwei = 10;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_jianzhu_danwei(), output);
  }

  // optional string f_shigong_danwei = 11;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_shigong_danwei(), output);
  }

  // optional string f_jianli_danwei = 12;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->f_jianli_danwei(), output);
  }

  // optional string f_fenbao_danwei = 13;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->f_fenbao_danwei(), output);
  }

  // optional double f_lat = 14;
  if (has_f_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->f_lat(), output);
  }

  // optional double f_lon = 15;
  if (has_f_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->f_lon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_project)
}

::google::protobuf::uint8* pb_req_t_project::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_project)
  // optional string f_prj_name = 1;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_name(), target);
  }

  // optional int32 f_prj_type = 2;
  if (has_f_prj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_prj_type(), target);
  }

  // optional string f_prj_image = 3;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_prj_image(), target);
  }

  // optional string f_province = 4;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_province(), target);
  }

  // optional string f_city = 5;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_city(), target);
  }

  // optional string f_prj_address = 6;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_prj_address(), target);
  }

  // optional int32 f_floor_area = 7;
  if (has_f_floor_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_floor_area(), target);
  }

  // optional int32 f_prj_begin = 8;
  if (has_f_prj_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->f_prj_begin(), target);
  }

  // optional int32 f_prj_end = 9;
  if (has_f_prj_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_prj_end(), target);
  }

  // optional string f_jianzhu_danwei = 10;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_jianzhu_danwei(), target);
  }

  // optional string f_shigong_danwei = 11;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_shigong_danwei(), target);
  }

  // optional string f_jianli_danwei = 12;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->f_jianli_danwei(), target);
  }

  // optional string f_fenbao_danwei = 13;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->f_fenbao_danwei(), target);
  }

  // optional double f_lat = 14;
  if (has_f_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->f_lat(), target);
  }

  // optional double f_lon = 15;
  if (has_f_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->f_lon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_project)
  return target;
}

int pb_req_t_project::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_name = 1;
    if (has_f_prj_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_name());
    }

    // optional int32 f_prj_type = 2;
    if (has_f_prj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_type());
    }

    // optional string f_prj_image = 3;
    if (has_f_prj_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_image());
    }

    // optional string f_province = 4;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 5;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

    // optional string f_prj_address = 6;
    if (has_f_prj_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_address());
    }

    // optional int32 f_floor_area = 7;
    if (has_f_floor_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_floor_area());
    }

    // optional int32 f_prj_begin = 8;
    if (has_f_prj_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_begin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_prj_end = 9;
    if (has_f_prj_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_end());
    }

    // optional string f_jianzhu_danwei = 10;
    if (has_f_jianzhu_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianzhu_danwei());
    }

    // optional string f_shigong_danwei = 11;
    if (has_f_shigong_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_shigong_danwei());
    }

    // optional string f_jianli_danwei = 12;
    if (has_f_jianli_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianli_danwei());
    }

    // optional string f_fenbao_danwei = 13;
    if (has_f_fenbao_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fenbao_danwei());
    }

    // optional double f_lat = 14;
    if (has_f_lat()) {
      total_size += 1 + 8;
    }

    // optional double f_lon = 15;
    if (has_f_lon()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_project::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_project* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_project*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_project::MergeFrom(const pb_req_t_project& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_name()) {
      set_f_prj_name(from.f_prj_name());
    }
    if (from.has_f_prj_type()) {
      set_f_prj_type(from.f_prj_type());
    }
    if (from.has_f_prj_image()) {
      set_f_prj_image(from.f_prj_image());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
    if (from.has_f_prj_address()) {
      set_f_prj_address(from.f_prj_address());
    }
    if (from.has_f_floor_area()) {
      set_f_floor_area(from.f_floor_area());
    }
    if (from.has_f_prj_begin()) {
      set_f_prj_begin(from.f_prj_begin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_prj_end()) {
      set_f_prj_end(from.f_prj_end());
    }
    if (from.has_f_jianzhu_danwei()) {
      set_f_jianzhu_danwei(from.f_jianzhu_danwei());
    }
    if (from.has_f_shigong_danwei()) {
      set_f_shigong_danwei(from.f_shigong_danwei());
    }
    if (from.has_f_jianli_danwei()) {
      set_f_jianli_danwei(from.f_jianli_danwei());
    }
    if (from.has_f_fenbao_danwei()) {
      set_f_fenbao_danwei(from.f_fenbao_danwei());
    }
    if (from.has_f_lat()) {
      set_f_lat(from.f_lat());
    }
    if (from.has_f_lon()) {
      set_f_lon(from.f_lon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_project::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_project::CopyFrom(const pb_req_t_project& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_project::IsInitialized() const {

  return true;
}

void pb_req_t_project::Swap(pb_req_t_project* other) {
  if (other != this) {
    std::swap(f_prj_name_, other->f_prj_name_);
    std::swap(f_prj_type_, other->f_prj_type_);
    std::swap(f_prj_image_, other->f_prj_image_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_prj_address_, other->f_prj_address_);
    std::swap(f_floor_area_, other->f_floor_area_);
    std::swap(f_prj_begin_, other->f_prj_begin_);
    std::swap(f_prj_end_, other->f_prj_end_);
    std::swap(f_jianzhu_danwei_, other->f_jianzhu_danwei_);
    std::swap(f_shigong_danwei_, other->f_shigong_danwei_);
    std::swap(f_jianli_danwei_, other->f_jianli_danwei_);
    std::swap(f_fenbao_danwei_, other->f_fenbao_danwei_);
    std::swap(f_lat_, other->f_lat_);
    std::swap(f_lon_, other->f_lon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_project::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_project_descriptor_;
  metadata.reflection = pb_req_t_project_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_task_report::kFReportIdFieldNumber;
const int pb_req_t_task_report::kFSponsorFieldNumber;
const int pb_req_t_task_report::kFReplyToFieldNumber;
const int pb_req_t_task_report::kFTitleFieldNumber;
const int pb_req_t_task_report::kFContentFieldNumber;
const int pb_req_t_task_report::kFContentTypeFieldNumber;
const int pb_req_t_task_report::kFAttachListFieldNumber;
const int pb_req_t_task_report::kFReportTimeFieldNumber;
#endif  // !_MSC_VER

pb_req_t_task_report::pb_req_t_task_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_task_report)
}

void pb_req_t_task_report::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
  f_reply_to_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
}

pb_req_t_task_report::pb_req_t_task_report(const pb_req_t_task_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_task_report)
}

void pb_req_t_task_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sponsor_ = NULL;
  f_reply_to_ = NULL;
  f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_type_ = 0;
  f_report_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_task_report::~pb_req_t_task_report() {
  // @@protoc_insertion_point(destructor:pb_req_t_task_report)
  SharedDtor();
}

void pb_req_t_task_report::SharedDtor() {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_report_id_;
  }
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_title_;
  }
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_content_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
    delete f_reply_to_;
  }
}

void pb_req_t_task_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_task_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_task_report_descriptor_;
}

const pb_req_t_task_report& pb_req_t_task_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_task_report* pb_req_t_task_report::default_instance_ = NULL;

pb_req_t_task_report* pb_req_t_task_report::New() const {
  return new pb_req_t_task_report;
}

void pb_req_t_task_report::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_task_report*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(f_content_type_, f_report_time_);
    if (has_f_report_id()) {
      if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_report_id_->clear();
      }
    }
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
    }
    if (has_f_reply_to()) {
      if (f_reply_to_ != NULL) f_reply_to_->::pb_req_t_user::Clear();
    }
    if (has_f_title()) {
      if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_title_->clear();
      }
    }
    if (has_f_content()) {
      if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_attach_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_task_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_task_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_report_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_report_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_report_id().data(), this->f_report_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_report_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_req_t_user f_sponsor = 2;
      case 2: {
        if (tag == 18) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_reply_to;
        break;
      }

      // optional .pb_req_t_user f_reply_to = 3;
      case 3: {
        if (tag == 26) {
         parse_f_reply_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_reply_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_title;
        break;
      }

      // optional string f_title = 4;
      case 4: {
        if (tag == 34) {
         parse_f_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_title().data(), this->f_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_content;
        break;
      }

      // optional string f_content = 5;
      case 5: {
        if (tag == 42) {
         parse_f_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_content().data(), this->f_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_content_type;
        break;
      }

      // optional int32 f_content_type = 6;
      case 6: {
        if (tag == 48) {
         parse_f_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_content_type_)));
          set_has_f_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_req_t_attach f_attach_list = 7;
      case 7: {
        if (tag == 58) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_attach_list;
        if (input->ExpectTag(64)) goto parse_f_report_time;
        break;
      }

      // optional int32 f_report_time = 8;
      case 8: {
        if (tag == 64) {
         parse_f_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_report_time_)));
          set_has_f_report_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_task_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_task_report)
  return false;
#undef DO_
}

void pb_req_t_task_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_report_id(), output);
  }

  // optional .pb_req_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_sponsor(), output);
  }

  // optional .pb_req_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_reply_to(), output);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_title(), output);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_content(), output);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_content_type(), output);
  }

  // repeated .pb_req_t_attach f_attach_list = 7;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_attach_list(i), output);
  }

  // optional int32 f_report_time = 8;
  if (has_f_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->f_report_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_task_report)
}

::google::protobuf::uint8* pb_req_t_task_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_report_id(), target);
  }

  // optional .pb_req_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_sponsor(), target);
  }

  // optional .pb_req_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_reply_to(), target);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_title(), target);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_content(), target);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_content_type(), target);
  }

  // repeated .pb_req_t_attach f_attach_list = 7;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_attach_list(i), target);
  }

  // optional int32 f_report_time = 8;
  if (has_f_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->f_report_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_task_report)
  return target;
}

int pb_req_t_task_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_report_id = 1;
    if (has_f_report_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_report_id());
    }

    // optional .pb_req_t_user f_sponsor = 2;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

    // optional .pb_req_t_user f_reply_to = 3;
    if (has_f_reply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_reply_to());
    }

    // optional string f_title = 4;
    if (has_f_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_title());
    }

    // optional string f_content = 5;
    if (has_f_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_content());
    }

    // optional int32 f_content_type = 6;
    if (has_f_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_content_type());
    }

    // optional int32 f_report_time = 8;
    if (has_f_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_report_time());
    }

  }
  // repeated .pb_req_t_attach f_attach_list = 7;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_task_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_task_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_task_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_task_report::MergeFrom(const pb_req_t_task_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_report_id()) {
      set_f_report_id(from.f_report_id());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_req_t_user::MergeFrom(from.f_sponsor());
    }
    if (from.has_f_reply_to()) {
      mutable_f_reply_to()->::pb_req_t_user::MergeFrom(from.f_reply_to());
    }
    if (from.has_f_title()) {
      set_f_title(from.f_title());
    }
    if (from.has_f_content()) {
      set_f_content(from.f_content());
    }
    if (from.has_f_content_type()) {
      set_f_content_type(from.f_content_type());
    }
    if (from.has_f_report_time()) {
      set_f_report_time(from.f_report_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_task_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_task_report::CopyFrom(const pb_req_t_task_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_task_report::IsInitialized() const {

  return true;
}

void pb_req_t_task_report::Swap(pb_req_t_task_report* other) {
  if (other != this) {
    std::swap(f_report_id_, other->f_report_id_);
    std::swap(f_sponsor_, other->f_sponsor_);
    std::swap(f_reply_to_, other->f_reply_to_);
    std::swap(f_title_, other->f_title_);
    std::swap(f_content_, other->f_content_);
    std::swap(f_content_type_, other->f_content_type_);
    f_attach_list_.Swap(&other->f_attach_list_);
    std::swap(f_report_time_, other->f_report_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_task_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_task_report_descriptor_;
  metadata.reflection = pb_req_t_task_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_task::kFTaskIdFieldNumber;
const int pb_req_t_task::kFTaskTypeFieldNumber;
const int pb_req_t_task::kFPrjIdFieldNumber;
const int pb_req_t_task::kFTaskDescFieldNumber;
const int pb_req_t_task::kFTaskDescTypeFieldNumber;
const int pb_req_t_task::kFPlaytimeFieldNumber;
const int pb_req_t_task::kFSponsorFieldNumber;
const int pb_req_t_task::kFMembersFieldNumber;
const int pb_req_t_task::kFPositionFieldNumber;
const int pb_req_t_task::kFTaskStatusFieldNumber;
const int pb_req_t_task::kFAttachListFieldNumber;
const int pb_req_t_task::kFReportListFieldNumber;
const int pb_req_t_task::kFTaskBeginFieldNumber;
const int pb_req_t_task::kFTaskEndFieldNumber;
#endif  // !_MSC_VER

pb_req_t_task::pb_req_t_task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_task)
}

void pb_req_t_task::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_req_t_user*>(&::pb_req_t_user::default_instance());
}

pb_req_t_task::pb_req_t_task(const pb_req_t_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_task)
}

void pb_req_t_task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_type_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_type_ = 0;
  f_playtime_ = 0;
  f_sponsor_ = NULL;
  f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_status_ = 0;
  f_task_begin_ = 0;
  f_task_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_task::~pb_req_t_task() {
  // @@protoc_insertion_point(destructor:pb_req_t_task)
  SharedDtor();
}

void pb_req_t_task::SharedDtor() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
  }
}

void pb_req_t_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_task_descriptor_;
}

const pb_req_t_task& pb_req_t_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_task* pb_req_t_task::default_instance_ = NULL;

pb_req_t_task* pb_req_t_task::New() const {
  return new pb_req_t_task;
}

void pb_req_t_task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_req_t_task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_task_type_, f_task_desc_type_);
    if (has_f_task_id()) {
      if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_id_->clear();
      }
    }
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_task_desc()) {
      if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_desc_->clear();
      }
    }
    f_playtime_ = 0;
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 13056) {
    ZR_(f_task_begin_, f_task_end_);
    if (has_f_position()) {
      if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_position_->clear();
      }
    }
    f_task_status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_members_.Clear();
  f_attach_list_.Clear();
  f_report_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_id().data(), this->f_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_task_type;
        break;
      }

      // optional int32 f_task_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_type_)));
          set_has_f_task_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_prj_id;
        break;
      }

      // optional string f_prj_id = 3;
      case 3: {
        if (tag == 26) {
         parse_f_prj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_task_desc;
        break;
      }

      // optional string f_task_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_f_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_desc().data(), this->f_task_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_task_desc_type;
        break;
      }

      // optional int32 f_task_desc_type = 5;
      case 5: {
        if (tag == 40) {
         parse_f_task_desc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_desc_type_)));
          set_has_f_task_desc_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_playtime;
        break;
      }

      // optional int32 f_playtime = 6;
      case 6: {
        if (tag == 48) {
         parse_f_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_playtime_)));
          set_has_f_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_req_t_user f_sponsor = 7;
      case 7: {
        if (tag == 58) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        break;
      }

      // repeated .pb_req_t_user f_members = 8;
      case 8: {
        if (tag == 66) {
         parse_f_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        if (input->ExpectTag(74)) goto parse_f_position;
        break;
      }

      // optional string f_position = 9;
      case 9: {
        if (tag == 74) {
         parse_f_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_position().data(), this->f_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_task_status;
        break;
      }

      // optional int32 f_task_status = 10;
      case 10: {
        if (tag == 80) {
         parse_f_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_status_)));
          set_has_f_task_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_req_t_attach f_attach_list = 11;
      case 11: {
        if (tag == 90) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        if (input->ExpectTag(98)) goto parse_f_report_list;
        break;
      }

      // repeated .pb_req_t_task_report f_report_list = 12;
      case 12: {
        if (tag == 98) {
         parse_f_report_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_report_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_report_list;
        if (input->ExpectTag(104)) goto parse_f_task_begin;
        break;
      }

      // optional int32 f_task_begin = 13;
      case 13: {
        if (tag == 104) {
         parse_f_task_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_begin_)));
          set_has_f_task_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_f_task_end;
        break;
      }

      // optional int32 f_task_end = 14;
      case 14: {
        if (tag == 112) {
         parse_f_task_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_end_)));
          set_has_f_task_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_task)
  return false;
#undef DO_
}

void pb_req_t_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_task_id(), output);
  }

  // optional int32 f_task_type = 2;
  if (has_f_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_task_type(), output);
  }

  // optional string f_prj_id = 3;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_prj_id(), output);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_task_desc(), output);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_task_desc_type(), output);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_playtime(), output);
  }

  // optional .pb_req_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_sponsor(), output);
  }

  // repeated .pb_req_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_members(i), output);
  }

  // optional string f_position = 9;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_position(), output);
  }

  // optional int32 f_task_status = 10;
  if (has_f_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->f_task_status(), output);
  }

  // repeated .pb_req_t_attach f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_attach_list(i), output);
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->f_report_list(i), output);
  }

  // optional int32 f_task_begin = 13;
  if (has_f_task_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->f_task_begin(), output);
  }

  // optional int32 f_task_end = 14;
  if (has_f_task_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->f_task_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_task)
}

::google::protobuf::uint8* pb_req_t_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_task_id(), target);
  }

  // optional int32 f_task_type = 2;
  if (has_f_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_task_type(), target);
  }

  // optional string f_prj_id = 3;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_prj_id(), target);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_task_desc(), target);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_task_desc_type(), target);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_playtime(), target);
  }

  // optional .pb_req_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_sponsor(), target);
  }

  // repeated .pb_req_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_members(i), target);
  }

  // optional string f_position = 9;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_position(), target);
  }

  // optional int32 f_task_status = 10;
  if (has_f_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->f_task_status(), target);
  }

  // repeated .pb_req_t_attach f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_attach_list(i), target);
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->f_report_list(i), target);
  }

  // optional int32 f_task_begin = 13;
  if (has_f_task_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->f_task_begin(), target);
  }

  // optional int32 f_task_end = 14;
  if (has_f_task_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->f_task_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_task)
  return target;
}

int pb_req_t_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_task_id = 1;
    if (has_f_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_id());
    }

    // optional int32 f_task_type = 2;
    if (has_f_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_type());
    }

    // optional string f_prj_id = 3;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional string f_task_desc = 4;
    if (has_f_task_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_desc());
    }

    // optional int32 f_task_desc_type = 5;
    if (has_f_task_desc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_desc_type());
    }

    // optional int32 f_playtime = 6;
    if (has_f_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_playtime());
    }

    // optional .pb_req_t_user f_sponsor = 7;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_position = 9;
    if (has_f_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_position());
    }

    // optional int32 f_task_status = 10;
    if (has_f_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_status());
    }

    // optional int32 f_task_begin = 13;
    if (has_f_task_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_begin());
    }

    // optional int32 f_task_end = 14;
    if (has_f_task_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_end());
    }

  }
  // repeated .pb_req_t_user f_members = 8;
  total_size += 1 * this->f_members_size();
  for (int i = 0; i < this->f_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_members(i));
  }

  // repeated .pb_req_t_attach f_attach_list = 11;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  // repeated .pb_req_t_task_report f_report_list = 12;
  total_size += 1 * this->f_report_list_size();
  for (int i = 0; i < this->f_report_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_report_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_task::MergeFrom(const pb_req_t_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_members_.MergeFrom(from.f_members_);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  f_report_list_.MergeFrom(from.f_report_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_task_id()) {
      set_f_task_id(from.f_task_id());
    }
    if (from.has_f_task_type()) {
      set_f_task_type(from.f_task_type());
    }
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_task_desc()) {
      set_f_task_desc(from.f_task_desc());
    }
    if (from.has_f_task_desc_type()) {
      set_f_task_desc_type(from.f_task_desc_type());
    }
    if (from.has_f_playtime()) {
      set_f_playtime(from.f_playtime());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_req_t_user::MergeFrom(from.f_sponsor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_position()) {
      set_f_position(from.f_position());
    }
    if (from.has_f_task_status()) {
      set_f_task_status(from.f_task_status());
    }
    if (from.has_f_task_begin()) {
      set_f_task_begin(from.f_task_begin());
    }
    if (from.has_f_task_end()) {
      set_f_task_end(from.f_task_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_task::CopyFrom(const pb_req_t_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_task::IsInitialized() const {

  return true;
}

void pb_req_t_task::Swap(pb_req_t_task* other) {
  if (other != this) {
    std::swap(f_task_id_, other->f_task_id_);
    std::swap(f_task_type_, other->f_task_type_);
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_task_desc_, other->f_task_desc_);
    std::swap(f_task_desc_type_, other->f_task_desc_type_);
    std::swap(f_playtime_, other->f_playtime_);
    std::swap(f_sponsor_, other->f_sponsor_);
    f_members_.Swap(&other->f_members_);
    std::swap(f_position_, other->f_position_);
    std::swap(f_task_status_, other->f_task_status_);
    f_attach_list_.Swap(&other->f_attach_list_);
    f_report_list_.Swap(&other->f_report_list_);
    std::swap(f_task_begin_, other->f_task_begin_);
    std::swap(f_task_end_, other->f_task_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_task_descriptor_;
  metadata.reflection = pb_req_t_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_report::kFPhoneInfoFieldNumber;
const int pb_req_t_report::kFOsFieldNumber;
const int pb_req_t_report::kFSpFieldNumber;
const int pb_req_t_report::kFNetworkFieldNumber;
#endif  // !_MSC_VER

pb_req_t_report::pb_req_t_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_report)
}

void pb_req_t_report::InitAsDefaultInstance() {
}

pb_req_t_report::pb_req_t_report(const pb_req_t_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_report)
}

void pb_req_t_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_report::~pb_req_t_report() {
  // @@protoc_insertion_point(destructor:pb_req_t_report)
  SharedDtor();
}

void pb_req_t_report::SharedDtor() {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_info_;
  }
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_os_;
  }
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sp_;
  }
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_network_;
  }
  if (this != default_instance_) {
  }
}

void pb_req_t_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_report_descriptor_;
}

const pb_req_t_report& pb_req_t_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_report* pb_req_t_report::default_instance_ = NULL;

pb_req_t_report* pb_req_t_report::New() const {
  return new pb_req_t_report;
}

void pb_req_t_report::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_f_phone_info()) {
      if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_info_->clear();
      }
    }
    if (has_f_os()) {
      if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_os_->clear();
      }
    }
    if (has_f_sp()) {
      if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sp_->clear();
      }
    }
    if (has_f_network()) {
      if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_network_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_phone_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone_info().data(), this->f_phone_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_os;
        break;
      }

      // optional string f_os = 2;
      case 2: {
        if (tag == 18) {
         parse_f_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_os().data(), this->f_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_sp;
        break;
      }

      // optional string f_sp = 3;
      case 3: {
        if (tag == 26) {
         parse_f_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sp().data(), this->f_sp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_network;
        break;
      }

      // optional string f_network = 4;
      case 4: {
        if (tag == 34) {
         parse_f_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_network().data(), this->f_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_report)
  return false;
#undef DO_
}

void pb_req_t_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_report)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_phone_info(), output);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_os(), output);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_sp(), output);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_network(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_report)
}

::google::protobuf::uint8* pb_req_t_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_report)
  // optional string f_phone_info = 1;
  if (has_f_phone_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone_info().data(), this->f_phone_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_phone_info(), target);
  }

  // optional string f_os = 2;
  if (has_f_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_os().data(), this->f_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_os(), target);
  }

  // optional string f_sp = 3;
  if (has_f_sp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sp().data(), this->f_sp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_sp(), target);
  }

  // optional string f_network = 4;
  if (has_f_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_network().data(), this->f_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_network(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_report)
  return target;
}

int pb_req_t_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_phone_info = 1;
    if (has_f_phone_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone_info());
    }

    // optional string f_os = 2;
    if (has_f_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_os());
    }

    // optional string f_sp = 3;
    if (has_f_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sp());
    }

    // optional string f_network = 4;
    if (has_f_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_network());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_report::MergeFrom(const pb_req_t_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_phone_info()) {
      set_f_phone_info(from.f_phone_info());
    }
    if (from.has_f_os()) {
      set_f_os(from.f_os());
    }
    if (from.has_f_sp()) {
      set_f_sp(from.f_sp());
    }
    if (from.has_f_network()) {
      set_f_network(from.f_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_report::CopyFrom(const pb_req_t_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_report::IsInitialized() const {

  return true;
}

void pb_req_t_report::Swap(pb_req_t_report* other) {
  if (other != this) {
    std::swap(f_phone_info_, other->f_phone_info_);
    std::swap(f_os_, other->f_os_);
    std::swap(f_sp_, other->f_sp_);
    std::swap(f_network_, other->f_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_report_descriptor_;
  metadata.reflection = pb_req_t_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_req_t_req::kFCmdFieldNumber;
const int pb_req_t_req::kFIArgsFieldNumber;
const int pb_req_t_req::kFSArgsFieldNumber;
const int pb_req_t_req::kFAttchFieldNumber;
const int pb_req_t_req::kFProjectFieldNumber;
const int pb_req_t_req::kFPrjMemberFieldNumber;
const int pb_req_t_req::kFTaskFieldNumber;
const int pb_req_t_req::kFReportFieldNumber;
#endif  // !_MSC_VER

pb_req_t_req::pb_req_t_req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_req_t_req)
}

void pb_req_t_req::InitAsDefaultInstance() {
  f_project_ = const_cast< ::pb_req_t_project*>(&::pb_req_t_project::default_instance());
  f_task_ = const_cast< ::pb_req_t_task*>(&::pb_req_t_task::default_instance());
  f_report_ = const_cast< ::pb_req_t_report*>(&::pb_req_t_report::default_instance());
}

pb_req_t_req::pb_req_t_req(const pb_req_t_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_req_t_req)
}

void pb_req_t_req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_cmd_ = 0;
  f_project_ = NULL;
  f_task_ = NULL;
  f_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_req_t_req::~pb_req_t_req() {
  // @@protoc_insertion_point(destructor:pb_req_t_req)
  SharedDtor();
}

void pb_req_t_req::SharedDtor() {
  if (this != default_instance_) {
    delete f_project_;
    delete f_task_;
    delete f_report_;
  }
}

void pb_req_t_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_req_t_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_req_t_req_descriptor_;
}

const pb_req_t_req& pb_req_t_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  return *default_instance_;
}

pb_req_t_req* pb_req_t_req::default_instance_ = NULL;

pb_req_t_req* pb_req_t_req::New() const {
  return new pb_req_t_req;
}

void pb_req_t_req::Clear() {
  if (_has_bits_[0 / 32] & 209) {
    f_cmd_ = 0;
    if (has_f_project()) {
      if (f_project_ != NULL) f_project_->::pb_req_t_project::Clear();
    }
    if (has_f_task()) {
      if (f_task_ != NULL) f_task_->::pb_req_t_task::Clear();
    }
    if (has_f_report()) {
      if (f_report_ != NULL) f_report_->::pb_req_t_report::Clear();
    }
  }
  f_i_args_.Clear();
  f_s_args_.Clear();
  f_attch_.Clear();
  f_prj_member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_req_t_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_req_t_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_cmd_)));
          set_has_f_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_i_args;
        break;
      }

      // repeated int32 f_i_args = 2;
      case 2: {
        if (tag == 16) {
         parse_f_i_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_f_i_args())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_f_i_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_i_args;
        if (input->ExpectTag(26)) goto parse_f_s_args;
        break;
      }

      // repeated string f_s_args = 3;
      case 3: {
        if (tag == 26) {
         parse_f_s_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_s_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_s_args(this->f_s_args_size() - 1).data(),
            this->f_s_args(this->f_s_args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_s_args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_s_args;
        if (input->ExpectTag(34)) goto parse_f_attch;
        break;
      }

      // repeated .pb_req_t_attach f_attch = 4;
      case 4: {
        if (tag == 34) {
         parse_f_attch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_attch;
        if (input->ExpectTag(42)) goto parse_f_project;
        break;
      }

      // optional .pb_req_t_project f_project = 5;
      case 5: {
        if (tag == 42) {
         parse_f_project:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_project()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_member;
        break;
      }

      // repeated .pb_req_t_user f_prj_member = 6;
      case 6: {
        if (tag == 50) {
         parse_f_prj_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_member;
        if (input->ExpectTag(58)) goto parse_f_task;
        break;
      }

      // optional .pb_req_t_task f_task = 7;
      case 7: {
        if (tag == 58) {
         parse_f_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_report;
        break;
      }

      // optional .pb_req_t_report f_report = 8;
      case 8: {
        if (tag == 66) {
         parse_f_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_req_t_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_req_t_req)
  return false;
#undef DO_
}

void pb_req_t_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_req_t_req)
  // optional int32 f_cmd = 1;
  if (has_f_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_cmd(), output);
  }

  // repeated int32 f_i_args = 2;
  for (int i = 0; i < this->f_i_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->f_i_args(i), output);
  }

  // repeated string f_s_args = 3;
  for (int i = 0; i < this->f_s_args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_s_args(i).data(), this->f_s_args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_s_args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->f_s_args(i), output);
  }

  // repeated .pb_req_t_attach f_attch = 4;
  for (int i = 0; i < this->f_attch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->f_attch(i), output);
  }

  // optional .pb_req_t_project f_project = 5;
  if (has_f_project()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_project(), output);
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_prj_member(i), output);
  }

  // optional .pb_req_t_task f_task = 7;
  if (has_f_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_task(), output);
  }

  // optional .pb_req_t_report f_report = 8;
  if (has_f_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_req_t_req)
}

::google::protobuf::uint8* pb_req_t_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_req_t_req)
  // optional int32 f_cmd = 1;
  if (has_f_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_cmd(), target);
  }

  // repeated int32 f_i_args = 2;
  for (int i = 0; i < this->f_i_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->f_i_args(i), target);
  }

  // repeated string f_s_args = 3;
  for (int i = 0; i < this->f_s_args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_s_args(i).data(), this->f_s_args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_s_args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->f_s_args(i), target);
  }

  // repeated .pb_req_t_attach f_attch = 4;
  for (int i = 0; i < this->f_attch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->f_attch(i), target);
  }

  // optional .pb_req_t_project f_project = 5;
  if (has_f_project()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_project(), target);
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_prj_member(i), target);
  }

  // optional .pb_req_t_task f_task = 7;
  if (has_f_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_task(), target);
  }

  // optional .pb_req_t_report f_report = 8;
  if (has_f_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_req_t_req)
  return target;
}

int pb_req_t_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_cmd = 1;
    if (has_f_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_cmd());
    }

    // optional .pb_req_t_project f_project = 5;
    if (has_f_project()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_project());
    }

    // optional .pb_req_t_task f_task = 7;
    if (has_f_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task());
    }

    // optional .pb_req_t_report f_report = 8;
    if (has_f_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_report());
    }

  }
  // repeated int32 f_i_args = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->f_i_args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->f_i_args(i));
    }
    total_size += 1 * this->f_i_args_size() + data_size;
  }

  // repeated string f_s_args = 3;
  total_size += 1 * this->f_s_args_size();
  for (int i = 0; i < this->f_s_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_s_args(i));
  }

  // repeated .pb_req_t_attach f_attch = 4;
  total_size += 1 * this->f_attch_size();
  for (int i = 0; i < this->f_attch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attch(i));
  }

  // repeated .pb_req_t_user f_prj_member = 6;
  total_size += 1 * this->f_prj_member_size();
  for (int i = 0; i < this->f_prj_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_req_t_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_req_t_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_req_t_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_req_t_req::MergeFrom(const pb_req_t_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_i_args_.MergeFrom(from.f_i_args_);
  f_s_args_.MergeFrom(from.f_s_args_);
  f_attch_.MergeFrom(from.f_attch_);
  f_prj_member_.MergeFrom(from.f_prj_member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_cmd()) {
      set_f_cmd(from.f_cmd());
    }
    if (from.has_f_project()) {
      mutable_f_project()->::pb_req_t_project::MergeFrom(from.f_project());
    }
    if (from.has_f_task()) {
      mutable_f_task()->::pb_req_t_task::MergeFrom(from.f_task());
    }
    if (from.has_f_report()) {
      mutable_f_report()->::pb_req_t_report::MergeFrom(from.f_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_req_t_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_req_t_req::CopyFrom(const pb_req_t_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_req_t_req::IsInitialized() const {

  return true;
}

void pb_req_t_req::Swap(pb_req_t_req* other) {
  if (other != this) {
    std::swap(f_cmd_, other->f_cmd_);
    f_i_args_.Swap(&other->f_i_args_);
    f_s_args_.Swap(&other->f_s_args_);
    f_attch_.Swap(&other->f_attch_);
    std::swap(f_project_, other->f_project_);
    f_prj_member_.Swap(&other->f_prj_member_);
    std::swap(f_task_, other->f_task_);
    std::swap(f_report_, other->f_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_req_t_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_req_t_req_descriptor_;
  metadata.reflection = pb_req_t_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
