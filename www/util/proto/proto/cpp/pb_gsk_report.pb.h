// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk_report.proto

#ifndef PROTOBUF_pb_5fgsk_5freport_2eproto__INCLUDED
#define PROTOBUF_pb_5fgsk_5freport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto();
void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto();

class pb_report_t_base_info;
class pb_report_t_msg_item;
class pb_report_t_client;
class pb_report_t_report;

// ===================================================================

class pb_report_t_base_info : public ::google::protobuf::Message {
 public:
  pb_report_t_base_info();
  virtual ~pb_report_t_base_info();

  pb_report_t_base_info(const pb_report_t_base_info& from);

  inline pb_report_t_base_info& operator=(const pb_report_t_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_report_t_base_info& default_instance();

  void Swap(pb_report_t_base_info* other);

  // implements Message ----------------------------------------------

  pb_report_t_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_report_t_base_info& from);
  void MergeFrom(const pb_report_t_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional int32 f_clt = 2;
  inline bool has_f_clt() const;
  inline void clear_f_clt();
  static const int kFCltFieldNumber = 2;
  inline ::google::protobuf::int32 f_clt() const;
  inline void set_f_clt(::google::protobuf::int32 value);

  // optional string f_phone = 3;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 3;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional int32 f_dye = 4;
  inline bool has_f_dye() const;
  inline void clear_f_dye();
  static const int kFDyeFieldNumber = 4;
  inline ::google::protobuf::int32 f_dye() const;
  inline void set_f_dye(::google::protobuf::int32 value);

  // optional string f_ip = 5;
  inline bool has_f_ip() const;
  inline void clear_f_ip();
  static const int kFIpFieldNumber = 5;
  inline const ::std::string& f_ip() const;
  inline void set_f_ip(const ::std::string& value);
  inline void set_f_ip(const char* value);
  inline void set_f_ip(const char* value, size_t size);
  inline ::std::string* mutable_f_ip();
  inline ::std::string* release_f_ip();
  inline void set_allocated_f_ip(::std::string* f_ip);

  // optional string f_name = 6;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 6;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_province = 7;
  inline bool has_f_province() const;
  inline void clear_f_province();
  static const int kFProvinceFieldNumber = 7;
  inline const ::std::string& f_province() const;
  inline void set_f_province(const ::std::string& value);
  inline void set_f_province(const char* value);
  inline void set_f_province(const char* value, size_t size);
  inline ::std::string* mutable_f_province();
  inline ::std::string* release_f_province();
  inline void set_allocated_f_province(::std::string* f_province);

  // optional string f_city = 8;
  inline bool has_f_city() const;
  inline void clear_f_city();
  static const int kFCityFieldNumber = 8;
  inline const ::std::string& f_city() const;
  inline void set_f_city(const ::std::string& value);
  inline void set_f_city(const char* value);
  inline void set_f_city(const char* value, size_t size);
  inline ::std::string* mutable_f_city();
  inline ::std::string* release_f_city();
  inline void set_allocated_f_city(::std::string* f_city);

  // optional string f_company_type = 9;
  inline bool has_f_company_type() const;
  inline void clear_f_company_type();
  static const int kFCompanyTypeFieldNumber = 9;
  inline const ::std::string& f_company_type() const;
  inline void set_f_company_type(const ::std::string& value);
  inline void set_f_company_type(const char* value);
  inline void set_f_company_type(const char* value, size_t size);
  inline ::std::string* mutable_f_company_type();
  inline ::std::string* release_f_company_type();
  inline void set_allocated_f_company_type(::std::string* f_company_type);

  // optional string f_years_of_working = 10;
  inline bool has_f_years_of_working() const;
  inline void clear_f_years_of_working();
  static const int kFYearsOfWorkingFieldNumber = 10;
  inline const ::std::string& f_years_of_working() const;
  inline void set_f_years_of_working(const ::std::string& value);
  inline void set_f_years_of_working(const char* value);
  inline void set_f_years_of_working(const char* value, size_t size);
  inline ::std::string* mutable_f_years_of_working();
  inline ::std::string* release_f_years_of_working();
  inline void set_allocated_f_years_of_working(::std::string* f_years_of_working);

  // optional string f_job_type = 11;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 11;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional string f_job_title = 12;
  inline bool has_f_job_title() const;
  inline void clear_f_job_title();
  static const int kFJobTitleFieldNumber = 12;
  inline const ::std::string& f_job_title() const;
  inline void set_f_job_title(const ::std::string& value);
  inline void set_f_job_title(const char* value);
  inline void set_f_job_title(const char* value, size_t size);
  inline ::std::string* mutable_f_job_title();
  inline ::std::string* release_f_job_title();
  inline void set_allocated_f_job_title(::std::string* f_job_title);

  // optional int32 f_inviter_uid = 13;
  inline bool has_f_inviter_uid() const;
  inline void clear_f_inviter_uid();
  static const int kFInviterUidFieldNumber = 13;
  inline ::google::protobuf::int32 f_inviter_uid() const;
  inline void set_f_inviter_uid(::google::protobuf::int32 value);

  // optional int32 f_friend_num = 14;
  inline bool has_f_friend_num() const;
  inline void clear_f_friend_num();
  static const int kFFriendNumFieldNumber = 14;
  inline ::google::protobuf::int32 f_friend_num() const;
  inline void set_f_friend_num(::google::protobuf::int32 value);

  // optional int32 f_continuity_day_num = 15;
  inline bool has_f_continuity_day_num() const;
  inline void clear_f_continuity_day_num();
  static const int kFContinuityDayNumFieldNumber = 15;
  inline ::google::protobuf::int32 f_continuity_day_num() const;
  inline void set_f_continuity_day_num(::google::protobuf::int32 value);

  // optional int32 f_project_members_num = 16;
  inline bool has_f_project_members_num() const;
  inline void clear_f_project_members_num();
  static const int kFProjectMembersNumFieldNumber = 16;
  inline ::google::protobuf::int32 f_project_members_num() const;
  inline void set_f_project_members_num(::google::protobuf::int32 value);

  // optional string f_company = 17;
  inline bool has_f_company() const;
  inline void clear_f_company();
  static const int kFCompanyFieldNumber = 17;
  inline const ::std::string& f_company() const;
  inline void set_f_company(const ::std::string& value);
  inline void set_f_company(const char* value);
  inline void set_f_company(const char* value, size_t size);
  inline ::std::string* mutable_f_company();
  inline ::std::string* release_f_company();
  inline void set_allocated_f_company(::std::string* f_company);

  // @@protoc_insertion_point(class_scope:pb_report_t_base_info)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_clt();
  inline void clear_has_f_clt();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_dye();
  inline void clear_has_f_dye();
  inline void set_has_f_ip();
  inline void clear_has_f_ip();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_province();
  inline void clear_has_f_province();
  inline void set_has_f_city();
  inline void clear_has_f_city();
  inline void set_has_f_company_type();
  inline void clear_has_f_company_type();
  inline void set_has_f_years_of_working();
  inline void clear_has_f_years_of_working();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_job_title();
  inline void clear_has_f_job_title();
  inline void set_has_f_inviter_uid();
  inline void clear_has_f_inviter_uid();
  inline void set_has_f_friend_num();
  inline void clear_has_f_friend_num();
  inline void set_has_f_continuity_day_num();
  inline void clear_has_f_continuity_day_num();
  inline void set_has_f_project_members_num();
  inline void clear_has_f_project_members_num();
  inline void set_has_f_company();
  inline void clear_has_f_company();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::int32 f_clt_;
  ::std::string* f_phone_;
  ::std::string* f_ip_;
  ::std::string* f_name_;
  ::std::string* f_province_;
  ::std::string* f_city_;
  ::google::protobuf::int32 f_dye_;
  ::google::protobuf::int32 f_inviter_uid_;
  ::std::string* f_company_type_;
  ::std::string* f_years_of_working_;
  ::std::string* f_job_type_;
  ::std::string* f_job_title_;
  ::google::protobuf::int32 f_friend_num_;
  ::google::protobuf::int32 f_continuity_day_num_;
  ::std::string* f_company_;
  ::google::protobuf::int32 f_project_members_num_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto();

  void InitAsDefaultInstance();
  static pb_report_t_base_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_report_t_msg_item : public ::google::protobuf::Message {
 public:
  pb_report_t_msg_item();
  virtual ~pb_report_t_msg_item();

  pb_report_t_msg_item(const pb_report_t_msg_item& from);

  inline pb_report_t_msg_item& operator=(const pb_report_t_msg_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_report_t_msg_item& default_instance();

  void Swap(pb_report_t_msg_item* other);

  // implements Message ----------------------------------------------

  pb_report_t_msg_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_report_t_msg_item& from);
  void MergeFrom(const pb_report_t_msg_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_msg_id = 1;
  inline bool has_f_msg_id() const;
  inline void clear_f_msg_id();
  static const int kFMsgIdFieldNumber = 1;
  inline const ::std::string& f_msg_id() const;
  inline void set_f_msg_id(const ::std::string& value);
  inline void set_f_msg_id(const char* value);
  inline void set_f_msg_id(const char* value, size_t size);
  inline ::std::string* mutable_f_msg_id();
  inline ::std::string* release_f_msg_id();
  inline void set_allocated_f_msg_id(::std::string* f_msg_id);

  // optional uint32 f_msg_type = 2;
  inline bool has_f_msg_type() const;
  inline void clear_f_msg_type();
  static const int kFMsgTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 f_msg_type() const;
  inline void set_f_msg_type(::google::protobuf::uint32 value);

  // optional string f_msg_body = 3;
  inline bool has_f_msg_body() const;
  inline void clear_f_msg_body();
  static const int kFMsgBodyFieldNumber = 3;
  inline const ::std::string& f_msg_body() const;
  inline void set_f_msg_body(const ::std::string& value);
  inline void set_f_msg_body(const char* value);
  inline void set_f_msg_body(const char* value, size_t size);
  inline ::std::string* mutable_f_msg_body();
  inline ::std::string* release_f_msg_body();
  inline void set_allocated_f_msg_body(::std::string* f_msg_body);

  // optional int32 f_sender_id = 4;
  inline bool has_f_sender_id() const;
  inline void clear_f_sender_id();
  static const int kFSenderIdFieldNumber = 4;
  inline ::google::protobuf::int32 f_sender_id() const;
  inline void set_f_sender_id(::google::protobuf::int32 value);

  // optional string f_sender_name = 5;
  inline bool has_f_sender_name() const;
  inline void clear_f_sender_name();
  static const int kFSenderNameFieldNumber = 5;
  inline const ::std::string& f_sender_name() const;
  inline void set_f_sender_name(const ::std::string& value);
  inline void set_f_sender_name(const char* value);
  inline void set_f_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_name();
  inline ::std::string* release_f_sender_name();
  inline void set_allocated_f_sender_name(::std::string* f_sender_name);

  // optional string f_sender_remark = 6;
  inline bool has_f_sender_remark() const;
  inline void clear_f_sender_remark();
  static const int kFSenderRemarkFieldNumber = 6;
  inline const ::std::string& f_sender_remark() const;
  inline void set_f_sender_remark(const ::std::string& value);
  inline void set_f_sender_remark(const char* value);
  inline void set_f_sender_remark(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_remark();
  inline ::std::string* release_f_sender_remark();
  inline void set_allocated_f_sender_remark(::std::string* f_sender_remark);

  // optional string f_sender_avatar = 7;
  inline bool has_f_sender_avatar() const;
  inline void clear_f_sender_avatar();
  static const int kFSenderAvatarFieldNumber = 7;
  inline const ::std::string& f_sender_avatar() const;
  inline void set_f_sender_avatar(const ::std::string& value);
  inline void set_f_sender_avatar(const char* value);
  inline void set_f_sender_avatar(const char* value, size_t size);
  inline ::std::string* mutable_f_sender_avatar();
  inline ::std::string* release_f_sender_avatar();
  inline void set_allocated_f_sender_avatar(::std::string* f_sender_avatar);

  // optional string f_group_id = 8;
  inline bool has_f_group_id() const;
  inline void clear_f_group_id();
  static const int kFGroupIdFieldNumber = 8;
  inline const ::std::string& f_group_id() const;
  inline void set_f_group_id(const ::std::string& value);
  inline void set_f_group_id(const char* value);
  inline void set_f_group_id(const char* value, size_t size);
  inline ::std::string* mutable_f_group_id();
  inline ::std::string* release_f_group_id();
  inline void set_allocated_f_group_id(::std::string* f_group_id);

  // optional uint32 f_group_type = 9;
  inline bool has_f_group_type() const;
  inline void clear_f_group_type();
  static const int kFGroupTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 f_group_type() const;
  inline void set_f_group_type(::google::protobuf::uint32 value);

  // optional string f_group_name = 10;
  inline bool has_f_group_name() const;
  inline void clear_f_group_name();
  static const int kFGroupNameFieldNumber = 10;
  inline const ::std::string& f_group_name() const;
  inline void set_f_group_name(const ::std::string& value);
  inline void set_f_group_name(const char* value);
  inline void set_f_group_name(const char* value, size_t size);
  inline ::std::string* mutable_f_group_name();
  inline ::std::string* release_f_group_name();
  inline void set_allocated_f_group_name(::std::string* f_group_name);

  // optional string f_group_desc = 11;
  inline bool has_f_group_desc() const;
  inline void clear_f_group_desc();
  static const int kFGroupDescFieldNumber = 11;
  inline const ::std::string& f_group_desc() const;
  inline void set_f_group_desc(const ::std::string& value);
  inline void set_f_group_desc(const char* value);
  inline void set_f_group_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_group_desc();
  inline ::std::string* release_f_group_desc();
  inline void set_allocated_f_group_desc(::std::string* f_group_desc);

  // optional int32 f_send_time = 12;
  inline bool has_f_send_time() const;
  inline void clear_f_send_time();
  static const int kFSendTimeFieldNumber = 12;
  inline ::google::protobuf::int32 f_send_time() const;
  inline void set_f_send_time(::google::protobuf::int32 value);

  // optional int32 f_msg_seq_id = 13;
  inline bool has_f_msg_seq_id() const;
  inline void clear_f_msg_seq_id();
  static const int kFMsgSeqIdFieldNumber = 13;
  inline ::google::protobuf::int32 f_msg_seq_id() const;
  inline void set_f_msg_seq_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_report_t_msg_item)
 private:
  inline void set_has_f_msg_id();
  inline void clear_has_f_msg_id();
  inline void set_has_f_msg_type();
  inline void clear_has_f_msg_type();
  inline void set_has_f_msg_body();
  inline void clear_has_f_msg_body();
  inline void set_has_f_sender_id();
  inline void clear_has_f_sender_id();
  inline void set_has_f_sender_name();
  inline void clear_has_f_sender_name();
  inline void set_has_f_sender_remark();
  inline void clear_has_f_sender_remark();
  inline void set_has_f_sender_avatar();
  inline void clear_has_f_sender_avatar();
  inline void set_has_f_group_id();
  inline void clear_has_f_group_id();
  inline void set_has_f_group_type();
  inline void clear_has_f_group_type();
  inline void set_has_f_group_name();
  inline void clear_has_f_group_name();
  inline void set_has_f_group_desc();
  inline void clear_has_f_group_desc();
  inline void set_has_f_send_time();
  inline void clear_has_f_send_time();
  inline void set_has_f_msg_seq_id();
  inline void clear_has_f_msg_seq_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_msg_id_;
  ::std::string* f_msg_body_;
  ::google::protobuf::uint32 f_msg_type_;
  ::google::protobuf::int32 f_sender_id_;
  ::std::string* f_sender_name_;
  ::std::string* f_sender_remark_;
  ::std::string* f_sender_avatar_;
  ::std::string* f_group_id_;
  ::std::string* f_group_name_;
  ::google::protobuf::uint32 f_group_type_;
  ::google::protobuf::int32 f_send_time_;
  ::std::string* f_group_desc_;
  ::google::protobuf::int32 f_msg_seq_id_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto();

  void InitAsDefaultInstance();
  static pb_report_t_msg_item* default_instance_;
};
// -------------------------------------------------------------------

class pb_report_t_client : public ::google::protobuf::Message {
 public:
  pb_report_t_client();
  virtual ~pb_report_t_client();

  pb_report_t_client(const pb_report_t_client& from);

  inline pb_report_t_client& operator=(const pb_report_t_client& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_report_t_client& default_instance();

  void Swap(pb_report_t_client* other);

  // implements Message ----------------------------------------------

  pb_report_t_client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_report_t_client& from);
  void MergeFrom(const pb_report_t_client& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_phone_info = 1;
  inline bool has_f_phone_info() const;
  inline void clear_f_phone_info();
  static const int kFPhoneInfoFieldNumber = 1;
  inline const ::std::string& f_phone_info() const;
  inline void set_f_phone_info(const ::std::string& value);
  inline void set_f_phone_info(const char* value);
  inline void set_f_phone_info(const char* value, size_t size);
  inline ::std::string* mutable_f_phone_info();
  inline ::std::string* release_f_phone_info();
  inline void set_allocated_f_phone_info(::std::string* f_phone_info);

  // optional string f_os = 2;
  inline bool has_f_os() const;
  inline void clear_f_os();
  static const int kFOsFieldNumber = 2;
  inline const ::std::string& f_os() const;
  inline void set_f_os(const ::std::string& value);
  inline void set_f_os(const char* value);
  inline void set_f_os(const char* value, size_t size);
  inline ::std::string* mutable_f_os();
  inline ::std::string* release_f_os();
  inline void set_allocated_f_os(::std::string* f_os);

  // optional string f_sp = 3;
  inline bool has_f_sp() const;
  inline void clear_f_sp();
  static const int kFSpFieldNumber = 3;
  inline const ::std::string& f_sp() const;
  inline void set_f_sp(const ::std::string& value);
  inline void set_f_sp(const char* value);
  inline void set_f_sp(const char* value, size_t size);
  inline ::std::string* mutable_f_sp();
  inline ::std::string* release_f_sp();
  inline void set_allocated_f_sp(::std::string* f_sp);

  // optional string f_network = 4;
  inline bool has_f_network() const;
  inline void clear_f_network();
  static const int kFNetworkFieldNumber = 4;
  inline const ::std::string& f_network() const;
  inline void set_f_network(const ::std::string& value);
  inline void set_f_network(const char* value);
  inline void set_f_network(const char* value, size_t size);
  inline ::std::string* mutable_f_network();
  inline ::std::string* release_f_network();
  inline void set_allocated_f_network(::std::string* f_network);

  // optional int32 f_version = 5;
  inline bool has_f_version() const;
  inline void clear_f_version();
  static const int kFVersionFieldNumber = 5;
  inline ::google::protobuf::int32 f_version() const;
  inline void set_f_version(::google::protobuf::int32 value);

  // optional int32 f_client_id = 6;
  inline bool has_f_client_id() const;
  inline void clear_f_client_id();
  static const int kFClientIdFieldNumber = 6;
  inline ::google::protobuf::int32 f_client_id() const;
  inline void set_f_client_id(::google::protobuf::int32 value);

  // optional int32 f_channel_id = 7;
  inline bool has_f_channel_id() const;
  inline void clear_f_channel_id();
  static const int kFChannelIdFieldNumber = 7;
  inline ::google::protobuf::int32 f_channel_id() const;
  inline void set_f_channel_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_report_t_client)
 private:
  inline void set_has_f_phone_info();
  inline void clear_has_f_phone_info();
  inline void set_has_f_os();
  inline void clear_has_f_os();
  inline void set_has_f_sp();
  inline void clear_has_f_sp();
  inline void set_has_f_network();
  inline void clear_has_f_network();
  inline void set_has_f_version();
  inline void clear_has_f_version();
  inline void set_has_f_client_id();
  inline void clear_has_f_client_id();
  inline void set_has_f_channel_id();
  inline void clear_has_f_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_phone_info_;
  ::std::string* f_os_;
  ::std::string* f_sp_;
  ::std::string* f_network_;
  ::google::protobuf::int32 f_version_;
  ::google::protobuf::int32 f_client_id_;
  ::google::protobuf::int32 f_channel_id_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto();

  void InitAsDefaultInstance();
  static pb_report_t_client* default_instance_;
};
// -------------------------------------------------------------------

class pb_report_t_report : public ::google::protobuf::Message {
 public:
  pb_report_t_report();
  virtual ~pb_report_t_report();

  pb_report_t_report(const pb_report_t_report& from);

  inline pb_report_t_report& operator=(const pb_report_t_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_report_t_report& default_instance();

  void Swap(pb_report_t_report* other);

  // implements Message ----------------------------------------------

  pb_report_t_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_report_t_report& from);
  void MergeFrom(const pb_report_t_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_msg_type = 1;
  inline bool has_f_msg_type() const;
  inline void clear_f_msg_type();
  static const int kFMsgTypeFieldNumber = 1;
  inline ::google::protobuf::int32 f_msg_type() const;
  inline void set_f_msg_type(::google::protobuf::int32 value);

  // optional int32 f_i_cmd = 2;
  inline bool has_f_i_cmd() const;
  inline void clear_f_i_cmd();
  static const int kFICmdFieldNumber = 2;
  inline ::google::protobuf::int32 f_i_cmd() const;
  inline void set_f_i_cmd(::google::protobuf::int32 value);

  // optional string f_s_cmd = 3;
  inline bool has_f_s_cmd() const;
  inline void clear_f_s_cmd();
  static const int kFSCmdFieldNumber = 3;
  inline const ::std::string& f_s_cmd() const;
  inline void set_f_s_cmd(const ::std::string& value);
  inline void set_f_s_cmd(const char* value);
  inline void set_f_s_cmd(const char* value, size_t size);
  inline ::std::string* mutable_f_s_cmd();
  inline ::std::string* release_f_s_cmd();
  inline void set_allocated_f_s_cmd(::std::string* f_s_cmd);

  // optional int32 f_time = 4;
  inline bool has_f_time() const;
  inline void clear_f_time();
  static const int kFTimeFieldNumber = 4;
  inline ::google::protobuf::int32 f_time() const;
  inline void set_f_time(::google::protobuf::int32 value);

  // optional string f_log = 5;
  inline bool has_f_log() const;
  inline void clear_f_log();
  static const int kFLogFieldNumber = 5;
  inline const ::std::string& f_log() const;
  inline void set_f_log(const ::std::string& value);
  inline void set_f_log(const char* value);
  inline void set_f_log(const char* value, size_t size);
  inline ::std::string* mutable_f_log();
  inline ::std::string* release_f_log();
  inline void set_allocated_f_log(::std::string* f_log);

  // optional .pb_report_t_base_info f_info = 6;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 6;
  inline const ::pb_report_t_base_info& f_info() const;
  inline ::pb_report_t_base_info* mutable_f_info();
  inline ::pb_report_t_base_info* release_f_info();
  inline void set_allocated_f_info(::pb_report_t_base_info* f_info);

  // optional .pb_report_t_client f_client = 7;
  inline bool has_f_client() const;
  inline void clear_f_client();
  static const int kFClientFieldNumber = 7;
  inline const ::pb_report_t_client& f_client() const;
  inline ::pb_report_t_client* mutable_f_client();
  inline ::pb_report_t_client* release_f_client();
  inline void set_allocated_f_client(::pb_report_t_client* f_client);

  // optional .pb_report_t_msg_item f_msg_item = 8;
  inline bool has_f_msg_item() const;
  inline void clear_f_msg_item();
  static const int kFMsgItemFieldNumber = 8;
  inline const ::pb_report_t_msg_item& f_msg_item() const;
  inline ::pb_report_t_msg_item* mutable_f_msg_item();
  inline ::pb_report_t_msg_item* release_f_msg_item();
  inline void set_allocated_f_msg_item(::pb_report_t_msg_item* f_msg_item);

  // @@protoc_insertion_point(class_scope:pb_report_t_report)
 private:
  inline void set_has_f_msg_type();
  inline void clear_has_f_msg_type();
  inline void set_has_f_i_cmd();
  inline void clear_has_f_i_cmd();
  inline void set_has_f_s_cmd();
  inline void clear_has_f_s_cmd();
  inline void set_has_f_time();
  inline void clear_has_f_time();
  inline void set_has_f_log();
  inline void clear_has_f_log();
  inline void set_has_f_info();
  inline void clear_has_f_info();
  inline void set_has_f_client();
  inline void clear_has_f_client();
  inline void set_has_f_msg_item();
  inline void clear_has_f_msg_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 f_msg_type_;
  ::google::protobuf::int32 f_i_cmd_;
  ::std::string* f_s_cmd_;
  ::std::string* f_log_;
  ::pb_report_t_base_info* f_info_;
  ::pb_report_t_client* f_client_;
  ::pb_report_t_msg_item* f_msg_item_;
  ::google::protobuf::int32 f_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freport_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freport_2eproto();

  void InitAsDefaultInstance();
  static pb_report_t_report* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_report_t_base_info

// optional uint32 f_uin = 1;
inline bool pb_report_t_base_info::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_report_t_base_info::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_report_t_base_info::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_report_t_base_info::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_report_t_base_info::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_uin)
  return f_uin_;
}
inline void pb_report_t_base_info::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_uin)
}

// optional int32 f_clt = 2;
inline bool pb_report_t_base_info::has_f_clt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_report_t_base_info::set_has_f_clt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_report_t_base_info::clear_has_f_clt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_report_t_base_info::clear_f_clt() {
  f_clt_ = 0;
  clear_has_f_clt();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_clt() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_clt)
  return f_clt_;
}
inline void pb_report_t_base_info::set_f_clt(::google::protobuf::int32 value) {
  set_has_f_clt();
  f_clt_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_clt)
}

// optional string f_phone = 3;
inline bool pb_report_t_base_info::has_f_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_report_t_base_info::set_has_f_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_report_t_base_info::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_report_t_base_info::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_report_t_base_info::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_phone)
  return *f_phone_;
}
inline void pb_report_t_base_info::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_phone)
}
inline void pb_report_t_base_info::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_phone)
}
inline void pb_report_t_base_info::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_phone)
}
inline ::std::string* pb_report_t_base_info::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_phone)
  return f_phone_;
}
inline ::std::string* pb_report_t_base_info::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_phone)
}

// optional int32 f_dye = 4;
inline bool pb_report_t_base_info::has_f_dye() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_report_t_base_info::set_has_f_dye() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_report_t_base_info::clear_has_f_dye() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_report_t_base_info::clear_f_dye() {
  f_dye_ = 0;
  clear_has_f_dye();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_dye() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_dye)
  return f_dye_;
}
inline void pb_report_t_base_info::set_f_dye(::google::protobuf::int32 value) {
  set_has_f_dye();
  f_dye_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_dye)
}

// optional string f_ip = 5;
inline bool pb_report_t_base_info::has_f_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_report_t_base_info::set_has_f_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_report_t_base_info::clear_has_f_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_report_t_base_info::clear_f_ip() {
  if (f_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_ip_->clear();
  }
  clear_has_f_ip();
}
inline const ::std::string& pb_report_t_base_info::f_ip() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_ip)
  return *f_ip_;
}
inline void pb_report_t_base_info::set_f_ip(const ::std::string& value) {
  set_has_f_ip();
  if (f_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_ip_ = new ::std::string;
  }
  f_ip_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_ip)
}
inline void pb_report_t_base_info::set_f_ip(const char* value) {
  set_has_f_ip();
  if (f_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_ip_ = new ::std::string;
  }
  f_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_ip)
}
inline void pb_report_t_base_info::set_f_ip(const char* value, size_t size) {
  set_has_f_ip();
  if (f_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_ip_ = new ::std::string;
  }
  f_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_ip)
}
inline ::std::string* pb_report_t_base_info::mutable_f_ip() {
  set_has_f_ip();
  if (f_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_ip)
  return f_ip_;
}
inline ::std::string* pb_report_t_base_info::release_f_ip() {
  clear_has_f_ip();
  if (f_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_ip_;
    f_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_ip(::std::string* f_ip) {
  if (f_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_ip_;
  }
  if (f_ip) {
    set_has_f_ip();
    f_ip_ = f_ip;
  } else {
    clear_has_f_ip();
    f_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_ip)
}

// optional string f_name = 6;
inline bool pb_report_t_base_info::has_f_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_report_t_base_info::set_has_f_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_report_t_base_info::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_report_t_base_info::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_report_t_base_info::f_name() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_name)
  return *f_name_;
}
inline void pb_report_t_base_info::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_name)
}
inline void pb_report_t_base_info::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_name)
}
inline void pb_report_t_base_info::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_name)
}
inline ::std::string* pb_report_t_base_info::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_name)
  return f_name_;
}
inline ::std::string* pb_report_t_base_info::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_name)
}

// optional string f_province = 7;
inline bool pb_report_t_base_info::has_f_province() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_report_t_base_info::set_has_f_province() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_report_t_base_info::clear_has_f_province() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_report_t_base_info::clear_f_province() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_->clear();
  }
  clear_has_f_province();
}
inline const ::std::string& pb_report_t_base_info::f_province() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_province)
  return *f_province_;
}
inline void pb_report_t_base_info::set_f_province(const ::std::string& value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_province)
}
inline void pb_report_t_base_info::set_f_province(const char* value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_province)
}
inline void pb_report_t_base_info::set_f_province(const char* value, size_t size) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_province)
}
inline ::std::string* pb_report_t_base_info::mutable_f_province() {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_province)
  return f_province_;
}
inline ::std::string* pb_report_t_base_info::release_f_province() {
  clear_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_province_;
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_province(::std::string* f_province) {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_province) {
    set_has_f_province();
    f_province_ = f_province;
  } else {
    clear_has_f_province();
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_province)
}

// optional string f_city = 8;
inline bool pb_report_t_base_info::has_f_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_report_t_base_info::set_has_f_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_report_t_base_info::clear_has_f_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_report_t_base_info::clear_f_city() {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_->clear();
  }
  clear_has_f_city();
}
inline const ::std::string& pb_report_t_base_info::f_city() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_city)
  return *f_city_;
}
inline void pb_report_t_base_info::set_f_city(const ::std::string& value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_city)
}
inline void pb_report_t_base_info::set_f_city(const char* value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_city)
}
inline void pb_report_t_base_info::set_f_city(const char* value, size_t size) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_city)
}
inline ::std::string* pb_report_t_base_info::mutable_f_city() {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_city)
  return f_city_;
}
inline ::std::string* pb_report_t_base_info::release_f_city() {
  clear_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_city_;
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_city(::std::string* f_city) {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_city) {
    set_has_f_city();
    f_city_ = f_city;
  } else {
    clear_has_f_city();
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_city)
}

// optional string f_company_type = 9;
inline bool pb_report_t_base_info::has_f_company_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_report_t_base_info::set_has_f_company_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_report_t_base_info::clear_has_f_company_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_report_t_base_info::clear_f_company_type() {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_->clear();
  }
  clear_has_f_company_type();
}
inline const ::std::string& pb_report_t_base_info::f_company_type() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_company_type)
  return *f_company_type_;
}
inline void pb_report_t_base_info::set_f_company_type(const ::std::string& value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_company_type)
}
inline void pb_report_t_base_info::set_f_company_type(const char* value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_company_type)
}
inline void pb_report_t_base_info::set_f_company_type(const char* value, size_t size) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_company_type)
}
inline ::std::string* pb_report_t_base_info::mutable_f_company_type() {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_company_type)
  return f_company_type_;
}
inline ::std::string* pb_report_t_base_info::release_f_company_type() {
  clear_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_type_;
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_company_type(::std::string* f_company_type) {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_type) {
    set_has_f_company_type();
    f_company_type_ = f_company_type;
  } else {
    clear_has_f_company_type();
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_company_type)
}

// optional string f_years_of_working = 10;
inline bool pb_report_t_base_info::has_f_years_of_working() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_report_t_base_info::set_has_f_years_of_working() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_report_t_base_info::clear_has_f_years_of_working() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_report_t_base_info::clear_f_years_of_working() {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_->clear();
  }
  clear_has_f_years_of_working();
}
inline const ::std::string& pb_report_t_base_info::f_years_of_working() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_years_of_working)
  return *f_years_of_working_;
}
inline void pb_report_t_base_info::set_f_years_of_working(const ::std::string& value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_years_of_working)
}
inline void pb_report_t_base_info::set_f_years_of_working(const char* value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_years_of_working)
}
inline void pb_report_t_base_info::set_f_years_of_working(const char* value, size_t size) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_years_of_working)
}
inline ::std::string* pb_report_t_base_info::mutable_f_years_of_working() {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_years_of_working)
  return f_years_of_working_;
}
inline ::std::string* pb_report_t_base_info::release_f_years_of_working() {
  clear_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_years_of_working_;
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_years_of_working(::std::string* f_years_of_working) {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_years_of_working_;
  }
  if (f_years_of_working) {
    set_has_f_years_of_working();
    f_years_of_working_ = f_years_of_working;
  } else {
    clear_has_f_years_of_working();
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_years_of_working)
}

// optional string f_job_type = 11;
inline bool pb_report_t_base_info::has_f_job_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_report_t_base_info::set_has_f_job_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_report_t_base_info::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_report_t_base_info::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_report_t_base_info::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_job_type)
  return *f_job_type_;
}
inline void pb_report_t_base_info::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_job_type)
}
inline void pb_report_t_base_info::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_job_type)
}
inline void pb_report_t_base_info::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_job_type)
}
inline ::std::string* pb_report_t_base_info::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_report_t_base_info::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_job_type)
}

// optional string f_job_title = 12;
inline bool pb_report_t_base_info::has_f_job_title() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_report_t_base_info::set_has_f_job_title() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_report_t_base_info::clear_has_f_job_title() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_report_t_base_info::clear_f_job_title() {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_->clear();
  }
  clear_has_f_job_title();
}
inline const ::std::string& pb_report_t_base_info::f_job_title() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_job_title)
  return *f_job_title_;
}
inline void pb_report_t_base_info::set_f_job_title(const ::std::string& value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_job_title)
}
inline void pb_report_t_base_info::set_f_job_title(const char* value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_job_title)
}
inline void pb_report_t_base_info::set_f_job_title(const char* value, size_t size) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_job_title)
}
inline ::std::string* pb_report_t_base_info::mutable_f_job_title() {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_job_title)
  return f_job_title_;
}
inline ::std::string* pb_report_t_base_info::release_f_job_title() {
  clear_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_title_;
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_job_title(::std::string* f_job_title) {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_title_;
  }
  if (f_job_title) {
    set_has_f_job_title();
    f_job_title_ = f_job_title;
  } else {
    clear_has_f_job_title();
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_job_title)
}

// optional int32 f_inviter_uid = 13;
inline bool pb_report_t_base_info::has_f_inviter_uid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_report_t_base_info::set_has_f_inviter_uid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_report_t_base_info::clear_has_f_inviter_uid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_report_t_base_info::clear_f_inviter_uid() {
  f_inviter_uid_ = 0;
  clear_has_f_inviter_uid();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_inviter_uid() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_inviter_uid)
  return f_inviter_uid_;
}
inline void pb_report_t_base_info::set_f_inviter_uid(::google::protobuf::int32 value) {
  set_has_f_inviter_uid();
  f_inviter_uid_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_inviter_uid)
}

// optional int32 f_friend_num = 14;
inline bool pb_report_t_base_info::has_f_friend_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_report_t_base_info::set_has_f_friend_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_report_t_base_info::clear_has_f_friend_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_report_t_base_info::clear_f_friend_num() {
  f_friend_num_ = 0;
  clear_has_f_friend_num();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_friend_num() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_friend_num)
  return f_friend_num_;
}
inline void pb_report_t_base_info::set_f_friend_num(::google::protobuf::int32 value) {
  set_has_f_friend_num();
  f_friend_num_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_friend_num)
}

// optional int32 f_continuity_day_num = 15;
inline bool pb_report_t_base_info::has_f_continuity_day_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pb_report_t_base_info::set_has_f_continuity_day_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pb_report_t_base_info::clear_has_f_continuity_day_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pb_report_t_base_info::clear_f_continuity_day_num() {
  f_continuity_day_num_ = 0;
  clear_has_f_continuity_day_num();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_continuity_day_num() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_continuity_day_num)
  return f_continuity_day_num_;
}
inline void pb_report_t_base_info::set_f_continuity_day_num(::google::protobuf::int32 value) {
  set_has_f_continuity_day_num();
  f_continuity_day_num_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_continuity_day_num)
}

// optional int32 f_project_members_num = 16;
inline bool pb_report_t_base_info::has_f_project_members_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pb_report_t_base_info::set_has_f_project_members_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pb_report_t_base_info::clear_has_f_project_members_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pb_report_t_base_info::clear_f_project_members_num() {
  f_project_members_num_ = 0;
  clear_has_f_project_members_num();
}
inline ::google::protobuf::int32 pb_report_t_base_info::f_project_members_num() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_project_members_num)
  return f_project_members_num_;
}
inline void pb_report_t_base_info::set_f_project_members_num(::google::protobuf::int32 value) {
  set_has_f_project_members_num();
  f_project_members_num_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_project_members_num)
}

// optional string f_company = 17;
inline bool pb_report_t_base_info::has_f_company() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pb_report_t_base_info::set_has_f_company() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pb_report_t_base_info::clear_has_f_company() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pb_report_t_base_info::clear_f_company() {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_->clear();
  }
  clear_has_f_company();
}
inline const ::std::string& pb_report_t_base_info::f_company() const {
  // @@protoc_insertion_point(field_get:pb_report_t_base_info.f_company)
  return *f_company_;
}
inline void pb_report_t_base_info::set_f_company(const ::std::string& value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_base_info.f_company)
}
inline void pb_report_t_base_info::set_f_company(const char* value) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_base_info.f_company)
}
inline void pb_report_t_base_info::set_f_company(const char* value, size_t size) {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  f_company_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_base_info.f_company)
}
inline ::std::string* pb_report_t_base_info::mutable_f_company() {
  set_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_base_info.f_company)
  return f_company_;
}
inline ::std::string* pb_report_t_base_info::release_f_company() {
  clear_has_f_company();
  if (f_company_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_;
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_base_info::set_allocated_f_company(::std::string* f_company) {
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_;
  }
  if (f_company) {
    set_has_f_company();
    f_company_ = f_company;
  } else {
    clear_has_f_company();
    f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_base_info.f_company)
}

// -------------------------------------------------------------------

// pb_report_t_msg_item

// optional string f_msg_id = 1;
inline bool pb_report_t_msg_item::has_f_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_report_t_msg_item::clear_has_f_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_report_t_msg_item::clear_f_msg_id() {
  if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_->clear();
  }
  clear_has_f_msg_id();
}
inline const ::std::string& pb_report_t_msg_item::f_msg_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_msg_id)
  return *f_msg_id_;
}
inline void pb_report_t_msg_item::set_f_msg_id(const ::std::string& value) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_msg_id)
}
inline void pb_report_t_msg_item::set_f_msg_id(const char* value) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_msg_id)
}
inline void pb_report_t_msg_item::set_f_msg_id(const char* value, size_t size) {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  f_msg_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_msg_id)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_msg_id() {
  set_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_msg_id)
  return f_msg_id_;
}
inline ::std::string* pb_report_t_msg_item::release_f_msg_id() {
  clear_has_f_msg_id();
  if (f_msg_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_id_;
    f_msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_msg_id(::std::string* f_msg_id) {
  if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_id_;
  }
  if (f_msg_id) {
    set_has_f_msg_id();
    f_msg_id_ = f_msg_id;
  } else {
    clear_has_f_msg_id();
    f_msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_msg_id)
}

// optional uint32 f_msg_type = 2;
inline bool pb_report_t_msg_item::has_f_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_report_t_msg_item::clear_has_f_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_report_t_msg_item::clear_f_msg_type() {
  f_msg_type_ = 0u;
  clear_has_f_msg_type();
}
inline ::google::protobuf::uint32 pb_report_t_msg_item::f_msg_type() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_msg_type)
  return f_msg_type_;
}
inline void pb_report_t_msg_item::set_f_msg_type(::google::protobuf::uint32 value) {
  set_has_f_msg_type();
  f_msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_msg_type)
}

// optional string f_msg_body = 3;
inline bool pb_report_t_msg_item::has_f_msg_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_msg_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_report_t_msg_item::clear_has_f_msg_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_report_t_msg_item::clear_f_msg_body() {
  if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_->clear();
  }
  clear_has_f_msg_body();
}
inline const ::std::string& pb_report_t_msg_item::f_msg_body() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_msg_body)
  return *f_msg_body_;
}
inline void pb_report_t_msg_item::set_f_msg_body(const ::std::string& value) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_msg_body)
}
inline void pb_report_t_msg_item::set_f_msg_body(const char* value) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_msg_body)
}
inline void pb_report_t_msg_item::set_f_msg_body(const char* value, size_t size) {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  f_msg_body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_msg_body)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_msg_body() {
  set_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_msg_body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_msg_body)
  return f_msg_body_;
}
inline ::std::string* pb_report_t_msg_item::release_f_msg_body() {
  clear_has_f_msg_body();
  if (f_msg_body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_msg_body_;
    f_msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_msg_body(::std::string* f_msg_body) {
  if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_body_;
  }
  if (f_msg_body) {
    set_has_f_msg_body();
    f_msg_body_ = f_msg_body;
  } else {
    clear_has_f_msg_body();
    f_msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_msg_body)
}

// optional int32 f_sender_id = 4;
inline bool pb_report_t_msg_item::has_f_sender_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_sender_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_report_t_msg_item::clear_has_f_sender_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_report_t_msg_item::clear_f_sender_id() {
  f_sender_id_ = 0;
  clear_has_f_sender_id();
}
inline ::google::protobuf::int32 pb_report_t_msg_item::f_sender_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_sender_id)
  return f_sender_id_;
}
inline void pb_report_t_msg_item::set_f_sender_id(::google::protobuf::int32 value) {
  set_has_f_sender_id();
  f_sender_id_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_sender_id)
}

// optional string f_sender_name = 5;
inline bool pb_report_t_msg_item::has_f_sender_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_sender_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_report_t_msg_item::clear_has_f_sender_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_report_t_msg_item::clear_f_sender_name() {
  if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_->clear();
  }
  clear_has_f_sender_name();
}
inline const ::std::string& pb_report_t_msg_item::f_sender_name() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_sender_name)
  return *f_sender_name_;
}
inline void pb_report_t_msg_item::set_f_sender_name(const ::std::string& value) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_sender_name)
}
inline void pb_report_t_msg_item::set_f_sender_name(const char* value) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_sender_name)
}
inline void pb_report_t_msg_item::set_f_sender_name(const char* value, size_t size) {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  f_sender_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_sender_name)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_sender_name() {
  set_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_sender_name)
  return f_sender_name_;
}
inline ::std::string* pb_report_t_msg_item::release_f_sender_name() {
  clear_has_f_sender_name();
  if (f_sender_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_name_;
    f_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_sender_name(::std::string* f_sender_name) {
  if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_name_;
  }
  if (f_sender_name) {
    set_has_f_sender_name();
    f_sender_name_ = f_sender_name;
  } else {
    clear_has_f_sender_name();
    f_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_sender_name)
}

// optional string f_sender_remark = 6;
inline bool pb_report_t_msg_item::has_f_sender_remark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_sender_remark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_report_t_msg_item::clear_has_f_sender_remark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_report_t_msg_item::clear_f_sender_remark() {
  if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_->clear();
  }
  clear_has_f_sender_remark();
}
inline const ::std::string& pb_report_t_msg_item::f_sender_remark() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_sender_remark)
  return *f_sender_remark_;
}
inline void pb_report_t_msg_item::set_f_sender_remark(const ::std::string& value) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_sender_remark)
}
inline void pb_report_t_msg_item::set_f_sender_remark(const char* value) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_sender_remark)
}
inline void pb_report_t_msg_item::set_f_sender_remark(const char* value, size_t size) {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  f_sender_remark_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_sender_remark)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_sender_remark() {
  set_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_remark_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_sender_remark)
  return f_sender_remark_;
}
inline ::std::string* pb_report_t_msg_item::release_f_sender_remark() {
  clear_has_f_sender_remark();
  if (f_sender_remark_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_remark_;
    f_sender_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_sender_remark(::std::string* f_sender_remark) {
  if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_remark_;
  }
  if (f_sender_remark) {
    set_has_f_sender_remark();
    f_sender_remark_ = f_sender_remark;
  } else {
    clear_has_f_sender_remark();
    f_sender_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_sender_remark)
}

// optional string f_sender_avatar = 7;
inline bool pb_report_t_msg_item::has_f_sender_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_sender_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_report_t_msg_item::clear_has_f_sender_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_report_t_msg_item::clear_f_sender_avatar() {
  if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_->clear();
  }
  clear_has_f_sender_avatar();
}
inline const ::std::string& pb_report_t_msg_item::f_sender_avatar() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_sender_avatar)
  return *f_sender_avatar_;
}
inline void pb_report_t_msg_item::set_f_sender_avatar(const ::std::string& value) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_sender_avatar)
}
inline void pb_report_t_msg_item::set_f_sender_avatar(const char* value) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_sender_avatar)
}
inline void pb_report_t_msg_item::set_f_sender_avatar(const char* value, size_t size) {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  f_sender_avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_sender_avatar)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_sender_avatar() {
  set_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sender_avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_sender_avatar)
  return f_sender_avatar_;
}
inline ::std::string* pb_report_t_msg_item::release_f_sender_avatar() {
  clear_has_f_sender_avatar();
  if (f_sender_avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sender_avatar_;
    f_sender_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_sender_avatar(::std::string* f_sender_avatar) {
  if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_avatar_;
  }
  if (f_sender_avatar) {
    set_has_f_sender_avatar();
    f_sender_avatar_ = f_sender_avatar;
  } else {
    clear_has_f_sender_avatar();
    f_sender_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_sender_avatar)
}

// optional string f_group_id = 8;
inline bool pb_report_t_msg_item::has_f_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_report_t_msg_item::clear_has_f_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_report_t_msg_item::clear_f_group_id() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_->clear();
  }
  clear_has_f_group_id();
}
inline const ::std::string& pb_report_t_msg_item::f_group_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_group_id)
  return *f_group_id_;
}
inline void pb_report_t_msg_item::set_f_group_id(const ::std::string& value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_group_id)
}
inline void pb_report_t_msg_item::set_f_group_id(const char* value) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_group_id)
}
inline void pb_report_t_msg_item::set_f_group_id(const char* value, size_t size) {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  f_group_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_group_id)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_group_id() {
  set_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_group_id)
  return f_group_id_;
}
inline ::std::string* pb_report_t_msg_item::release_f_group_id() {
  clear_has_f_group_id();
  if (f_group_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_id_;
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_group_id(::std::string* f_group_id) {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_id) {
    set_has_f_group_id();
    f_group_id_ = f_group_id;
  } else {
    clear_has_f_group_id();
    f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_group_id)
}

// optional uint32 f_group_type = 9;
inline bool pb_report_t_msg_item::has_f_group_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_group_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_report_t_msg_item::clear_has_f_group_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_report_t_msg_item::clear_f_group_type() {
  f_group_type_ = 0u;
  clear_has_f_group_type();
}
inline ::google::protobuf::uint32 pb_report_t_msg_item::f_group_type() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_group_type)
  return f_group_type_;
}
inline void pb_report_t_msg_item::set_f_group_type(::google::protobuf::uint32 value) {
  set_has_f_group_type();
  f_group_type_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_group_type)
}

// optional string f_group_name = 10;
inline bool pb_report_t_msg_item::has_f_group_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_group_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_report_t_msg_item::clear_has_f_group_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_report_t_msg_item::clear_f_group_name() {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_->clear();
  }
  clear_has_f_group_name();
}
inline const ::std::string& pb_report_t_msg_item::f_group_name() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_group_name)
  return *f_group_name_;
}
inline void pb_report_t_msg_item::set_f_group_name(const ::std::string& value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_group_name)
}
inline void pb_report_t_msg_item::set_f_group_name(const char* value) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_group_name)
}
inline void pb_report_t_msg_item::set_f_group_name(const char* value, size_t size) {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  f_group_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_group_name)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_group_name() {
  set_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_group_name)
  return f_group_name_;
}
inline ::std::string* pb_report_t_msg_item::release_f_group_name() {
  clear_has_f_group_name();
  if (f_group_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_name_;
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_group_name(::std::string* f_group_name) {
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_name_;
  }
  if (f_group_name) {
    set_has_f_group_name();
    f_group_name_ = f_group_name;
  } else {
    clear_has_f_group_name();
    f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_group_name)
}

// optional string f_group_desc = 11;
inline bool pb_report_t_msg_item::has_f_group_desc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_group_desc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_report_t_msg_item::clear_has_f_group_desc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_report_t_msg_item::clear_f_group_desc() {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_->clear();
  }
  clear_has_f_group_desc();
}
inline const ::std::string& pb_report_t_msg_item::f_group_desc() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_group_desc)
  return *f_group_desc_;
}
inline void pb_report_t_msg_item::set_f_group_desc(const ::std::string& value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_group_desc)
}
inline void pb_report_t_msg_item::set_f_group_desc(const char* value) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_msg_item.f_group_desc)
}
inline void pb_report_t_msg_item::set_f_group_desc(const char* value, size_t size) {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  f_group_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_msg_item.f_group_desc)
}
inline ::std::string* pb_report_t_msg_item::mutable_f_group_desc() {
  set_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_group_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_msg_item.f_group_desc)
  return f_group_desc_;
}
inline ::std::string* pb_report_t_msg_item::release_f_group_desc() {
  clear_has_f_group_desc();
  if (f_group_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_group_desc_;
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_msg_item::set_allocated_f_group_desc(::std::string* f_group_desc) {
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_desc_;
  }
  if (f_group_desc) {
    set_has_f_group_desc();
    f_group_desc_ = f_group_desc;
  } else {
    clear_has_f_group_desc();
    f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_msg_item.f_group_desc)
}

// optional int32 f_send_time = 12;
inline bool pb_report_t_msg_item::has_f_send_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_send_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_report_t_msg_item::clear_has_f_send_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_report_t_msg_item::clear_f_send_time() {
  f_send_time_ = 0;
  clear_has_f_send_time();
}
inline ::google::protobuf::int32 pb_report_t_msg_item::f_send_time() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_send_time)
  return f_send_time_;
}
inline void pb_report_t_msg_item::set_f_send_time(::google::protobuf::int32 value) {
  set_has_f_send_time();
  f_send_time_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_send_time)
}

// optional int32 f_msg_seq_id = 13;
inline bool pb_report_t_msg_item::has_f_msg_seq_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_report_t_msg_item::set_has_f_msg_seq_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_report_t_msg_item::clear_has_f_msg_seq_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_report_t_msg_item::clear_f_msg_seq_id() {
  f_msg_seq_id_ = 0;
  clear_has_f_msg_seq_id();
}
inline ::google::protobuf::int32 pb_report_t_msg_item::f_msg_seq_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_msg_item.f_msg_seq_id)
  return f_msg_seq_id_;
}
inline void pb_report_t_msg_item::set_f_msg_seq_id(::google::protobuf::int32 value) {
  set_has_f_msg_seq_id();
  f_msg_seq_id_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_msg_item.f_msg_seq_id)
}

// -------------------------------------------------------------------

// pb_report_t_client

// optional string f_phone_info = 1;
inline bool pb_report_t_client::has_f_phone_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_report_t_client::set_has_f_phone_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_report_t_client::clear_has_f_phone_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_report_t_client::clear_f_phone_info() {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_->clear();
  }
  clear_has_f_phone_info();
}
inline const ::std::string& pb_report_t_client::f_phone_info() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_phone_info)
  return *f_phone_info_;
}
inline void pb_report_t_client::set_f_phone_info(const ::std::string& value) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_phone_info)
}
inline void pb_report_t_client::set_f_phone_info(const char* value) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_client.f_phone_info)
}
inline void pb_report_t_client::set_f_phone_info(const char* value, size_t size) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_client.f_phone_info)
}
inline ::std::string* pb_report_t_client::mutable_f_phone_info() {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_client.f_phone_info)
  return f_phone_info_;
}
inline ::std::string* pb_report_t_client::release_f_phone_info() {
  clear_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_info_;
    f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_client::set_allocated_f_phone_info(::std::string* f_phone_info) {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_info_;
  }
  if (f_phone_info) {
    set_has_f_phone_info();
    f_phone_info_ = f_phone_info;
  } else {
    clear_has_f_phone_info();
    f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_client.f_phone_info)
}

// optional string f_os = 2;
inline bool pb_report_t_client::has_f_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_report_t_client::set_has_f_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_report_t_client::clear_has_f_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_report_t_client::clear_f_os() {
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_->clear();
  }
  clear_has_f_os();
}
inline const ::std::string& pb_report_t_client::f_os() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_os)
  return *f_os_;
}
inline void pb_report_t_client::set_f_os(const ::std::string& value) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_os)
}
inline void pb_report_t_client::set_f_os(const char* value) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_client.f_os)
}
inline void pb_report_t_client::set_f_os(const char* value, size_t size) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_client.f_os)
}
inline ::std::string* pb_report_t_client::mutable_f_os() {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_client.f_os)
  return f_os_;
}
inline ::std::string* pb_report_t_client::release_f_os() {
  clear_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_os_;
    f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_client::set_allocated_f_os(::std::string* f_os) {
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_os_;
  }
  if (f_os) {
    set_has_f_os();
    f_os_ = f_os;
  } else {
    clear_has_f_os();
    f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_client.f_os)
}

// optional string f_sp = 3;
inline bool pb_report_t_client::has_f_sp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_report_t_client::set_has_f_sp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_report_t_client::clear_has_f_sp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_report_t_client::clear_f_sp() {
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_->clear();
  }
  clear_has_f_sp();
}
inline const ::std::string& pb_report_t_client::f_sp() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_sp)
  return *f_sp_;
}
inline void pb_report_t_client::set_f_sp(const ::std::string& value) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_sp)
}
inline void pb_report_t_client::set_f_sp(const char* value) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_client.f_sp)
}
inline void pb_report_t_client::set_f_sp(const char* value, size_t size) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_client.f_sp)
}
inline ::std::string* pb_report_t_client::mutable_f_sp() {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_client.f_sp)
  return f_sp_;
}
inline ::std::string* pb_report_t_client::release_f_sp() {
  clear_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sp_;
    f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_client::set_allocated_f_sp(::std::string* f_sp) {
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sp_;
  }
  if (f_sp) {
    set_has_f_sp();
    f_sp_ = f_sp;
  } else {
    clear_has_f_sp();
    f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_client.f_sp)
}

// optional string f_network = 4;
inline bool pb_report_t_client::has_f_network() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_report_t_client::set_has_f_network() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_report_t_client::clear_has_f_network() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_report_t_client::clear_f_network() {
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_->clear();
  }
  clear_has_f_network();
}
inline const ::std::string& pb_report_t_client::f_network() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_network)
  return *f_network_;
}
inline void pb_report_t_client::set_f_network(const ::std::string& value) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_network)
}
inline void pb_report_t_client::set_f_network(const char* value) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_client.f_network)
}
inline void pb_report_t_client::set_f_network(const char* value, size_t size) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_client.f_network)
}
inline ::std::string* pb_report_t_client::mutable_f_network() {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_client.f_network)
  return f_network_;
}
inline ::std::string* pb_report_t_client::release_f_network() {
  clear_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_network_;
    f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_client::set_allocated_f_network(::std::string* f_network) {
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_network_;
  }
  if (f_network) {
    set_has_f_network();
    f_network_ = f_network;
  } else {
    clear_has_f_network();
    f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_client.f_network)
}

// optional int32 f_version = 5;
inline bool pb_report_t_client::has_f_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_report_t_client::set_has_f_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_report_t_client::clear_has_f_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_report_t_client::clear_f_version() {
  f_version_ = 0;
  clear_has_f_version();
}
inline ::google::protobuf::int32 pb_report_t_client::f_version() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_version)
  return f_version_;
}
inline void pb_report_t_client::set_f_version(::google::protobuf::int32 value) {
  set_has_f_version();
  f_version_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_version)
}

// optional int32 f_client_id = 6;
inline bool pb_report_t_client::has_f_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_report_t_client::set_has_f_client_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_report_t_client::clear_has_f_client_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_report_t_client::clear_f_client_id() {
  f_client_id_ = 0;
  clear_has_f_client_id();
}
inline ::google::protobuf::int32 pb_report_t_client::f_client_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_client_id)
  return f_client_id_;
}
inline void pb_report_t_client::set_f_client_id(::google::protobuf::int32 value) {
  set_has_f_client_id();
  f_client_id_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_client_id)
}

// optional int32 f_channel_id = 7;
inline bool pb_report_t_client::has_f_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_report_t_client::set_has_f_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_report_t_client::clear_has_f_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_report_t_client::clear_f_channel_id() {
  f_channel_id_ = 0;
  clear_has_f_channel_id();
}
inline ::google::protobuf::int32 pb_report_t_client::f_channel_id() const {
  // @@protoc_insertion_point(field_get:pb_report_t_client.f_channel_id)
  return f_channel_id_;
}
inline void pb_report_t_client::set_f_channel_id(::google::protobuf::int32 value) {
  set_has_f_channel_id();
  f_channel_id_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_client.f_channel_id)
}

// -------------------------------------------------------------------

// pb_report_t_report

// optional int32 f_msg_type = 1;
inline bool pb_report_t_report::has_f_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_report_t_report::set_has_f_msg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_report_t_report::clear_has_f_msg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_report_t_report::clear_f_msg_type() {
  f_msg_type_ = 0;
  clear_has_f_msg_type();
}
inline ::google::protobuf::int32 pb_report_t_report::f_msg_type() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_msg_type)
  return f_msg_type_;
}
inline void pb_report_t_report::set_f_msg_type(::google::protobuf::int32 value) {
  set_has_f_msg_type();
  f_msg_type_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_report.f_msg_type)
}

// optional int32 f_i_cmd = 2;
inline bool pb_report_t_report::has_f_i_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_report_t_report::set_has_f_i_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_report_t_report::clear_has_f_i_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_report_t_report::clear_f_i_cmd() {
  f_i_cmd_ = 0;
  clear_has_f_i_cmd();
}
inline ::google::protobuf::int32 pb_report_t_report::f_i_cmd() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_i_cmd)
  return f_i_cmd_;
}
inline void pb_report_t_report::set_f_i_cmd(::google::protobuf::int32 value) {
  set_has_f_i_cmd();
  f_i_cmd_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_report.f_i_cmd)
}

// optional string f_s_cmd = 3;
inline bool pb_report_t_report::has_f_s_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_report_t_report::set_has_f_s_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_report_t_report::clear_has_f_s_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_report_t_report::clear_f_s_cmd() {
  if (f_s_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_s_cmd_->clear();
  }
  clear_has_f_s_cmd();
}
inline const ::std::string& pb_report_t_report::f_s_cmd() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_s_cmd)
  return *f_s_cmd_;
}
inline void pb_report_t_report::set_f_s_cmd(const ::std::string& value) {
  set_has_f_s_cmd();
  if (f_s_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_s_cmd_ = new ::std::string;
  }
  f_s_cmd_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_report.f_s_cmd)
}
inline void pb_report_t_report::set_f_s_cmd(const char* value) {
  set_has_f_s_cmd();
  if (f_s_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_s_cmd_ = new ::std::string;
  }
  f_s_cmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_report.f_s_cmd)
}
inline void pb_report_t_report::set_f_s_cmd(const char* value, size_t size) {
  set_has_f_s_cmd();
  if (f_s_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_s_cmd_ = new ::std::string;
  }
  f_s_cmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_report.f_s_cmd)
}
inline ::std::string* pb_report_t_report::mutable_f_s_cmd() {
  set_has_f_s_cmd();
  if (f_s_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_s_cmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_report.f_s_cmd)
  return f_s_cmd_;
}
inline ::std::string* pb_report_t_report::release_f_s_cmd() {
  clear_has_f_s_cmd();
  if (f_s_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_s_cmd_;
    f_s_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_report::set_allocated_f_s_cmd(::std::string* f_s_cmd) {
  if (f_s_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_s_cmd_;
  }
  if (f_s_cmd) {
    set_has_f_s_cmd();
    f_s_cmd_ = f_s_cmd;
  } else {
    clear_has_f_s_cmd();
    f_s_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_report.f_s_cmd)
}

// optional int32 f_time = 4;
inline bool pb_report_t_report::has_f_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_report_t_report::set_has_f_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_report_t_report::clear_has_f_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_report_t_report::clear_f_time() {
  f_time_ = 0;
  clear_has_f_time();
}
inline ::google::protobuf::int32 pb_report_t_report::f_time() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_time)
  return f_time_;
}
inline void pb_report_t_report::set_f_time(::google::protobuf::int32 value) {
  set_has_f_time();
  f_time_ = value;
  // @@protoc_insertion_point(field_set:pb_report_t_report.f_time)
}

// optional string f_log = 5;
inline bool pb_report_t_report::has_f_log() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_report_t_report::set_has_f_log() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_report_t_report::clear_has_f_log() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_report_t_report::clear_f_log() {
  if (f_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_->clear();
  }
  clear_has_f_log();
}
inline const ::std::string& pb_report_t_report::f_log() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_log)
  return *f_log_;
}
inline void pb_report_t_report::set_f_log(const ::std::string& value) {
  set_has_f_log();
  if (f_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_ = new ::std::string;
  }
  f_log_->assign(value);
  // @@protoc_insertion_point(field_set:pb_report_t_report.f_log)
}
inline void pb_report_t_report::set_f_log(const char* value) {
  set_has_f_log();
  if (f_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_ = new ::std::string;
  }
  f_log_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_report_t_report.f_log)
}
inline void pb_report_t_report::set_f_log(const char* value, size_t size) {
  set_has_f_log();
  if (f_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_ = new ::std::string;
  }
  f_log_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_report_t_report.f_log)
}
inline ::std::string* pb_report_t_report::mutable_f_log() {
  set_has_f_log();
  if (f_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_log_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_report_t_report.f_log)
  return f_log_;
}
inline ::std::string* pb_report_t_report::release_f_log() {
  clear_has_f_log();
  if (f_log_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_log_;
    f_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_report_t_report::set_allocated_f_log(::std::string* f_log) {
  if (f_log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_log_;
  }
  if (f_log) {
    set_has_f_log();
    f_log_ = f_log;
  } else {
    clear_has_f_log();
    f_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_report.f_log)
}

// optional .pb_report_t_base_info f_info = 6;
inline bool pb_report_t_report::has_f_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_report_t_report::set_has_f_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_report_t_report::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_report_t_report::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_report_t_base_info::Clear();
  clear_has_f_info();
}
inline const ::pb_report_t_base_info& pb_report_t_report::f_info() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_report_t_base_info* pb_report_t_report::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_report_t_base_info;
  // @@protoc_insertion_point(field_mutable:pb_report_t_report.f_info)
  return f_info_;
}
inline ::pb_report_t_base_info* pb_report_t_report::release_f_info() {
  clear_has_f_info();
  ::pb_report_t_base_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_report_t_report::set_allocated_f_info(::pb_report_t_base_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_report.f_info)
}

// optional .pb_report_t_client f_client = 7;
inline bool pb_report_t_report::has_f_client() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_report_t_report::set_has_f_client() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_report_t_report::clear_has_f_client() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_report_t_report::clear_f_client() {
  if (f_client_ != NULL) f_client_->::pb_report_t_client::Clear();
  clear_has_f_client();
}
inline const ::pb_report_t_client& pb_report_t_report::f_client() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_client)
  return f_client_ != NULL ? *f_client_ : *default_instance_->f_client_;
}
inline ::pb_report_t_client* pb_report_t_report::mutable_f_client() {
  set_has_f_client();
  if (f_client_ == NULL) f_client_ = new ::pb_report_t_client;
  // @@protoc_insertion_point(field_mutable:pb_report_t_report.f_client)
  return f_client_;
}
inline ::pb_report_t_client* pb_report_t_report::release_f_client() {
  clear_has_f_client();
  ::pb_report_t_client* temp = f_client_;
  f_client_ = NULL;
  return temp;
}
inline void pb_report_t_report::set_allocated_f_client(::pb_report_t_client* f_client) {
  delete f_client_;
  f_client_ = f_client;
  if (f_client) {
    set_has_f_client();
  } else {
    clear_has_f_client();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_report.f_client)
}

// optional .pb_report_t_msg_item f_msg_item = 8;
inline bool pb_report_t_report::has_f_msg_item() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_report_t_report::set_has_f_msg_item() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_report_t_report::clear_has_f_msg_item() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_report_t_report::clear_f_msg_item() {
  if (f_msg_item_ != NULL) f_msg_item_->::pb_report_t_msg_item::Clear();
  clear_has_f_msg_item();
}
inline const ::pb_report_t_msg_item& pb_report_t_report::f_msg_item() const {
  // @@protoc_insertion_point(field_get:pb_report_t_report.f_msg_item)
  return f_msg_item_ != NULL ? *f_msg_item_ : *default_instance_->f_msg_item_;
}
inline ::pb_report_t_msg_item* pb_report_t_report::mutable_f_msg_item() {
  set_has_f_msg_item();
  if (f_msg_item_ == NULL) f_msg_item_ = new ::pb_report_t_msg_item;
  // @@protoc_insertion_point(field_mutable:pb_report_t_report.f_msg_item)
  return f_msg_item_;
}
inline ::pb_report_t_msg_item* pb_report_t_report::release_f_msg_item() {
  clear_has_f_msg_item();
  ::pb_report_t_msg_item* temp = f_msg_item_;
  f_msg_item_ = NULL;
  return temp;
}
inline void pb_report_t_report::set_allocated_f_msg_item(::pb_report_t_msg_item* f_msg_item) {
  delete f_msg_item_;
  f_msg_item_ = f_msg_item;
  if (f_msg_item) {
    set_has_f_msg_item();
  } else {
    clear_has_f_msg_item();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_report_t_report.f_msg_item)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fgsk_5freport_2eproto__INCLUDED
