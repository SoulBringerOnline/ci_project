// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk_req.proto

#ifndef PROTOBUF_pb_5fgsk_5freq_2eproto__INCLUDED
#define PROTOBUF_pb_5fgsk_5freq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

class pb_req_t_attach;
class pb_req_t_user;
class pb_req_t_project;
class pb_req_t_task_report;
class pb_req_t_task;
class pb_req_t_report;
class pb_req_t_req;

// ===================================================================

class pb_req_t_attach : public ::google::protobuf::Message {
 public:
  pb_req_t_attach();
  virtual ~pb_req_t_attach();

  pb_req_t_attach(const pb_req_t_attach& from);

  inline pb_req_t_attach& operator=(const pb_req_t_attach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_attach& default_instance();

  void Swap(pb_req_t_attach* other);

  // implements Message ----------------------------------------------

  pb_req_t_attach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_attach& from);
  void MergeFrom(const pb_req_t_attach& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_attach_name = 1;
  inline bool has_f_attach_name() const;
  inline void clear_f_attach_name();
  static const int kFAttachNameFieldNumber = 1;
  inline const ::std::string& f_attach_name() const;
  inline void set_f_attach_name(const ::std::string& value);
  inline void set_f_attach_name(const char* value);
  inline void set_f_attach_name(const char* value, size_t size);
  inline ::std::string* mutable_f_attach_name();
  inline ::std::string* release_f_attach_name();
  inline void set_allocated_f_attach_name(::std::string* f_attach_name);

  // optional int32 f_attach_type = 2;
  inline bool has_f_attach_type() const;
  inline void clear_f_attach_type();
  static const int kFAttachTypeFieldNumber = 2;
  inline ::google::protobuf::int32 f_attach_type() const;
  inline void set_f_attach_type(::google::protobuf::int32 value);

  // optional string f_attach_url = 3;
  inline bool has_f_attach_url() const;
  inline void clear_f_attach_url();
  static const int kFAttachUrlFieldNumber = 3;
  inline const ::std::string& f_attach_url() const;
  inline void set_f_attach_url(const ::std::string& value);
  inline void set_f_attach_url(const char* value);
  inline void set_f_attach_url(const char* value, size_t size);
  inline ::std::string* mutable_f_attach_url();
  inline ::std::string* release_f_attach_url();
  inline void set_allocated_f_attach_url(::std::string* f_attach_url);

  // optional int32 f_attach_size = 4;
  inline bool has_f_attach_size() const;
  inline void clear_f_attach_size();
  static const int kFAttachSizeFieldNumber = 4;
  inline ::google::protobuf::int32 f_attach_size() const;
  inline void set_f_attach_size(::google::protobuf::int32 value);

  // optional int32 f_attach_playtime = 5;
  inline bool has_f_attach_playtime() const;
  inline void clear_f_attach_playtime();
  static const int kFAttachPlaytimeFieldNumber = 5;
  inline ::google::protobuf::int32 f_attach_playtime() const;
  inline void set_f_attach_playtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_req_t_attach)
 private:
  inline void set_has_f_attach_name();
  inline void clear_has_f_attach_name();
  inline void set_has_f_attach_type();
  inline void clear_has_f_attach_type();
  inline void set_has_f_attach_url();
  inline void clear_has_f_attach_url();
  inline void set_has_f_attach_size();
  inline void clear_has_f_attach_size();
  inline void set_has_f_attach_playtime();
  inline void clear_has_f_attach_playtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_attach_name_;
  ::std::string* f_attach_url_;
  ::google::protobuf::int32 f_attach_type_;
  ::google::protobuf::int32 f_attach_size_;
  ::google::protobuf::int32 f_attach_playtime_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_attach* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_user : public ::google::protobuf::Message {
 public:
  pb_req_t_user();
  virtual ~pb_req_t_user();

  pb_req_t_user(const pb_req_t_user& from);

  inline pb_req_t_user& operator=(const pb_req_t_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_user& default_instance();

  void Swap(pb_req_t_user* other);

  // implements Message ----------------------------------------------

  pb_req_t_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_user& from);
  void MergeFrom(const pb_req_t_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_name = 2;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 2;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_phone = 3;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 3;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional string f_job_type = 4;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 4;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional string f_join_content = 5;
  inline bool has_f_join_content() const;
  inline void clear_f_join_content();
  static const int kFJoinContentFieldNumber = 5;
  inline const ::std::string& f_join_content() const;
  inline void set_f_join_content(const ::std::string& value);
  inline void set_f_join_content(const char* value);
  inline void set_f_join_content(const char* value, size_t size);
  inline ::std::string* mutable_f_join_content();
  inline ::std::string* release_f_join_content();
  inline void set_allocated_f_join_content(::std::string* f_join_content);

  // @@protoc_insertion_point(class_scope:pb_req_t_user)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_join_content();
  inline void clear_has_f_join_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_name_;
  ::std::string* f_phone_;
  ::std::string* f_job_type_;
  ::std::string* f_join_content_;
  ::google::protobuf::uint32 f_uin_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_user* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_project : public ::google::protobuf::Message {
 public:
  pb_req_t_project();
  virtual ~pb_req_t_project();

  pb_req_t_project(const pb_req_t_project& from);

  inline pb_req_t_project& operator=(const pb_req_t_project& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_project& default_instance();

  void Swap(pb_req_t_project* other);

  // implements Message ----------------------------------------------

  pb_req_t_project* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_project& from);
  void MergeFrom(const pb_req_t_project& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_prj_name = 1;
  inline bool has_f_prj_name() const;
  inline void clear_f_prj_name();
  static const int kFPrjNameFieldNumber = 1;
  inline const ::std::string& f_prj_name() const;
  inline void set_f_prj_name(const ::std::string& value);
  inline void set_f_prj_name(const char* value);
  inline void set_f_prj_name(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_name();
  inline ::std::string* release_f_prj_name();
  inline void set_allocated_f_prj_name(::std::string* f_prj_name);

  // optional int32 f_prj_type = 2;
  inline bool has_f_prj_type() const;
  inline void clear_f_prj_type();
  static const int kFPrjTypeFieldNumber = 2;
  inline ::google::protobuf::int32 f_prj_type() const;
  inline void set_f_prj_type(::google::protobuf::int32 value);

  // optional string f_prj_image = 3;
  inline bool has_f_prj_image() const;
  inline void clear_f_prj_image();
  static const int kFPrjImageFieldNumber = 3;
  inline const ::std::string& f_prj_image() const;
  inline void set_f_prj_image(const ::std::string& value);
  inline void set_f_prj_image(const char* value);
  inline void set_f_prj_image(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_image();
  inline ::std::string* release_f_prj_image();
  inline void set_allocated_f_prj_image(::std::string* f_prj_image);

  // optional string f_province = 4;
  inline bool has_f_province() const;
  inline void clear_f_province();
  static const int kFProvinceFieldNumber = 4;
  inline const ::std::string& f_province() const;
  inline void set_f_province(const ::std::string& value);
  inline void set_f_province(const char* value);
  inline void set_f_province(const char* value, size_t size);
  inline ::std::string* mutable_f_province();
  inline ::std::string* release_f_province();
  inline void set_allocated_f_province(::std::string* f_province);

  // optional string f_city = 5;
  inline bool has_f_city() const;
  inline void clear_f_city();
  static const int kFCityFieldNumber = 5;
  inline const ::std::string& f_city() const;
  inline void set_f_city(const ::std::string& value);
  inline void set_f_city(const char* value);
  inline void set_f_city(const char* value, size_t size);
  inline ::std::string* mutable_f_city();
  inline ::std::string* release_f_city();
  inline void set_allocated_f_city(::std::string* f_city);

  // optional string f_prj_address = 6;
  inline bool has_f_prj_address() const;
  inline void clear_f_prj_address();
  static const int kFPrjAddressFieldNumber = 6;
  inline const ::std::string& f_prj_address() const;
  inline void set_f_prj_address(const ::std::string& value);
  inline void set_f_prj_address(const char* value);
  inline void set_f_prj_address(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_address();
  inline ::std::string* release_f_prj_address();
  inline void set_allocated_f_prj_address(::std::string* f_prj_address);

  // optional int32 f_floor_area = 7;
  inline bool has_f_floor_area() const;
  inline void clear_f_floor_area();
  static const int kFFloorAreaFieldNumber = 7;
  inline ::google::protobuf::int32 f_floor_area() const;
  inline void set_f_floor_area(::google::protobuf::int32 value);

  // optional int32 f_prj_begin = 8;
  inline bool has_f_prj_begin() const;
  inline void clear_f_prj_begin();
  static const int kFPrjBeginFieldNumber = 8;
  inline ::google::protobuf::int32 f_prj_begin() const;
  inline void set_f_prj_begin(::google::protobuf::int32 value);

  // optional int32 f_prj_end = 9;
  inline bool has_f_prj_end() const;
  inline void clear_f_prj_end();
  static const int kFPrjEndFieldNumber = 9;
  inline ::google::protobuf::int32 f_prj_end() const;
  inline void set_f_prj_end(::google::protobuf::int32 value);

  // optional string f_jianzhu_danwei = 10;
  inline bool has_f_jianzhu_danwei() const;
  inline void clear_f_jianzhu_danwei();
  static const int kFJianzhuDanweiFieldNumber = 10;
  inline const ::std::string& f_jianzhu_danwei() const;
  inline void set_f_jianzhu_danwei(const ::std::string& value);
  inline void set_f_jianzhu_danwei(const char* value);
  inline void set_f_jianzhu_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_jianzhu_danwei();
  inline ::std::string* release_f_jianzhu_danwei();
  inline void set_allocated_f_jianzhu_danwei(::std::string* f_jianzhu_danwei);

  // optional string f_shigong_danwei = 11;
  inline bool has_f_shigong_danwei() const;
  inline void clear_f_shigong_danwei();
  static const int kFShigongDanweiFieldNumber = 11;
  inline const ::std::string& f_shigong_danwei() const;
  inline void set_f_shigong_danwei(const ::std::string& value);
  inline void set_f_shigong_danwei(const char* value);
  inline void set_f_shigong_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_shigong_danwei();
  inline ::std::string* release_f_shigong_danwei();
  inline void set_allocated_f_shigong_danwei(::std::string* f_shigong_danwei);

  // optional string f_jianli_danwei = 12;
  inline bool has_f_jianli_danwei() const;
  inline void clear_f_jianli_danwei();
  static const int kFJianliDanweiFieldNumber = 12;
  inline const ::std::string& f_jianli_danwei() const;
  inline void set_f_jianli_danwei(const ::std::string& value);
  inline void set_f_jianli_danwei(const char* value);
  inline void set_f_jianli_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_jianli_danwei();
  inline ::std::string* release_f_jianli_danwei();
  inline void set_allocated_f_jianli_danwei(::std::string* f_jianli_danwei);

  // optional string f_fenbao_danwei = 13;
  inline bool has_f_fenbao_danwei() const;
  inline void clear_f_fenbao_danwei();
  static const int kFFenbaoDanweiFieldNumber = 13;
  inline const ::std::string& f_fenbao_danwei() const;
  inline void set_f_fenbao_danwei(const ::std::string& value);
  inline void set_f_fenbao_danwei(const char* value);
  inline void set_f_fenbao_danwei(const char* value, size_t size);
  inline ::std::string* mutable_f_fenbao_danwei();
  inline ::std::string* release_f_fenbao_danwei();
  inline void set_allocated_f_fenbao_danwei(::std::string* f_fenbao_danwei);

  // optional double f_lat = 14;
  inline bool has_f_lat() const;
  inline void clear_f_lat();
  static const int kFLatFieldNumber = 14;
  inline double f_lat() const;
  inline void set_f_lat(double value);

  // optional double f_lon = 15;
  inline bool has_f_lon() const;
  inline void clear_f_lon();
  static const int kFLonFieldNumber = 15;
  inline double f_lon() const;
  inline void set_f_lon(double value);

  // @@protoc_insertion_point(class_scope:pb_req_t_project)
 private:
  inline void set_has_f_prj_name();
  inline void clear_has_f_prj_name();
  inline void set_has_f_prj_type();
  inline void clear_has_f_prj_type();
  inline void set_has_f_prj_image();
  inline void clear_has_f_prj_image();
  inline void set_has_f_province();
  inline void clear_has_f_province();
  inline void set_has_f_city();
  inline void clear_has_f_city();
  inline void set_has_f_prj_address();
  inline void clear_has_f_prj_address();
  inline void set_has_f_floor_area();
  inline void clear_has_f_floor_area();
  inline void set_has_f_prj_begin();
  inline void clear_has_f_prj_begin();
  inline void set_has_f_prj_end();
  inline void clear_has_f_prj_end();
  inline void set_has_f_jianzhu_danwei();
  inline void clear_has_f_jianzhu_danwei();
  inline void set_has_f_shigong_danwei();
  inline void clear_has_f_shigong_danwei();
  inline void set_has_f_jianli_danwei();
  inline void clear_has_f_jianli_danwei();
  inline void set_has_f_fenbao_danwei();
  inline void clear_has_f_fenbao_danwei();
  inline void set_has_f_lat();
  inline void clear_has_f_lat();
  inline void set_has_f_lon();
  inline void clear_has_f_lon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_prj_name_;
  ::std::string* f_prj_image_;
  ::std::string* f_province_;
  ::google::protobuf::int32 f_prj_type_;
  ::google::protobuf::int32 f_floor_area_;
  ::std::string* f_city_;
  ::std::string* f_prj_address_;
  ::google::protobuf::int32 f_prj_begin_;
  ::google::protobuf::int32 f_prj_end_;
  ::std::string* f_jianzhu_danwei_;
  ::std::string* f_shigong_danwei_;
  ::std::string* f_jianli_danwei_;
  ::std::string* f_fenbao_danwei_;
  double f_lat_;
  double f_lon_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_project* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_task_report : public ::google::protobuf::Message {
 public:
  pb_req_t_task_report();
  virtual ~pb_req_t_task_report();

  pb_req_t_task_report(const pb_req_t_task_report& from);

  inline pb_req_t_task_report& operator=(const pb_req_t_task_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_task_report& default_instance();

  void Swap(pb_req_t_task_report* other);

  // implements Message ----------------------------------------------

  pb_req_t_task_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_task_report& from);
  void MergeFrom(const pb_req_t_task_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_report_id = 1;
  inline bool has_f_report_id() const;
  inline void clear_f_report_id();
  static const int kFReportIdFieldNumber = 1;
  inline const ::std::string& f_report_id() const;
  inline void set_f_report_id(const ::std::string& value);
  inline void set_f_report_id(const char* value);
  inline void set_f_report_id(const char* value, size_t size);
  inline ::std::string* mutable_f_report_id();
  inline ::std::string* release_f_report_id();
  inline void set_allocated_f_report_id(::std::string* f_report_id);

  // optional .pb_req_t_user f_sponsor = 2;
  inline bool has_f_sponsor() const;
  inline void clear_f_sponsor();
  static const int kFSponsorFieldNumber = 2;
  inline const ::pb_req_t_user& f_sponsor() const;
  inline ::pb_req_t_user* mutable_f_sponsor();
  inline ::pb_req_t_user* release_f_sponsor();
  inline void set_allocated_f_sponsor(::pb_req_t_user* f_sponsor);

  // optional .pb_req_t_user f_reply_to = 3;
  inline bool has_f_reply_to() const;
  inline void clear_f_reply_to();
  static const int kFReplyToFieldNumber = 3;
  inline const ::pb_req_t_user& f_reply_to() const;
  inline ::pb_req_t_user* mutable_f_reply_to();
  inline ::pb_req_t_user* release_f_reply_to();
  inline void set_allocated_f_reply_to(::pb_req_t_user* f_reply_to);

  // optional string f_title = 4;
  inline bool has_f_title() const;
  inline void clear_f_title();
  static const int kFTitleFieldNumber = 4;
  inline const ::std::string& f_title() const;
  inline void set_f_title(const ::std::string& value);
  inline void set_f_title(const char* value);
  inline void set_f_title(const char* value, size_t size);
  inline ::std::string* mutable_f_title();
  inline ::std::string* release_f_title();
  inline void set_allocated_f_title(::std::string* f_title);

  // optional string f_content = 5;
  inline bool has_f_content() const;
  inline void clear_f_content();
  static const int kFContentFieldNumber = 5;
  inline const ::std::string& f_content() const;
  inline void set_f_content(const ::std::string& value);
  inline void set_f_content(const char* value);
  inline void set_f_content(const char* value, size_t size);
  inline ::std::string* mutable_f_content();
  inline ::std::string* release_f_content();
  inline void set_allocated_f_content(::std::string* f_content);

  // optional int32 f_content_type = 6;
  inline bool has_f_content_type() const;
  inline void clear_f_content_type();
  static const int kFContentTypeFieldNumber = 6;
  inline ::google::protobuf::int32 f_content_type() const;
  inline void set_f_content_type(::google::protobuf::int32 value);

  // repeated .pb_req_t_attach f_attach_list = 7;
  inline int f_attach_list_size() const;
  inline void clear_f_attach_list();
  static const int kFAttachListFieldNumber = 7;
  inline const ::pb_req_t_attach& f_attach_list(int index) const;
  inline ::pb_req_t_attach* mutable_f_attach_list(int index);
  inline ::pb_req_t_attach* add_f_attach_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
      f_attach_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
      mutable_f_attach_list();

  // optional int32 f_report_time = 8;
  inline bool has_f_report_time() const;
  inline void clear_f_report_time();
  static const int kFReportTimeFieldNumber = 8;
  inline ::google::protobuf::int32 f_report_time() const;
  inline void set_f_report_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_req_t_task_report)
 private:
  inline void set_has_f_report_id();
  inline void clear_has_f_report_id();
  inline void set_has_f_sponsor();
  inline void clear_has_f_sponsor();
  inline void set_has_f_reply_to();
  inline void clear_has_f_reply_to();
  inline void set_has_f_title();
  inline void clear_has_f_title();
  inline void set_has_f_content();
  inline void clear_has_f_content();
  inline void set_has_f_content_type();
  inline void clear_has_f_content_type();
  inline void set_has_f_report_time();
  inline void clear_has_f_report_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_report_id_;
  ::pb_req_t_user* f_sponsor_;
  ::pb_req_t_user* f_reply_to_;
  ::std::string* f_title_;
  ::std::string* f_content_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach > f_attach_list_;
  ::google::protobuf::int32 f_content_type_;
  ::google::protobuf::int32 f_report_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_task_report* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_task : public ::google::protobuf::Message {
 public:
  pb_req_t_task();
  virtual ~pb_req_t_task();

  pb_req_t_task(const pb_req_t_task& from);

  inline pb_req_t_task& operator=(const pb_req_t_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_task& default_instance();

  void Swap(pb_req_t_task* other);

  // implements Message ----------------------------------------------

  pb_req_t_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_task& from);
  void MergeFrom(const pb_req_t_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_task_id = 1;
  inline bool has_f_task_id() const;
  inline void clear_f_task_id();
  static const int kFTaskIdFieldNumber = 1;
  inline const ::std::string& f_task_id() const;
  inline void set_f_task_id(const ::std::string& value);
  inline void set_f_task_id(const char* value);
  inline void set_f_task_id(const char* value, size_t size);
  inline ::std::string* mutable_f_task_id();
  inline ::std::string* release_f_task_id();
  inline void set_allocated_f_task_id(::std::string* f_task_id);

  // optional int32 f_task_type = 2;
  inline bool has_f_task_type() const;
  inline void clear_f_task_type();
  static const int kFTaskTypeFieldNumber = 2;
  inline ::google::protobuf::int32 f_task_type() const;
  inline void set_f_task_type(::google::protobuf::int32 value);

  // optional string f_prj_id = 3;
  inline bool has_f_prj_id() const;
  inline void clear_f_prj_id();
  static const int kFPrjIdFieldNumber = 3;
  inline const ::std::string& f_prj_id() const;
  inline void set_f_prj_id(const ::std::string& value);
  inline void set_f_prj_id(const char* value);
  inline void set_f_prj_id(const char* value, size_t size);
  inline ::std::string* mutable_f_prj_id();
  inline ::std::string* release_f_prj_id();
  inline void set_allocated_f_prj_id(::std::string* f_prj_id);

  // optional string f_task_desc = 4;
  inline bool has_f_task_desc() const;
  inline void clear_f_task_desc();
  static const int kFTaskDescFieldNumber = 4;
  inline const ::std::string& f_task_desc() const;
  inline void set_f_task_desc(const ::std::string& value);
  inline void set_f_task_desc(const char* value);
  inline void set_f_task_desc(const char* value, size_t size);
  inline ::std::string* mutable_f_task_desc();
  inline ::std::string* release_f_task_desc();
  inline void set_allocated_f_task_desc(::std::string* f_task_desc);

  // optional int32 f_task_desc_type = 5;
  inline bool has_f_task_desc_type() const;
  inline void clear_f_task_desc_type();
  static const int kFTaskDescTypeFieldNumber = 5;
  inline ::google::protobuf::int32 f_task_desc_type() const;
  inline void set_f_task_desc_type(::google::protobuf::int32 value);

  // optional int32 f_playtime = 6;
  inline bool has_f_playtime() const;
  inline void clear_f_playtime();
  static const int kFPlaytimeFieldNumber = 6;
  inline ::google::protobuf::int32 f_playtime() const;
  inline void set_f_playtime(::google::protobuf::int32 value);

  // optional .pb_req_t_user f_sponsor = 7;
  inline bool has_f_sponsor() const;
  inline void clear_f_sponsor();
  static const int kFSponsorFieldNumber = 7;
  inline const ::pb_req_t_user& f_sponsor() const;
  inline ::pb_req_t_user* mutable_f_sponsor();
  inline ::pb_req_t_user* release_f_sponsor();
  inline void set_allocated_f_sponsor(::pb_req_t_user* f_sponsor);

  // repeated .pb_req_t_user f_members = 8;
  inline int f_members_size() const;
  inline void clear_f_members();
  static const int kFMembersFieldNumber = 8;
  inline const ::pb_req_t_user& f_members(int index) const;
  inline ::pb_req_t_user* mutable_f_members(int index);
  inline ::pb_req_t_user* add_f_members();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >&
      f_members() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >*
      mutable_f_members();

  // optional string f_position = 9;
  inline bool has_f_position() const;
  inline void clear_f_position();
  static const int kFPositionFieldNumber = 9;
  inline const ::std::string& f_position() const;
  inline void set_f_position(const ::std::string& value);
  inline void set_f_position(const char* value);
  inline void set_f_position(const char* value, size_t size);
  inline ::std::string* mutable_f_position();
  inline ::std::string* release_f_position();
  inline void set_allocated_f_position(::std::string* f_position);

  // optional int32 f_task_status = 10;
  inline bool has_f_task_status() const;
  inline void clear_f_task_status();
  static const int kFTaskStatusFieldNumber = 10;
  inline ::google::protobuf::int32 f_task_status() const;
  inline void set_f_task_status(::google::protobuf::int32 value);

  // repeated .pb_req_t_attach f_attach_list = 11;
  inline int f_attach_list_size() const;
  inline void clear_f_attach_list();
  static const int kFAttachListFieldNumber = 11;
  inline const ::pb_req_t_attach& f_attach_list(int index) const;
  inline ::pb_req_t_attach* mutable_f_attach_list(int index);
  inline ::pb_req_t_attach* add_f_attach_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
      f_attach_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
      mutable_f_attach_list();

  // repeated .pb_req_t_task_report f_report_list = 12;
  inline int f_report_list_size() const;
  inline void clear_f_report_list();
  static const int kFReportListFieldNumber = 12;
  inline const ::pb_req_t_task_report& f_report_list(int index) const;
  inline ::pb_req_t_task_report* mutable_f_report_list(int index);
  inline ::pb_req_t_task_report* add_f_report_list();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_task_report >&
      f_report_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_task_report >*
      mutable_f_report_list();

  // optional int32 f_task_begin = 13;
  inline bool has_f_task_begin() const;
  inline void clear_f_task_begin();
  static const int kFTaskBeginFieldNumber = 13;
  inline ::google::protobuf::int32 f_task_begin() const;
  inline void set_f_task_begin(::google::protobuf::int32 value);

  // optional int32 f_task_end = 14;
  inline bool has_f_task_end() const;
  inline void clear_f_task_end();
  static const int kFTaskEndFieldNumber = 14;
  inline ::google::protobuf::int32 f_task_end() const;
  inline void set_f_task_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_req_t_task)
 private:
  inline void set_has_f_task_id();
  inline void clear_has_f_task_id();
  inline void set_has_f_task_type();
  inline void clear_has_f_task_type();
  inline void set_has_f_prj_id();
  inline void clear_has_f_prj_id();
  inline void set_has_f_task_desc();
  inline void clear_has_f_task_desc();
  inline void set_has_f_task_desc_type();
  inline void clear_has_f_task_desc_type();
  inline void set_has_f_playtime();
  inline void clear_has_f_playtime();
  inline void set_has_f_sponsor();
  inline void clear_has_f_sponsor();
  inline void set_has_f_position();
  inline void clear_has_f_position();
  inline void set_has_f_task_status();
  inline void clear_has_f_task_status();
  inline void set_has_f_task_begin();
  inline void clear_has_f_task_begin();
  inline void set_has_f_task_end();
  inline void clear_has_f_task_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_task_id_;
  ::std::string* f_prj_id_;
  ::google::protobuf::int32 f_task_type_;
  ::google::protobuf::int32 f_task_desc_type_;
  ::std::string* f_task_desc_;
  ::pb_req_t_user* f_sponsor_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_user > f_members_;
  ::google::protobuf::int32 f_playtime_;
  ::google::protobuf::int32 f_task_status_;
  ::std::string* f_position_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach > f_attach_list_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_task_report > f_report_list_;
  ::google::protobuf::int32 f_task_begin_;
  ::google::protobuf::int32 f_task_end_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_task* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_report : public ::google::protobuf::Message {
 public:
  pb_req_t_report();
  virtual ~pb_req_t_report();

  pb_req_t_report(const pb_req_t_report& from);

  inline pb_req_t_report& operator=(const pb_req_t_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_report& default_instance();

  void Swap(pb_req_t_report* other);

  // implements Message ----------------------------------------------

  pb_req_t_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_report& from);
  void MergeFrom(const pb_req_t_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string f_phone_info = 1;
  inline bool has_f_phone_info() const;
  inline void clear_f_phone_info();
  static const int kFPhoneInfoFieldNumber = 1;
  inline const ::std::string& f_phone_info() const;
  inline void set_f_phone_info(const ::std::string& value);
  inline void set_f_phone_info(const char* value);
  inline void set_f_phone_info(const char* value, size_t size);
  inline ::std::string* mutable_f_phone_info();
  inline ::std::string* release_f_phone_info();
  inline void set_allocated_f_phone_info(::std::string* f_phone_info);

  // optional string f_os = 2;
  inline bool has_f_os() const;
  inline void clear_f_os();
  static const int kFOsFieldNumber = 2;
  inline const ::std::string& f_os() const;
  inline void set_f_os(const ::std::string& value);
  inline void set_f_os(const char* value);
  inline void set_f_os(const char* value, size_t size);
  inline ::std::string* mutable_f_os();
  inline ::std::string* release_f_os();
  inline void set_allocated_f_os(::std::string* f_os);

  // optional string f_sp = 3;
  inline bool has_f_sp() const;
  inline void clear_f_sp();
  static const int kFSpFieldNumber = 3;
  inline const ::std::string& f_sp() const;
  inline void set_f_sp(const ::std::string& value);
  inline void set_f_sp(const char* value);
  inline void set_f_sp(const char* value, size_t size);
  inline ::std::string* mutable_f_sp();
  inline ::std::string* release_f_sp();
  inline void set_allocated_f_sp(::std::string* f_sp);

  // optional string f_network = 4;
  inline bool has_f_network() const;
  inline void clear_f_network();
  static const int kFNetworkFieldNumber = 4;
  inline const ::std::string& f_network() const;
  inline void set_f_network(const ::std::string& value);
  inline void set_f_network(const char* value);
  inline void set_f_network(const char* value, size_t size);
  inline ::std::string* mutable_f_network();
  inline ::std::string* release_f_network();
  inline void set_allocated_f_network(::std::string* f_network);

  // @@protoc_insertion_point(class_scope:pb_req_t_report)
 private:
  inline void set_has_f_phone_info();
  inline void clear_has_f_phone_info();
  inline void set_has_f_os();
  inline void clear_has_f_os();
  inline void set_has_f_sp();
  inline void clear_has_f_sp();
  inline void set_has_f_network();
  inline void clear_has_f_network();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_phone_info_;
  ::std::string* f_os_;
  ::std::string* f_sp_;
  ::std::string* f_network_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_report* default_instance_;
};
// -------------------------------------------------------------------

class pb_req_t_req : public ::google::protobuf::Message {
 public:
  pb_req_t_req();
  virtual ~pb_req_t_req();

  pb_req_t_req(const pb_req_t_req& from);

  inline pb_req_t_req& operator=(const pb_req_t_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_req_t_req& default_instance();

  void Swap(pb_req_t_req* other);

  // implements Message ----------------------------------------------

  pb_req_t_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_req_t_req& from);
  void MergeFrom(const pb_req_t_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 f_cmd = 1;
  inline bool has_f_cmd() const;
  inline void clear_f_cmd();
  static const int kFCmdFieldNumber = 1;
  inline ::google::protobuf::int32 f_cmd() const;
  inline void set_f_cmd(::google::protobuf::int32 value);

  // repeated int32 f_i_args = 2;
  inline int f_i_args_size() const;
  inline void clear_f_i_args();
  static const int kFIArgsFieldNumber = 2;
  inline ::google::protobuf::int32 f_i_args(int index) const;
  inline void set_f_i_args(int index, ::google::protobuf::int32 value);
  inline void add_f_i_args(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      f_i_args() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_f_i_args();

  // repeated string f_s_args = 3;
  inline int f_s_args_size() const;
  inline void clear_f_s_args();
  static const int kFSArgsFieldNumber = 3;
  inline const ::std::string& f_s_args(int index) const;
  inline ::std::string* mutable_f_s_args(int index);
  inline void set_f_s_args(int index, const ::std::string& value);
  inline void set_f_s_args(int index, const char* value);
  inline void set_f_s_args(int index, const char* value, size_t size);
  inline ::std::string* add_f_s_args();
  inline void add_f_s_args(const ::std::string& value);
  inline void add_f_s_args(const char* value);
  inline void add_f_s_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& f_s_args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_f_s_args();

  // repeated .pb_req_t_attach f_attch = 4;
  inline int f_attch_size() const;
  inline void clear_f_attch();
  static const int kFAttchFieldNumber = 4;
  inline const ::pb_req_t_attach& f_attch(int index) const;
  inline ::pb_req_t_attach* mutable_f_attch(int index);
  inline ::pb_req_t_attach* add_f_attch();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
      f_attch() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
      mutable_f_attch();

  // optional .pb_req_t_project f_project = 5;
  inline bool has_f_project() const;
  inline void clear_f_project();
  static const int kFProjectFieldNumber = 5;
  inline const ::pb_req_t_project& f_project() const;
  inline ::pb_req_t_project* mutable_f_project();
  inline ::pb_req_t_project* release_f_project();
  inline void set_allocated_f_project(::pb_req_t_project* f_project);

  // repeated .pb_req_t_user f_prj_member = 6;
  inline int f_prj_member_size() const;
  inline void clear_f_prj_member();
  static const int kFPrjMemberFieldNumber = 6;
  inline const ::pb_req_t_user& f_prj_member(int index) const;
  inline ::pb_req_t_user* mutable_f_prj_member(int index);
  inline ::pb_req_t_user* add_f_prj_member();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >&
      f_prj_member() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >*
      mutable_f_prj_member();

  // optional .pb_req_t_task f_task = 7;
  inline bool has_f_task() const;
  inline void clear_f_task();
  static const int kFTaskFieldNumber = 7;
  inline const ::pb_req_t_task& f_task() const;
  inline ::pb_req_t_task* mutable_f_task();
  inline ::pb_req_t_task* release_f_task();
  inline void set_allocated_f_task(::pb_req_t_task* f_task);

  // optional .pb_req_t_report f_report = 8;
  inline bool has_f_report() const;
  inline void clear_f_report();
  static const int kFReportFieldNumber = 8;
  inline const ::pb_req_t_report& f_report() const;
  inline ::pb_req_t_report* mutable_f_report();
  inline ::pb_req_t_report* release_f_report();
  inline void set_allocated_f_report(::pb_req_t_report* f_report);

  // @@protoc_insertion_point(class_scope:pb_req_t_req)
 private:
  inline void set_has_f_cmd();
  inline void clear_has_f_cmd();
  inline void set_has_f_project();
  inline void clear_has_f_project();
  inline void set_has_f_task();
  inline void clear_has_f_task();
  inline void set_has_f_report();
  inline void clear_has_f_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > f_i_args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> f_s_args_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach > f_attch_;
  ::pb_req_t_project* f_project_;
  ::google::protobuf::RepeatedPtrField< ::pb_req_t_user > f_prj_member_;
  ::pb_req_t_task* f_task_;
  ::pb_req_t_report* f_report_;
  ::google::protobuf::int32 f_cmd_;
  friend void  protobuf_AddDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_5freq_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_5freq_2eproto();

  void InitAsDefaultInstance();
  static pb_req_t_req* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_req_t_attach

// optional string f_attach_name = 1;
inline bool pb_req_t_attach::has_f_attach_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_attach::set_has_f_attach_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_attach::clear_has_f_attach_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_attach::clear_f_attach_name() {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_->clear();
  }
  clear_has_f_attach_name();
}
inline const ::std::string& pb_req_t_attach::f_attach_name() const {
  // @@protoc_insertion_point(field_get:pb_req_t_attach.f_attach_name)
  return *f_attach_name_;
}
inline void pb_req_t_attach::set_f_attach_name(const ::std::string& value) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_attach.f_attach_name)
}
inline void pb_req_t_attach::set_f_attach_name(const char* value) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_attach.f_attach_name)
}
inline void pb_req_t_attach::set_f_attach_name(const char* value, size_t size) {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  f_attach_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_attach.f_attach_name)
}
inline ::std::string* pb_req_t_attach::mutable_f_attach_name() {
  set_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_attach.f_attach_name)
  return f_attach_name_;
}
inline ::std::string* pb_req_t_attach::release_f_attach_name() {
  clear_has_f_attach_name();
  if (f_attach_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_attach_name_;
    f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_attach::set_allocated_f_attach_name(::std::string* f_attach_name) {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_;
  }
  if (f_attach_name) {
    set_has_f_attach_name();
    f_attach_name_ = f_attach_name;
  } else {
    clear_has_f_attach_name();
    f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_attach.f_attach_name)
}

// optional int32 f_attach_type = 2;
inline bool pb_req_t_attach::has_f_attach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_attach::set_has_f_attach_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_attach::clear_has_f_attach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_attach::clear_f_attach_type() {
  f_attach_type_ = 0;
  clear_has_f_attach_type();
}
inline ::google::protobuf::int32 pb_req_t_attach::f_attach_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_attach.f_attach_type)
  return f_attach_type_;
}
inline void pb_req_t_attach::set_f_attach_type(::google::protobuf::int32 value) {
  set_has_f_attach_type();
  f_attach_type_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_attach.f_attach_type)
}

// optional string f_attach_url = 3;
inline bool pb_req_t_attach::has_f_attach_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_attach::set_has_f_attach_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_attach::clear_has_f_attach_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_attach::clear_f_attach_url() {
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_->clear();
  }
  clear_has_f_attach_url();
}
inline const ::std::string& pb_req_t_attach::f_attach_url() const {
  // @@protoc_insertion_point(field_get:pb_req_t_attach.f_attach_url)
  return *f_attach_url_;
}
inline void pb_req_t_attach::set_f_attach_url(const ::std::string& value) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_attach.f_attach_url)
}
inline void pb_req_t_attach::set_f_attach_url(const char* value) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_attach.f_attach_url)
}
inline void pb_req_t_attach::set_f_attach_url(const char* value, size_t size) {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  f_attach_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_attach.f_attach_url)
}
inline ::std::string* pb_req_t_attach::mutable_f_attach_url() {
  set_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_attach_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_attach.f_attach_url)
  return f_attach_url_;
}
inline ::std::string* pb_req_t_attach::release_f_attach_url() {
  clear_has_f_attach_url();
  if (f_attach_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_attach_url_;
    f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_attach::set_allocated_f_attach_url(::std::string* f_attach_url) {
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_url_;
  }
  if (f_attach_url) {
    set_has_f_attach_url();
    f_attach_url_ = f_attach_url;
  } else {
    clear_has_f_attach_url();
    f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_attach.f_attach_url)
}

// optional int32 f_attach_size = 4;
inline bool pb_req_t_attach::has_f_attach_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_attach::set_has_f_attach_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_attach::clear_has_f_attach_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_attach::clear_f_attach_size() {
  f_attach_size_ = 0;
  clear_has_f_attach_size();
}
inline ::google::protobuf::int32 pb_req_t_attach::f_attach_size() const {
  // @@protoc_insertion_point(field_get:pb_req_t_attach.f_attach_size)
  return f_attach_size_;
}
inline void pb_req_t_attach::set_f_attach_size(::google::protobuf::int32 value) {
  set_has_f_attach_size();
  f_attach_size_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_attach.f_attach_size)
}

// optional int32 f_attach_playtime = 5;
inline bool pb_req_t_attach::has_f_attach_playtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_attach::set_has_f_attach_playtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_attach::clear_has_f_attach_playtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_attach::clear_f_attach_playtime() {
  f_attach_playtime_ = 0;
  clear_has_f_attach_playtime();
}
inline ::google::protobuf::int32 pb_req_t_attach::f_attach_playtime() const {
  // @@protoc_insertion_point(field_get:pb_req_t_attach.f_attach_playtime)
  return f_attach_playtime_;
}
inline void pb_req_t_attach::set_f_attach_playtime(::google::protobuf::int32 value) {
  set_has_f_attach_playtime();
  f_attach_playtime_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_attach.f_attach_playtime)
}

// -------------------------------------------------------------------

// pb_req_t_user

// optional uint32 f_uin = 1;
inline bool pb_req_t_user::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_user::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_user::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_user::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_req_t_user::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_req_t_user.f_uin)
  return f_uin_;
}
inline void pb_req_t_user::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_user.f_uin)
}

// optional string f_name = 2;
inline bool pb_req_t_user::has_f_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_user::set_has_f_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_user::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_user::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_req_t_user::f_name() const {
  // @@protoc_insertion_point(field_get:pb_req_t_user.f_name)
  return *f_name_;
}
inline void pb_req_t_user::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_user.f_name)
}
inline void pb_req_t_user::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_user.f_name)
}
inline void pb_req_t_user::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_user.f_name)
}
inline ::std::string* pb_req_t_user::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_user.f_name)
  return f_name_;
}
inline ::std::string* pb_req_t_user::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_user::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_user.f_name)
}

// optional string f_phone = 3;
inline bool pb_req_t_user::has_f_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_user::set_has_f_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_user::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_user::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_req_t_user::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_req_t_user.f_phone)
  return *f_phone_;
}
inline void pb_req_t_user::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_user.f_phone)
}
inline void pb_req_t_user::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_user.f_phone)
}
inline void pb_req_t_user::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_user.f_phone)
}
inline ::std::string* pb_req_t_user::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_user.f_phone)
  return f_phone_;
}
inline ::std::string* pb_req_t_user::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_user::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_user.f_phone)
}

// optional string f_job_type = 4;
inline bool pb_req_t_user::has_f_job_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_user::set_has_f_job_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_user::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_user::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_req_t_user::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_user.f_job_type)
  return *f_job_type_;
}
inline void pb_req_t_user::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_user.f_job_type)
}
inline void pb_req_t_user::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_user.f_job_type)
}
inline void pb_req_t_user::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_user.f_job_type)
}
inline ::std::string* pb_req_t_user::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_user.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_req_t_user::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_user::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_user.f_job_type)
}

// optional string f_join_content = 5;
inline bool pb_req_t_user::has_f_join_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_user::set_has_f_join_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_user::clear_has_f_join_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_user::clear_f_join_content() {
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_->clear();
  }
  clear_has_f_join_content();
}
inline const ::std::string& pb_req_t_user::f_join_content() const {
  // @@protoc_insertion_point(field_get:pb_req_t_user.f_join_content)
  return *f_join_content_;
}
inline void pb_req_t_user::set_f_join_content(const ::std::string& value) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_user.f_join_content)
}
inline void pb_req_t_user::set_f_join_content(const char* value) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_user.f_join_content)
}
inline void pb_req_t_user::set_f_join_content(const char* value, size_t size) {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  f_join_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_user.f_join_content)
}
inline ::std::string* pb_req_t_user::mutable_f_join_content() {
  set_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_join_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_user.f_join_content)
  return f_join_content_;
}
inline ::std::string* pb_req_t_user::release_f_join_content() {
  clear_has_f_join_content();
  if (f_join_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_join_content_;
    f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_user::set_allocated_f_join_content(::std::string* f_join_content) {
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_join_content_;
  }
  if (f_join_content) {
    set_has_f_join_content();
    f_join_content_ = f_join_content;
  } else {
    clear_has_f_join_content();
    f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_user.f_join_content)
}

// -------------------------------------------------------------------

// pb_req_t_project

// optional string f_prj_name = 1;
inline bool pb_req_t_project::has_f_prj_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_project::clear_has_f_prj_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_project::clear_f_prj_name() {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_->clear();
  }
  clear_has_f_prj_name();
}
inline const ::std::string& pb_req_t_project::f_prj_name() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_name)
  return *f_prj_name_;
}
inline void pb_req_t_project::set_f_prj_name(const ::std::string& value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_name)
}
inline void pb_req_t_project::set_f_prj_name(const char* value) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_prj_name)
}
inline void pb_req_t_project::set_f_prj_name(const char* value, size_t size) {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  f_prj_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_prj_name)
}
inline ::std::string* pb_req_t_project::mutable_f_prj_name() {
  set_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_prj_name)
  return f_prj_name_;
}
inline ::std::string* pb_req_t_project::release_f_prj_name() {
  clear_has_f_prj_name();
  if (f_prj_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_name_;
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_prj_name(::std::string* f_prj_name) {
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_name) {
    set_has_f_prj_name();
    f_prj_name_ = f_prj_name;
  } else {
    clear_has_f_prj_name();
    f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_prj_name)
}

// optional int32 f_prj_type = 2;
inline bool pb_req_t_project::has_f_prj_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_project::clear_has_f_prj_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_project::clear_f_prj_type() {
  f_prj_type_ = 0;
  clear_has_f_prj_type();
}
inline ::google::protobuf::int32 pb_req_t_project::f_prj_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_type)
  return f_prj_type_;
}
inline void pb_req_t_project::set_f_prj_type(::google::protobuf::int32 value) {
  set_has_f_prj_type();
  f_prj_type_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_type)
}

// optional string f_prj_image = 3;
inline bool pb_req_t_project::has_f_prj_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_project::clear_has_f_prj_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_project::clear_f_prj_image() {
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_->clear();
  }
  clear_has_f_prj_image();
}
inline const ::std::string& pb_req_t_project::f_prj_image() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_image)
  return *f_prj_image_;
}
inline void pb_req_t_project::set_f_prj_image(const ::std::string& value) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_image)
}
inline void pb_req_t_project::set_f_prj_image(const char* value) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_prj_image)
}
inline void pb_req_t_project::set_f_prj_image(const char* value, size_t size) {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  f_prj_image_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_prj_image)
}
inline ::std::string* pb_req_t_project::mutable_f_prj_image() {
  set_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_image_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_prj_image)
  return f_prj_image_;
}
inline ::std::string* pb_req_t_project::release_f_prj_image() {
  clear_has_f_prj_image();
  if (f_prj_image_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_image_;
    f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_prj_image(::std::string* f_prj_image) {
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_image_;
  }
  if (f_prj_image) {
    set_has_f_prj_image();
    f_prj_image_ = f_prj_image;
  } else {
    clear_has_f_prj_image();
    f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_prj_image)
}

// optional string f_province = 4;
inline bool pb_req_t_project::has_f_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_project::set_has_f_province() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_project::clear_has_f_province() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_project::clear_f_province() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_->clear();
  }
  clear_has_f_province();
}
inline const ::std::string& pb_req_t_project::f_province() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_province)
  return *f_province_;
}
inline void pb_req_t_project::set_f_province(const ::std::string& value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_province)
}
inline void pb_req_t_project::set_f_province(const char* value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_province)
}
inline void pb_req_t_project::set_f_province(const char* value, size_t size) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_province)
}
inline ::std::string* pb_req_t_project::mutable_f_province() {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_province)
  return f_province_;
}
inline ::std::string* pb_req_t_project::release_f_province() {
  clear_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_province_;
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_province(::std::string* f_province) {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_province) {
    set_has_f_province();
    f_province_ = f_province;
  } else {
    clear_has_f_province();
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_province)
}

// optional string f_city = 5;
inline bool pb_req_t_project::has_f_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_project::set_has_f_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_project::clear_has_f_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_project::clear_f_city() {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_->clear();
  }
  clear_has_f_city();
}
inline const ::std::string& pb_req_t_project::f_city() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_city)
  return *f_city_;
}
inline void pb_req_t_project::set_f_city(const ::std::string& value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_city)
}
inline void pb_req_t_project::set_f_city(const char* value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_city)
}
inline void pb_req_t_project::set_f_city(const char* value, size_t size) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_city)
}
inline ::std::string* pb_req_t_project::mutable_f_city() {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_city)
  return f_city_;
}
inline ::std::string* pb_req_t_project::release_f_city() {
  clear_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_city_;
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_city(::std::string* f_city) {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_city) {
    set_has_f_city();
    f_city_ = f_city;
  } else {
    clear_has_f_city();
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_city)
}

// optional string f_prj_address = 6;
inline bool pb_req_t_project::has_f_prj_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_req_t_project::clear_has_f_prj_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_req_t_project::clear_f_prj_address() {
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_->clear();
  }
  clear_has_f_prj_address();
}
inline const ::std::string& pb_req_t_project::f_prj_address() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_address)
  return *f_prj_address_;
}
inline void pb_req_t_project::set_f_prj_address(const ::std::string& value) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_address)
}
inline void pb_req_t_project::set_f_prj_address(const char* value) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_prj_address)
}
inline void pb_req_t_project::set_f_prj_address(const char* value, size_t size) {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  f_prj_address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_prj_address)
}
inline ::std::string* pb_req_t_project::mutable_f_prj_address() {
  set_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_prj_address)
  return f_prj_address_;
}
inline ::std::string* pb_req_t_project::release_f_prj_address() {
  clear_has_f_prj_address();
  if (f_prj_address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_address_;
    f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_prj_address(::std::string* f_prj_address) {
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_address_;
  }
  if (f_prj_address) {
    set_has_f_prj_address();
    f_prj_address_ = f_prj_address;
  } else {
    clear_has_f_prj_address();
    f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_prj_address)
}

// optional int32 f_floor_area = 7;
inline bool pb_req_t_project::has_f_floor_area() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_req_t_project::set_has_f_floor_area() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_req_t_project::clear_has_f_floor_area() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_req_t_project::clear_f_floor_area() {
  f_floor_area_ = 0;
  clear_has_f_floor_area();
}
inline ::google::protobuf::int32 pb_req_t_project::f_floor_area() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_floor_area)
  return f_floor_area_;
}
inline void pb_req_t_project::set_f_floor_area(::google::protobuf::int32 value) {
  set_has_f_floor_area();
  f_floor_area_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_floor_area)
}

// optional int32 f_prj_begin = 8;
inline bool pb_req_t_project::has_f_prj_begin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_begin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_req_t_project::clear_has_f_prj_begin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_req_t_project::clear_f_prj_begin() {
  f_prj_begin_ = 0;
  clear_has_f_prj_begin();
}
inline ::google::protobuf::int32 pb_req_t_project::f_prj_begin() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_begin)
  return f_prj_begin_;
}
inline void pb_req_t_project::set_f_prj_begin(::google::protobuf::int32 value) {
  set_has_f_prj_begin();
  f_prj_begin_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_begin)
}

// optional int32 f_prj_end = 9;
inline bool pb_req_t_project::has_f_prj_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_req_t_project::set_has_f_prj_end() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_req_t_project::clear_has_f_prj_end() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_req_t_project::clear_f_prj_end() {
  f_prj_end_ = 0;
  clear_has_f_prj_end();
}
inline ::google::protobuf::int32 pb_req_t_project::f_prj_end() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_prj_end)
  return f_prj_end_;
}
inline void pb_req_t_project::set_f_prj_end(::google::protobuf::int32 value) {
  set_has_f_prj_end();
  f_prj_end_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_prj_end)
}

// optional string f_jianzhu_danwei = 10;
inline bool pb_req_t_project::has_f_jianzhu_danwei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_req_t_project::set_has_f_jianzhu_danwei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_req_t_project::clear_has_f_jianzhu_danwei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_req_t_project::clear_f_jianzhu_danwei() {
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_->clear();
  }
  clear_has_f_jianzhu_danwei();
}
inline const ::std::string& pb_req_t_project::f_jianzhu_danwei() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_jianzhu_danwei)
  return *f_jianzhu_danwei_;
}
inline void pb_req_t_project::set_f_jianzhu_danwei(const ::std::string& value) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_jianzhu_danwei)
}
inline void pb_req_t_project::set_f_jianzhu_danwei(const char* value) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_jianzhu_danwei)
}
inline void pb_req_t_project::set_f_jianzhu_danwei(const char* value, size_t size) {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  f_jianzhu_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_jianzhu_danwei)
}
inline ::std::string* pb_req_t_project::mutable_f_jianzhu_danwei() {
  set_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianzhu_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_jianzhu_danwei)
  return f_jianzhu_danwei_;
}
inline ::std::string* pb_req_t_project::release_f_jianzhu_danwei() {
  clear_has_f_jianzhu_danwei();
  if (f_jianzhu_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_jianzhu_danwei_;
    f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_jianzhu_danwei(::std::string* f_jianzhu_danwei) {
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianzhu_danwei_;
  }
  if (f_jianzhu_danwei) {
    set_has_f_jianzhu_danwei();
    f_jianzhu_danwei_ = f_jianzhu_danwei;
  } else {
    clear_has_f_jianzhu_danwei();
    f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_jianzhu_danwei)
}

// optional string f_shigong_danwei = 11;
inline bool pb_req_t_project::has_f_shigong_danwei() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_req_t_project::set_has_f_shigong_danwei() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_req_t_project::clear_has_f_shigong_danwei() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_req_t_project::clear_f_shigong_danwei() {
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_->clear();
  }
  clear_has_f_shigong_danwei();
}
inline const ::std::string& pb_req_t_project::f_shigong_danwei() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_shigong_danwei)
  return *f_shigong_danwei_;
}
inline void pb_req_t_project::set_f_shigong_danwei(const ::std::string& value) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_shigong_danwei)
}
inline void pb_req_t_project::set_f_shigong_danwei(const char* value) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_shigong_danwei)
}
inline void pb_req_t_project::set_f_shigong_danwei(const char* value, size_t size) {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  f_shigong_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_shigong_danwei)
}
inline ::std::string* pb_req_t_project::mutable_f_shigong_danwei() {
  set_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_shigong_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_shigong_danwei)
  return f_shigong_danwei_;
}
inline ::std::string* pb_req_t_project::release_f_shigong_danwei() {
  clear_has_f_shigong_danwei();
  if (f_shigong_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_shigong_danwei_;
    f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_shigong_danwei(::std::string* f_shigong_danwei) {
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_shigong_danwei_;
  }
  if (f_shigong_danwei) {
    set_has_f_shigong_danwei();
    f_shigong_danwei_ = f_shigong_danwei;
  } else {
    clear_has_f_shigong_danwei();
    f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_shigong_danwei)
}

// optional string f_jianli_danwei = 12;
inline bool pb_req_t_project::has_f_jianli_danwei() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pb_req_t_project::set_has_f_jianli_danwei() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pb_req_t_project::clear_has_f_jianli_danwei() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pb_req_t_project::clear_f_jianli_danwei() {
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_->clear();
  }
  clear_has_f_jianli_danwei();
}
inline const ::std::string& pb_req_t_project::f_jianli_danwei() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_jianli_danwei)
  return *f_jianli_danwei_;
}
inline void pb_req_t_project::set_f_jianli_danwei(const ::std::string& value) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_jianli_danwei)
}
inline void pb_req_t_project::set_f_jianli_danwei(const char* value) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_jianli_danwei)
}
inline void pb_req_t_project::set_f_jianli_danwei(const char* value, size_t size) {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  f_jianli_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_jianli_danwei)
}
inline ::std::string* pb_req_t_project::mutable_f_jianli_danwei() {
  set_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_jianli_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_jianli_danwei)
  return f_jianli_danwei_;
}
inline ::std::string* pb_req_t_project::release_f_jianli_danwei() {
  clear_has_f_jianli_danwei();
  if (f_jianli_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_jianli_danwei_;
    f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_jianli_danwei(::std::string* f_jianli_danwei) {
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianli_danwei_;
  }
  if (f_jianli_danwei) {
    set_has_f_jianli_danwei();
    f_jianli_danwei_ = f_jianli_danwei;
  } else {
    clear_has_f_jianli_danwei();
    f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_jianli_danwei)
}

// optional string f_fenbao_danwei = 13;
inline bool pb_req_t_project::has_f_fenbao_danwei() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_req_t_project::set_has_f_fenbao_danwei() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_req_t_project::clear_has_f_fenbao_danwei() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_req_t_project::clear_f_fenbao_danwei() {
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_->clear();
  }
  clear_has_f_fenbao_danwei();
}
inline const ::std::string& pb_req_t_project::f_fenbao_danwei() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_fenbao_danwei)
  return *f_fenbao_danwei_;
}
inline void pb_req_t_project::set_f_fenbao_danwei(const ::std::string& value) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_fenbao_danwei)
}
inline void pb_req_t_project::set_f_fenbao_danwei(const char* value) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_project.f_fenbao_danwei)
}
inline void pb_req_t_project::set_f_fenbao_danwei(const char* value, size_t size) {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  f_fenbao_danwei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_project.f_fenbao_danwei)
}
inline ::std::string* pb_req_t_project::mutable_f_fenbao_danwei() {
  set_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_fenbao_danwei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_project.f_fenbao_danwei)
  return f_fenbao_danwei_;
}
inline ::std::string* pb_req_t_project::release_f_fenbao_danwei() {
  clear_has_f_fenbao_danwei();
  if (f_fenbao_danwei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_fenbao_danwei_;
    f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_project::set_allocated_f_fenbao_danwei(::std::string* f_fenbao_danwei) {
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fenbao_danwei_;
  }
  if (f_fenbao_danwei) {
    set_has_f_fenbao_danwei();
    f_fenbao_danwei_ = f_fenbao_danwei;
  } else {
    clear_has_f_fenbao_danwei();
    f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_project.f_fenbao_danwei)
}

// optional double f_lat = 14;
inline bool pb_req_t_project::has_f_lat() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_req_t_project::set_has_f_lat() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_req_t_project::clear_has_f_lat() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_req_t_project::clear_f_lat() {
  f_lat_ = 0;
  clear_has_f_lat();
}
inline double pb_req_t_project::f_lat() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_lat)
  return f_lat_;
}
inline void pb_req_t_project::set_f_lat(double value) {
  set_has_f_lat();
  f_lat_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_lat)
}

// optional double f_lon = 15;
inline bool pb_req_t_project::has_f_lon() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pb_req_t_project::set_has_f_lon() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pb_req_t_project::clear_has_f_lon() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pb_req_t_project::clear_f_lon() {
  f_lon_ = 0;
  clear_has_f_lon();
}
inline double pb_req_t_project::f_lon() const {
  // @@protoc_insertion_point(field_get:pb_req_t_project.f_lon)
  return f_lon_;
}
inline void pb_req_t_project::set_f_lon(double value) {
  set_has_f_lon();
  f_lon_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_project.f_lon)
}

// -------------------------------------------------------------------

// pb_req_t_task_report

// optional string f_report_id = 1;
inline bool pb_req_t_task_report::has_f_report_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_task_report::set_has_f_report_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_task_report::clear_has_f_report_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_task_report::clear_f_report_id() {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_->clear();
  }
  clear_has_f_report_id();
}
inline const ::std::string& pb_req_t_task_report::f_report_id() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_report_id)
  return *f_report_id_;
}
inline void pb_req_t_task_report::set_f_report_id(const ::std::string& value) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task_report.f_report_id)
}
inline void pb_req_t_task_report::set_f_report_id(const char* value) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task_report.f_report_id)
}
inline void pb_req_t_task_report::set_f_report_id(const char* value, size_t size) {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  f_report_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task_report.f_report_id)
}
inline ::std::string* pb_req_t_task_report::mutable_f_report_id() {
  set_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_report_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_report_id)
  return f_report_id_;
}
inline ::std::string* pb_req_t_task_report::release_f_report_id() {
  clear_has_f_report_id();
  if (f_report_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_report_id_;
    f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task_report::set_allocated_f_report_id(::std::string* f_report_id) {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_report_id_;
  }
  if (f_report_id) {
    set_has_f_report_id();
    f_report_id_ = f_report_id;
  } else {
    clear_has_f_report_id();
    f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task_report.f_report_id)
}

// optional .pb_req_t_user f_sponsor = 2;
inline bool pb_req_t_task_report::has_f_sponsor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_task_report::set_has_f_sponsor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_task_report::clear_has_f_sponsor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_task_report::clear_f_sponsor() {
  if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
  clear_has_f_sponsor();
}
inline const ::pb_req_t_user& pb_req_t_task_report::f_sponsor() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_sponsor)
  return f_sponsor_ != NULL ? *f_sponsor_ : *default_instance_->f_sponsor_;
}
inline ::pb_req_t_user* pb_req_t_task_report::mutable_f_sponsor() {
  set_has_f_sponsor();
  if (f_sponsor_ == NULL) f_sponsor_ = new ::pb_req_t_user;
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_sponsor)
  return f_sponsor_;
}
inline ::pb_req_t_user* pb_req_t_task_report::release_f_sponsor() {
  clear_has_f_sponsor();
  ::pb_req_t_user* temp = f_sponsor_;
  f_sponsor_ = NULL;
  return temp;
}
inline void pb_req_t_task_report::set_allocated_f_sponsor(::pb_req_t_user* f_sponsor) {
  delete f_sponsor_;
  f_sponsor_ = f_sponsor;
  if (f_sponsor) {
    set_has_f_sponsor();
  } else {
    clear_has_f_sponsor();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task_report.f_sponsor)
}

// optional .pb_req_t_user f_reply_to = 3;
inline bool pb_req_t_task_report::has_f_reply_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_task_report::set_has_f_reply_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_task_report::clear_has_f_reply_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_task_report::clear_f_reply_to() {
  if (f_reply_to_ != NULL) f_reply_to_->::pb_req_t_user::Clear();
  clear_has_f_reply_to();
}
inline const ::pb_req_t_user& pb_req_t_task_report::f_reply_to() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_reply_to)
  return f_reply_to_ != NULL ? *f_reply_to_ : *default_instance_->f_reply_to_;
}
inline ::pb_req_t_user* pb_req_t_task_report::mutable_f_reply_to() {
  set_has_f_reply_to();
  if (f_reply_to_ == NULL) f_reply_to_ = new ::pb_req_t_user;
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_reply_to)
  return f_reply_to_;
}
inline ::pb_req_t_user* pb_req_t_task_report::release_f_reply_to() {
  clear_has_f_reply_to();
  ::pb_req_t_user* temp = f_reply_to_;
  f_reply_to_ = NULL;
  return temp;
}
inline void pb_req_t_task_report::set_allocated_f_reply_to(::pb_req_t_user* f_reply_to) {
  delete f_reply_to_;
  f_reply_to_ = f_reply_to;
  if (f_reply_to) {
    set_has_f_reply_to();
  } else {
    clear_has_f_reply_to();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task_report.f_reply_to)
}

// optional string f_title = 4;
inline bool pb_req_t_task_report::has_f_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_task_report::set_has_f_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_task_report::clear_has_f_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_task_report::clear_f_title() {
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_->clear();
  }
  clear_has_f_title();
}
inline const ::std::string& pb_req_t_task_report::f_title() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_title)
  return *f_title_;
}
inline void pb_req_t_task_report::set_f_title(const ::std::string& value) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task_report.f_title)
}
inline void pb_req_t_task_report::set_f_title(const char* value) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task_report.f_title)
}
inline void pb_req_t_task_report::set_f_title(const char* value, size_t size) {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  f_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task_report.f_title)
}
inline ::std::string* pb_req_t_task_report::mutable_f_title() {
  set_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_title)
  return f_title_;
}
inline ::std::string* pb_req_t_task_report::release_f_title() {
  clear_has_f_title();
  if (f_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_title_;
    f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task_report::set_allocated_f_title(::std::string* f_title) {
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_title_;
  }
  if (f_title) {
    set_has_f_title();
    f_title_ = f_title;
  } else {
    clear_has_f_title();
    f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task_report.f_title)
}

// optional string f_content = 5;
inline bool pb_req_t_task_report::has_f_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_task_report::set_has_f_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_task_report::clear_has_f_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_task_report::clear_f_content() {
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_->clear();
  }
  clear_has_f_content();
}
inline const ::std::string& pb_req_t_task_report::f_content() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_content)
  return *f_content_;
}
inline void pb_req_t_task_report::set_f_content(const ::std::string& value) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task_report.f_content)
}
inline void pb_req_t_task_report::set_f_content(const char* value) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task_report.f_content)
}
inline void pb_req_t_task_report::set_f_content(const char* value, size_t size) {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  f_content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task_report.f_content)
}
inline ::std::string* pb_req_t_task_report::mutable_f_content() {
  set_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_content)
  return f_content_;
}
inline ::std::string* pb_req_t_task_report::release_f_content() {
  clear_has_f_content();
  if (f_content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_content_;
    f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task_report::set_allocated_f_content(::std::string* f_content) {
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_content_;
  }
  if (f_content) {
    set_has_f_content();
    f_content_ = f_content;
  } else {
    clear_has_f_content();
    f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task_report.f_content)
}

// optional int32 f_content_type = 6;
inline bool pb_req_t_task_report::has_f_content_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_req_t_task_report::set_has_f_content_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_req_t_task_report::clear_has_f_content_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_req_t_task_report::clear_f_content_type() {
  f_content_type_ = 0;
  clear_has_f_content_type();
}
inline ::google::protobuf::int32 pb_req_t_task_report::f_content_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_content_type)
  return f_content_type_;
}
inline void pb_req_t_task_report::set_f_content_type(::google::protobuf::int32 value) {
  set_has_f_content_type();
  f_content_type_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task_report.f_content_type)
}

// repeated .pb_req_t_attach f_attach_list = 7;
inline int pb_req_t_task_report::f_attach_list_size() const {
  return f_attach_list_.size();
}
inline void pb_req_t_task_report::clear_f_attach_list() {
  f_attach_list_.Clear();
}
inline const ::pb_req_t_attach& pb_req_t_task_report::f_attach_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_attach_list)
  return f_attach_list_.Get(index);
}
inline ::pb_req_t_attach* pb_req_t_task_report::mutable_f_attach_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_task_report.f_attach_list)
  return f_attach_list_.Mutable(index);
}
inline ::pb_req_t_attach* pb_req_t_task_report::add_f_attach_list() {
  // @@protoc_insertion_point(field_add:pb_req_t_task_report.f_attach_list)
  return f_attach_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
pb_req_t_task_report::f_attach_list() const {
  // @@protoc_insertion_point(field_list:pb_req_t_task_report.f_attach_list)
  return f_attach_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
pb_req_t_task_report::mutable_f_attach_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_task_report.f_attach_list)
  return &f_attach_list_;
}

// optional int32 f_report_time = 8;
inline bool pb_req_t_task_report::has_f_report_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_req_t_task_report::set_has_f_report_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_req_t_task_report::clear_has_f_report_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_req_t_task_report::clear_f_report_time() {
  f_report_time_ = 0;
  clear_has_f_report_time();
}
inline ::google::protobuf::int32 pb_req_t_task_report::f_report_time() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task_report.f_report_time)
  return f_report_time_;
}
inline void pb_req_t_task_report::set_f_report_time(::google::protobuf::int32 value) {
  set_has_f_report_time();
  f_report_time_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task_report.f_report_time)
}

// -------------------------------------------------------------------

// pb_req_t_task

// optional string f_task_id = 1;
inline bool pb_req_t_task::has_f_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_task::set_has_f_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_task::clear_has_f_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_task::clear_f_task_id() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_->clear();
  }
  clear_has_f_task_id();
}
inline const ::std::string& pb_req_t_task::f_task_id() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_id)
  return *f_task_id_;
}
inline void pb_req_t_task::set_f_task_id(const ::std::string& value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_id)
}
inline void pb_req_t_task::set_f_task_id(const char* value) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task.f_task_id)
}
inline void pb_req_t_task::set_f_task_id(const char* value, size_t size) {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  f_task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task.f_task_id)
}
inline ::std::string* pb_req_t_task::mutable_f_task_id() {
  set_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_task_id)
  return f_task_id_;
}
inline ::std::string* pb_req_t_task::release_f_task_id() {
  clear_has_f_task_id();
  if (f_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_id_;
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task::set_allocated_f_task_id(::std::string* f_task_id) {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_task_id) {
    set_has_f_task_id();
    f_task_id_ = f_task_id;
  } else {
    clear_has_f_task_id();
    f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task.f_task_id)
}

// optional int32 f_task_type = 2;
inline bool pb_req_t_task::has_f_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_task::set_has_f_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_task::clear_has_f_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_task::clear_f_task_type() {
  f_task_type_ = 0;
  clear_has_f_task_type();
}
inline ::google::protobuf::int32 pb_req_t_task::f_task_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_type)
  return f_task_type_;
}
inline void pb_req_t_task::set_f_task_type(::google::protobuf::int32 value) {
  set_has_f_task_type();
  f_task_type_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_type)
}

// optional string f_prj_id = 3;
inline bool pb_req_t_task::has_f_prj_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_task::set_has_f_prj_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_task::clear_has_f_prj_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_task::clear_f_prj_id() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_->clear();
  }
  clear_has_f_prj_id();
}
inline const ::std::string& pb_req_t_task::f_prj_id() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_prj_id)
  return *f_prj_id_;
}
inline void pb_req_t_task::set_f_prj_id(const ::std::string& value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_prj_id)
}
inline void pb_req_t_task::set_f_prj_id(const char* value) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task.f_prj_id)
}
inline void pb_req_t_task::set_f_prj_id(const char* value, size_t size) {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  f_prj_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task.f_prj_id)
}
inline ::std::string* pb_req_t_task::mutable_f_prj_id() {
  set_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_prj_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_prj_id)
  return f_prj_id_;
}
inline ::std::string* pb_req_t_task::release_f_prj_id() {
  clear_has_f_prj_id();
  if (f_prj_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_prj_id_;
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task::set_allocated_f_prj_id(::std::string* f_prj_id) {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_id) {
    set_has_f_prj_id();
    f_prj_id_ = f_prj_id;
  } else {
    clear_has_f_prj_id();
    f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task.f_prj_id)
}

// optional string f_task_desc = 4;
inline bool pb_req_t_task::has_f_task_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_task::set_has_f_task_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_task::clear_has_f_task_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_task::clear_f_task_desc() {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_->clear();
  }
  clear_has_f_task_desc();
}
inline const ::std::string& pb_req_t_task::f_task_desc() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_desc)
  return *f_task_desc_;
}
inline void pb_req_t_task::set_f_task_desc(const ::std::string& value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_desc)
}
inline void pb_req_t_task::set_f_task_desc(const char* value) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task.f_task_desc)
}
inline void pb_req_t_task::set_f_task_desc(const char* value, size_t size) {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  f_task_desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task.f_task_desc)
}
inline ::std::string* pb_req_t_task::mutable_f_task_desc() {
  set_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_task_desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_task_desc)
  return f_task_desc_;
}
inline ::std::string* pb_req_t_task::release_f_task_desc() {
  clear_has_f_task_desc();
  if (f_task_desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_task_desc_;
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task::set_allocated_f_task_desc(::std::string* f_task_desc) {
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_task_desc) {
    set_has_f_task_desc();
    f_task_desc_ = f_task_desc;
  } else {
    clear_has_f_task_desc();
    f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task.f_task_desc)
}

// optional int32 f_task_desc_type = 5;
inline bool pb_req_t_task::has_f_task_desc_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_task::set_has_f_task_desc_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_task::clear_has_f_task_desc_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_task::clear_f_task_desc_type() {
  f_task_desc_type_ = 0;
  clear_has_f_task_desc_type();
}
inline ::google::protobuf::int32 pb_req_t_task::f_task_desc_type() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_desc_type)
  return f_task_desc_type_;
}
inline void pb_req_t_task::set_f_task_desc_type(::google::protobuf::int32 value) {
  set_has_f_task_desc_type();
  f_task_desc_type_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_desc_type)
}

// optional int32 f_playtime = 6;
inline bool pb_req_t_task::has_f_playtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_req_t_task::set_has_f_playtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_req_t_task::clear_has_f_playtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_req_t_task::clear_f_playtime() {
  f_playtime_ = 0;
  clear_has_f_playtime();
}
inline ::google::protobuf::int32 pb_req_t_task::f_playtime() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_playtime)
  return f_playtime_;
}
inline void pb_req_t_task::set_f_playtime(::google::protobuf::int32 value) {
  set_has_f_playtime();
  f_playtime_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_playtime)
}

// optional .pb_req_t_user f_sponsor = 7;
inline bool pb_req_t_task::has_f_sponsor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_req_t_task::set_has_f_sponsor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_req_t_task::clear_has_f_sponsor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_req_t_task::clear_f_sponsor() {
  if (f_sponsor_ != NULL) f_sponsor_->::pb_req_t_user::Clear();
  clear_has_f_sponsor();
}
inline const ::pb_req_t_user& pb_req_t_task::f_sponsor() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_sponsor)
  return f_sponsor_ != NULL ? *f_sponsor_ : *default_instance_->f_sponsor_;
}
inline ::pb_req_t_user* pb_req_t_task::mutable_f_sponsor() {
  set_has_f_sponsor();
  if (f_sponsor_ == NULL) f_sponsor_ = new ::pb_req_t_user;
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_sponsor)
  return f_sponsor_;
}
inline ::pb_req_t_user* pb_req_t_task::release_f_sponsor() {
  clear_has_f_sponsor();
  ::pb_req_t_user* temp = f_sponsor_;
  f_sponsor_ = NULL;
  return temp;
}
inline void pb_req_t_task::set_allocated_f_sponsor(::pb_req_t_user* f_sponsor) {
  delete f_sponsor_;
  f_sponsor_ = f_sponsor;
  if (f_sponsor) {
    set_has_f_sponsor();
  } else {
    clear_has_f_sponsor();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task.f_sponsor)
}

// repeated .pb_req_t_user f_members = 8;
inline int pb_req_t_task::f_members_size() const {
  return f_members_.size();
}
inline void pb_req_t_task::clear_f_members() {
  f_members_.Clear();
}
inline const ::pb_req_t_user& pb_req_t_task::f_members(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_members)
  return f_members_.Get(index);
}
inline ::pb_req_t_user* pb_req_t_task::mutable_f_members(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_members)
  return f_members_.Mutable(index);
}
inline ::pb_req_t_user* pb_req_t_task::add_f_members() {
  // @@protoc_insertion_point(field_add:pb_req_t_task.f_members)
  return f_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >&
pb_req_t_task::f_members() const {
  // @@protoc_insertion_point(field_list:pb_req_t_task.f_members)
  return f_members_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >*
pb_req_t_task::mutable_f_members() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_task.f_members)
  return &f_members_;
}

// optional string f_position = 9;
inline bool pb_req_t_task::has_f_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_req_t_task::set_has_f_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_req_t_task::clear_has_f_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_req_t_task::clear_f_position() {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_->clear();
  }
  clear_has_f_position();
}
inline const ::std::string& pb_req_t_task::f_position() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_position)
  return *f_position_;
}
inline void pb_req_t_task::set_f_position(const ::std::string& value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_position)
}
inline void pb_req_t_task::set_f_position(const char* value) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_task.f_position)
}
inline void pb_req_t_task::set_f_position(const char* value, size_t size) {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  f_position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_task.f_position)
}
inline ::std::string* pb_req_t_task::mutable_f_position() {
  set_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_position)
  return f_position_;
}
inline ::std::string* pb_req_t_task::release_f_position() {
  clear_has_f_position();
  if (f_position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_position_;
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_task::set_allocated_f_position(::std::string* f_position) {
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (f_position) {
    set_has_f_position();
    f_position_ = f_position;
  } else {
    clear_has_f_position();
    f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_task.f_position)
}

// optional int32 f_task_status = 10;
inline bool pb_req_t_task::has_f_task_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_req_t_task::set_has_f_task_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_req_t_task::clear_has_f_task_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_req_t_task::clear_f_task_status() {
  f_task_status_ = 0;
  clear_has_f_task_status();
}
inline ::google::protobuf::int32 pb_req_t_task::f_task_status() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_status)
  return f_task_status_;
}
inline void pb_req_t_task::set_f_task_status(::google::protobuf::int32 value) {
  set_has_f_task_status();
  f_task_status_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_status)
}

// repeated .pb_req_t_attach f_attach_list = 11;
inline int pb_req_t_task::f_attach_list_size() const {
  return f_attach_list_.size();
}
inline void pb_req_t_task::clear_f_attach_list() {
  f_attach_list_.Clear();
}
inline const ::pb_req_t_attach& pb_req_t_task::f_attach_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_attach_list)
  return f_attach_list_.Get(index);
}
inline ::pb_req_t_attach* pb_req_t_task::mutable_f_attach_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_attach_list)
  return f_attach_list_.Mutable(index);
}
inline ::pb_req_t_attach* pb_req_t_task::add_f_attach_list() {
  // @@protoc_insertion_point(field_add:pb_req_t_task.f_attach_list)
  return f_attach_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
pb_req_t_task::f_attach_list() const {
  // @@protoc_insertion_point(field_list:pb_req_t_task.f_attach_list)
  return f_attach_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
pb_req_t_task::mutable_f_attach_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_task.f_attach_list)
  return &f_attach_list_;
}

// repeated .pb_req_t_task_report f_report_list = 12;
inline int pb_req_t_task::f_report_list_size() const {
  return f_report_list_.size();
}
inline void pb_req_t_task::clear_f_report_list() {
  f_report_list_.Clear();
}
inline const ::pb_req_t_task_report& pb_req_t_task::f_report_list(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_report_list)
  return f_report_list_.Get(index);
}
inline ::pb_req_t_task_report* pb_req_t_task::mutable_f_report_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_task.f_report_list)
  return f_report_list_.Mutable(index);
}
inline ::pb_req_t_task_report* pb_req_t_task::add_f_report_list() {
  // @@protoc_insertion_point(field_add:pb_req_t_task.f_report_list)
  return f_report_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_task_report >&
pb_req_t_task::f_report_list() const {
  // @@protoc_insertion_point(field_list:pb_req_t_task.f_report_list)
  return f_report_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_task_report >*
pb_req_t_task::mutable_f_report_list() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_task.f_report_list)
  return &f_report_list_;
}

// optional int32 f_task_begin = 13;
inline bool pb_req_t_task::has_f_task_begin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pb_req_t_task::set_has_f_task_begin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pb_req_t_task::clear_has_f_task_begin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pb_req_t_task::clear_f_task_begin() {
  f_task_begin_ = 0;
  clear_has_f_task_begin();
}
inline ::google::protobuf::int32 pb_req_t_task::f_task_begin() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_begin)
  return f_task_begin_;
}
inline void pb_req_t_task::set_f_task_begin(::google::protobuf::int32 value) {
  set_has_f_task_begin();
  f_task_begin_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_begin)
}

// optional int32 f_task_end = 14;
inline bool pb_req_t_task::has_f_task_end() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pb_req_t_task::set_has_f_task_end() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pb_req_t_task::clear_has_f_task_end() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pb_req_t_task::clear_f_task_end() {
  f_task_end_ = 0;
  clear_has_f_task_end();
}
inline ::google::protobuf::int32 pb_req_t_task::f_task_end() const {
  // @@protoc_insertion_point(field_get:pb_req_t_task.f_task_end)
  return f_task_end_;
}
inline void pb_req_t_task::set_f_task_end(::google::protobuf::int32 value) {
  set_has_f_task_end();
  f_task_end_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_task.f_task_end)
}

// -------------------------------------------------------------------

// pb_req_t_report

// optional string f_phone_info = 1;
inline bool pb_req_t_report::has_f_phone_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_report::set_has_f_phone_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_report::clear_has_f_phone_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_report::clear_f_phone_info() {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_->clear();
  }
  clear_has_f_phone_info();
}
inline const ::std::string& pb_req_t_report::f_phone_info() const {
  // @@protoc_insertion_point(field_get:pb_req_t_report.f_phone_info)
  return *f_phone_info_;
}
inline void pb_req_t_report::set_f_phone_info(const ::std::string& value) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_report.f_phone_info)
}
inline void pb_req_t_report::set_f_phone_info(const char* value) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_report.f_phone_info)
}
inline void pb_req_t_report::set_f_phone_info(const char* value, size_t size) {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  f_phone_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_report.f_phone_info)
}
inline ::std::string* pb_req_t_report::mutable_f_phone_info() {
  set_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_report.f_phone_info)
  return f_phone_info_;
}
inline ::std::string* pb_req_t_report::release_f_phone_info() {
  clear_has_f_phone_info();
  if (f_phone_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_info_;
    f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_report::set_allocated_f_phone_info(::std::string* f_phone_info) {
  if (f_phone_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_info_;
  }
  if (f_phone_info) {
    set_has_f_phone_info();
    f_phone_info_ = f_phone_info;
  } else {
    clear_has_f_phone_info();
    f_phone_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_report.f_phone_info)
}

// optional string f_os = 2;
inline bool pb_req_t_report::has_f_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_req_t_report::set_has_f_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_req_t_report::clear_has_f_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_req_t_report::clear_f_os() {
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_->clear();
  }
  clear_has_f_os();
}
inline const ::std::string& pb_req_t_report::f_os() const {
  // @@protoc_insertion_point(field_get:pb_req_t_report.f_os)
  return *f_os_;
}
inline void pb_req_t_report::set_f_os(const ::std::string& value) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_report.f_os)
}
inline void pb_req_t_report::set_f_os(const char* value) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_report.f_os)
}
inline void pb_req_t_report::set_f_os(const char* value, size_t size) {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  f_os_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_report.f_os)
}
inline ::std::string* pb_req_t_report::mutable_f_os() {
  set_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_os_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_report.f_os)
  return f_os_;
}
inline ::std::string* pb_req_t_report::release_f_os() {
  clear_has_f_os();
  if (f_os_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_os_;
    f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_report::set_allocated_f_os(::std::string* f_os) {
  if (f_os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_os_;
  }
  if (f_os) {
    set_has_f_os();
    f_os_ = f_os;
  } else {
    clear_has_f_os();
    f_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_report.f_os)
}

// optional string f_sp = 3;
inline bool pb_req_t_report::has_f_sp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_req_t_report::set_has_f_sp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_req_t_report::clear_has_f_sp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_req_t_report::clear_f_sp() {
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_->clear();
  }
  clear_has_f_sp();
}
inline const ::std::string& pb_req_t_report::f_sp() const {
  // @@protoc_insertion_point(field_get:pb_req_t_report.f_sp)
  return *f_sp_;
}
inline void pb_req_t_report::set_f_sp(const ::std::string& value) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_report.f_sp)
}
inline void pb_req_t_report::set_f_sp(const char* value) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_report.f_sp)
}
inline void pb_req_t_report::set_f_sp(const char* value, size_t size) {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  f_sp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_report.f_sp)
}
inline ::std::string* pb_req_t_report::mutable_f_sp() {
  set_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_sp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_report.f_sp)
  return f_sp_;
}
inline ::std::string* pb_req_t_report::release_f_sp() {
  clear_has_f_sp();
  if (f_sp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_sp_;
    f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_report::set_allocated_f_sp(::std::string* f_sp) {
  if (f_sp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sp_;
  }
  if (f_sp) {
    set_has_f_sp();
    f_sp_ = f_sp;
  } else {
    clear_has_f_sp();
    f_sp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_report.f_sp)
}

// optional string f_network = 4;
inline bool pb_req_t_report::has_f_network() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_req_t_report::set_has_f_network() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_req_t_report::clear_has_f_network() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_req_t_report::clear_f_network() {
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_->clear();
  }
  clear_has_f_network();
}
inline const ::std::string& pb_req_t_report::f_network() const {
  // @@protoc_insertion_point(field_get:pb_req_t_report.f_network)
  return *f_network_;
}
inline void pb_req_t_report::set_f_network(const ::std::string& value) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(value);
  // @@protoc_insertion_point(field_set:pb_req_t_report.f_network)
}
inline void pb_req_t_report::set_f_network(const char* value) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_report.f_network)
}
inline void pb_req_t_report::set_f_network(const char* value, size_t size) {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  f_network_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_report.f_network)
}
inline ::std::string* pb_req_t_report::mutable_f_network() {
  set_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_network_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_req_t_report.f_network)
  return f_network_;
}
inline ::std::string* pb_req_t_report::release_f_network() {
  clear_has_f_network();
  if (f_network_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_network_;
    f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_req_t_report::set_allocated_f_network(::std::string* f_network) {
  if (f_network_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_network_;
  }
  if (f_network) {
    set_has_f_network();
    f_network_ = f_network;
  } else {
    clear_has_f_network();
    f_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_report.f_network)
}

// -------------------------------------------------------------------

// pb_req_t_req

// optional int32 f_cmd = 1;
inline bool pb_req_t_req::has_f_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_req_t_req::set_has_f_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_req_t_req::clear_has_f_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_req_t_req::clear_f_cmd() {
  f_cmd_ = 0;
  clear_has_f_cmd();
}
inline ::google::protobuf::int32 pb_req_t_req::f_cmd() const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_cmd)
  return f_cmd_;
}
inline void pb_req_t_req::set_f_cmd(::google::protobuf::int32 value) {
  set_has_f_cmd();
  f_cmd_ = value;
  // @@protoc_insertion_point(field_set:pb_req_t_req.f_cmd)
}

// repeated int32 f_i_args = 2;
inline int pb_req_t_req::f_i_args_size() const {
  return f_i_args_.size();
}
inline void pb_req_t_req::clear_f_i_args() {
  f_i_args_.Clear();
}
inline ::google::protobuf::int32 pb_req_t_req::f_i_args(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_i_args)
  return f_i_args_.Get(index);
}
inline void pb_req_t_req::set_f_i_args(int index, ::google::protobuf::int32 value) {
  f_i_args_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_req_t_req.f_i_args)
}
inline void pb_req_t_req::add_f_i_args(::google::protobuf::int32 value) {
  f_i_args_.Add(value);
  // @@protoc_insertion_point(field_add:pb_req_t_req.f_i_args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pb_req_t_req::f_i_args() const {
  // @@protoc_insertion_point(field_list:pb_req_t_req.f_i_args)
  return f_i_args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pb_req_t_req::mutable_f_i_args() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_req.f_i_args)
  return &f_i_args_;
}

// repeated string f_s_args = 3;
inline int pb_req_t_req::f_s_args_size() const {
  return f_s_args_.size();
}
inline void pb_req_t_req::clear_f_s_args() {
  f_s_args_.Clear();
}
inline const ::std::string& pb_req_t_req::f_s_args(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_s_args)
  return f_s_args_.Get(index);
}
inline ::std::string* pb_req_t_req::mutable_f_s_args(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_s_args)
  return f_s_args_.Mutable(index);
}
inline void pb_req_t_req::set_f_s_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb_req_t_req.f_s_args)
  f_s_args_.Mutable(index)->assign(value);
}
inline void pb_req_t_req::set_f_s_args(int index, const char* value) {
  f_s_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_req_t_req.f_s_args)
}
inline void pb_req_t_req::set_f_s_args(int index, const char* value, size_t size) {
  f_s_args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_req_t_req.f_s_args)
}
inline ::std::string* pb_req_t_req::add_f_s_args() {
  return f_s_args_.Add();
}
inline void pb_req_t_req::add_f_s_args(const ::std::string& value) {
  f_s_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_req_t_req.f_s_args)
}
inline void pb_req_t_req::add_f_s_args(const char* value) {
  f_s_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_req_t_req.f_s_args)
}
inline void pb_req_t_req::add_f_s_args(const char* value, size_t size) {
  f_s_args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_req_t_req.f_s_args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pb_req_t_req::f_s_args() const {
  // @@protoc_insertion_point(field_list:pb_req_t_req.f_s_args)
  return f_s_args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pb_req_t_req::mutable_f_s_args() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_req.f_s_args)
  return &f_s_args_;
}

// repeated .pb_req_t_attach f_attch = 4;
inline int pb_req_t_req::f_attch_size() const {
  return f_attch_.size();
}
inline void pb_req_t_req::clear_f_attch() {
  f_attch_.Clear();
}
inline const ::pb_req_t_attach& pb_req_t_req::f_attch(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_attch)
  return f_attch_.Get(index);
}
inline ::pb_req_t_attach* pb_req_t_req::mutable_f_attch(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_attch)
  return f_attch_.Mutable(index);
}
inline ::pb_req_t_attach* pb_req_t_req::add_f_attch() {
  // @@protoc_insertion_point(field_add:pb_req_t_req.f_attch)
  return f_attch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >&
pb_req_t_req::f_attch() const {
  // @@protoc_insertion_point(field_list:pb_req_t_req.f_attch)
  return f_attch_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_attach >*
pb_req_t_req::mutable_f_attch() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_req.f_attch)
  return &f_attch_;
}

// optional .pb_req_t_project f_project = 5;
inline bool pb_req_t_req::has_f_project() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_req_t_req::set_has_f_project() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_req_t_req::clear_has_f_project() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_req_t_req::clear_f_project() {
  if (f_project_ != NULL) f_project_->::pb_req_t_project::Clear();
  clear_has_f_project();
}
inline const ::pb_req_t_project& pb_req_t_req::f_project() const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_project)
  return f_project_ != NULL ? *f_project_ : *default_instance_->f_project_;
}
inline ::pb_req_t_project* pb_req_t_req::mutable_f_project() {
  set_has_f_project();
  if (f_project_ == NULL) f_project_ = new ::pb_req_t_project;
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_project)
  return f_project_;
}
inline ::pb_req_t_project* pb_req_t_req::release_f_project() {
  clear_has_f_project();
  ::pb_req_t_project* temp = f_project_;
  f_project_ = NULL;
  return temp;
}
inline void pb_req_t_req::set_allocated_f_project(::pb_req_t_project* f_project) {
  delete f_project_;
  f_project_ = f_project;
  if (f_project) {
    set_has_f_project();
  } else {
    clear_has_f_project();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_req.f_project)
}

// repeated .pb_req_t_user f_prj_member = 6;
inline int pb_req_t_req::f_prj_member_size() const {
  return f_prj_member_.size();
}
inline void pb_req_t_req::clear_f_prj_member() {
  f_prj_member_.Clear();
}
inline const ::pb_req_t_user& pb_req_t_req::f_prj_member(int index) const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_prj_member)
  return f_prj_member_.Get(index);
}
inline ::pb_req_t_user* pb_req_t_req::mutable_f_prj_member(int index) {
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_prj_member)
  return f_prj_member_.Mutable(index);
}
inline ::pb_req_t_user* pb_req_t_req::add_f_prj_member() {
  // @@protoc_insertion_point(field_add:pb_req_t_req.f_prj_member)
  return f_prj_member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >&
pb_req_t_req::f_prj_member() const {
  // @@protoc_insertion_point(field_list:pb_req_t_req.f_prj_member)
  return f_prj_member_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_req_t_user >*
pb_req_t_req::mutable_f_prj_member() {
  // @@protoc_insertion_point(field_mutable_list:pb_req_t_req.f_prj_member)
  return &f_prj_member_;
}

// optional .pb_req_t_task f_task = 7;
inline bool pb_req_t_req::has_f_task() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_req_t_req::set_has_f_task() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_req_t_req::clear_has_f_task() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_req_t_req::clear_f_task() {
  if (f_task_ != NULL) f_task_->::pb_req_t_task::Clear();
  clear_has_f_task();
}
inline const ::pb_req_t_task& pb_req_t_req::f_task() const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_task)
  return f_task_ != NULL ? *f_task_ : *default_instance_->f_task_;
}
inline ::pb_req_t_task* pb_req_t_req::mutable_f_task() {
  set_has_f_task();
  if (f_task_ == NULL) f_task_ = new ::pb_req_t_task;
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_task)
  return f_task_;
}
inline ::pb_req_t_task* pb_req_t_req::release_f_task() {
  clear_has_f_task();
  ::pb_req_t_task* temp = f_task_;
  f_task_ = NULL;
  return temp;
}
inline void pb_req_t_req::set_allocated_f_task(::pb_req_t_task* f_task) {
  delete f_task_;
  f_task_ = f_task;
  if (f_task) {
    set_has_f_task();
  } else {
    clear_has_f_task();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_req.f_task)
}

// optional .pb_req_t_report f_report = 8;
inline bool pb_req_t_req::has_f_report() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_req_t_req::set_has_f_report() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_req_t_req::clear_has_f_report() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_req_t_req::clear_f_report() {
  if (f_report_ != NULL) f_report_->::pb_req_t_report::Clear();
  clear_has_f_report();
}
inline const ::pb_req_t_report& pb_req_t_req::f_report() const {
  // @@protoc_insertion_point(field_get:pb_req_t_req.f_report)
  return f_report_ != NULL ? *f_report_ : *default_instance_->f_report_;
}
inline ::pb_req_t_report* pb_req_t_req::mutable_f_report() {
  set_has_f_report();
  if (f_report_ == NULL) f_report_ = new ::pb_req_t_report;
  // @@protoc_insertion_point(field_mutable:pb_req_t_req.f_report)
  return f_report_;
}
inline ::pb_req_t_report* pb_req_t_req::release_f_report() {
  clear_has_f_report();
  ::pb_req_t_report* temp = f_report_;
  f_report_ = NULL;
  return temp;
}
inline void pb_req_t_req::set_allocated_f_report(::pb_req_t_report* f_report) {
  delete f_report_;
  f_report_ = f_report;
  if (f_report) {
    set_has_f_report();
  } else {
    clear_has_f_report();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_req_t_req.f_report)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fgsk_5freq_2eproto__INCLUDED
