// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_gsk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pb_clt_t_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_recommend_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_recommend_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_group_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_group_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_group_base_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_group_base_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_group_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_group_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_group_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_group_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_clt_t_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_clt_t_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_weather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_weather_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_book_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_book_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_hotspot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_hotspot_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_prj_record_base_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_prj_record_base_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_prj_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_prj_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_im_t_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_im_t_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_feed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_feed_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_milestore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_milestore_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_task_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_task_report_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_task_view_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_task_view_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_task_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_task_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_task_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_task_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_weather_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_weather_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_reminder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_reminder_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_weather_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_weather_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_prj_weather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_prj_weather_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_prj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_prj_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_recommend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_recommend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_recommend_prj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_recommend_prj_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_base_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_base_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_file_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_department_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_department_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_prj_t_details_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_prj_t_details_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_extra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_extra_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_recommend_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_recommend_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_phone_address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_phone_address_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_im_group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_im_group_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_prj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_prj_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_collection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_collection_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_collection_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_collection_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* pb_user_t_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pb_user_t_data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fgsk_2eproto() {
  protobuf_AddDesc_pb_5fgsk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_gsk.proto");
  GOOGLE_CHECK(file != NULL);
  pb_clt_t_friend_descriptor_ = file->message_type(0);
  static const int pb_clt_t_friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_friend, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_friend, f_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_friend, f_friend_cnt_),
  };
  pb_clt_t_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_friend_descriptor_,
      pb_clt_t_friend::default_instance_,
      pb_clt_t_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_friend));
  pb_clt_t_recommend_friend_descriptor_ = file->message_type(1);
  static const int pb_clt_t_recommend_friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_recommend_friend, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_recommend_friend, f_recommend_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_recommend_friend, f_recommend_friend_cnt_),
  };
  pb_clt_t_recommend_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_recommend_friend_descriptor_,
      pb_clt_t_recommend_friend::default_instance_,
      pb_clt_t_recommend_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_recommend_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_recommend_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_recommend_friend));
  pb_clt_t_group_user_descriptor_ = file->message_type(2);
  static const int pb_clt_t_group_user_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, f_name_pinyin_j_),
  };
  pb_clt_t_group_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_group_user_descriptor_,
      pb_clt_t_group_user::default_instance_,
      pb_clt_t_group_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_group_user));
  pb_clt_t_group_base_user_descriptor_ = file->message_type(3);
  static const int pb_clt_t_group_base_user_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_base_user, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_base_user, f_name_),
  };
  pb_clt_t_group_base_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_group_base_user_descriptor_,
      pb_clt_t_group_base_user::default_instance_,
      pb_clt_t_group_base_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_base_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_base_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_group_base_user));
  pb_clt_t_group_item_descriptor_ = file->message_type(4);
  static const int pb_clt_t_group_item_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_group_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_last_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_last_msg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_last_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_last_sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_last_sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_is_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_is_remind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_name_pinyin_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_init_seqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_read_seqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_creator_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, f_base_users_),
  };
  pb_clt_t_group_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_group_item_descriptor_,
      pb_clt_t_group_item::default_instance_,
      pb_clt_t_group_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_group_item));
  pb_clt_t_group_details_descriptor_ = file->message_type(5);
  static const int pb_clt_t_group_details_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_details, f_group_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_details, f_members_),
  };
  pb_clt_t_group_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_group_details_descriptor_,
      pb_clt_t_group_details::default_instance_,
      pb_clt_t_group_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_group_details));
  pb_clt_t_group_descriptor_ = file->message_type(6);
  static const int pb_clt_t_group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group, f_last_update_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group, f_im_group_),
  };
  pb_clt_t_group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_group_descriptor_,
      pb_clt_t_group::default_instance_,
      pb_clt_t_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_group));
  pb_clt_t_version_descriptor_ = file->message_type(7);
  static const int pb_clt_t_version_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, f_version_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, f_version_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, f_chanel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, f_down_url_),
  };
  pb_clt_t_version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_version_descriptor_,
      pb_clt_t_version::default_instance_,
      pb_clt_t_version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_version));
  pb_clt_t_user_descriptor_ = file->message_type(8);
  static const int pb_clt_t_user_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_search_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_validation_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_im_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_im_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_im_group_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_n_recommend_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_recommend_prj_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_join_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_weather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_task_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_task_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, pb_clt_t_user_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_upstream_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, f_prj_record_group_),
  };
  pb_clt_t_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_clt_t_user_descriptor_,
      pb_clt_t_user::default_instance_,
      pb_clt_t_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_clt_t_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_clt_t_user));
  pb_im_t_msg_attach_descriptor_ = file->message_type(9);
  static const int pb_im_t_msg_attach_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_uploadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_name_hl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, f_attach_id_),
  };
  pb_im_t_msg_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_attach_descriptor_,
      pb_im_t_msg_attach::default_instance_,
      pb_im_t_msg_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_attach));
  pb_im_t_msg_task_descriptor_ = file->message_type(10);
  static const int pb_im_t_msg_task_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_desc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_receiver_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_assign_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_operate_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_operate_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_attach_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_attach_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, f_last_report_),
  };
  pb_im_t_msg_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_task_descriptor_,
      pb_im_t_msg_task::default_instance_,
      pb_im_t_msg_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_task));
  pb_im_t_msg_weather_descriptor_ = file->message_type(11);
  static const int pb_im_t_msg_weather_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_weather, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_weather, f_prj_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_weather, f_weather_),
  };
  pb_im_t_msg_weather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_weather_descriptor_,
      pb_im_t_msg_weather::default_instance_,
      pb_im_t_msg_weather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_weather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_weather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_weather));
  pb_im_t_msg_book_descriptor_ = file->message_type(12);
  static const int pb_im_t_msg_book_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_cata_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_cata_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_subcata_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_subcata_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, f_book_info_),
  };
  pb_im_t_msg_book_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_book_descriptor_,
      pb_im_t_msg_book::default_instance_,
      pb_im_t_msg_book_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_book, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_book));
  pb_im_t_msg_card_descriptor_ = file->message_type(13);
  static const int pb_im_t_msg_card_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_atction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_frominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_finish_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, f_card_extrc_),
  };
  pb_im_t_msg_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_card_descriptor_,
      pb_im_t_msg_card::default_instance_,
      pb_im_t_msg_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_card));
  pb_im_t_msg_hotspot_descriptor_ = file->message_type(14);
  static const int pb_im_t_msg_hotspot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, f_hotspot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, f_hotspot_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, f_hotspot_first_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, f_hotspot_source_site_),
  };
  pb_im_t_msg_hotspot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_hotspot_descriptor_,
      pb_im_t_msg_hotspot::default_instance_,
      pb_im_t_msg_hotspot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_hotspot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_hotspot));
  pb_im_t_msg_prj_record_base_user_descriptor_ = file->message_type(15);
  static const int pb_im_t_msg_prj_record_base_user_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record_base_user, f_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record_base_user, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record_base_user, f_job_type_),
  };
  pb_im_t_msg_prj_record_base_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_prj_record_base_user_descriptor_,
      pb_im_t_msg_prj_record_base_user::default_instance_,
      pb_im_t_msg_prj_record_base_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record_base_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record_base_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_prj_record_base_user));
  pb_im_t_msg_prj_record_descriptor_ = file->message_type(16);
  static const int pb_im_t_msg_prj_record_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, receivers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, record_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, f_task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, f_prj_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, f_files_),
  };
  pb_im_t_msg_prj_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_prj_record_descriptor_,
      pb_im_t_msg_prj_record::default_instance_,
      pb_im_t_msg_prj_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_prj_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_prj_record));
  pb_im_t_msg_item_descriptor_ = file->message_type(17);
  static const int pb_im_t_msg_item_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_sender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_sender_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_sender_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_group_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_attch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_weather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_hotspot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, f_msg_prj_record_),
  };
  pb_im_t_msg_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_item_descriptor_,
      pb_im_t_msg_item::default_instance_,
      pb_im_t_msg_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg_item));
  pb_im_t_msg_descriptor_ = file->message_type(18);
  static const int pb_im_t_msg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg, f_msg_),
  };
  pb_im_t_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_im_t_msg_descriptor_,
      pb_im_t_msg::default_instance_,
      pb_im_t_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_im_t_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_im_t_msg));
  pb_prj_t_user_descriptor_ = file->message_type(19);
  static const int pb_prj_t_user_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_task_operate_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_join_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, f_dep_id_),
  };
  pb_prj_t_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_user_descriptor_,
      pb_prj_t_user::default_instance_,
      pb_prj_t_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_user));
  pb_prj_t_feed_descriptor_ = file->message_type(20);
  static const int pb_prj_t_feed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_feed, f_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_feed, f_msg_),
  };
  pb_prj_t_feed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_feed_descriptor_,
      pb_prj_t_feed::default_instance_,
      pb_prj_t_feed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_feed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_feed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_feed));
  pb_prj_t_milestore_descriptor_ = file->message_type(21);
  static const int pb_prj_t_milestore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_milestore, f_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_milestore, f_event_),
  };
  pb_prj_t_milestore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_milestore_descriptor_,
      pb_prj_t_milestore::default_instance_,
      pb_prj_t_milestore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_milestore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_milestore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_milestore));
  pb_prj_t_task_descriptor_ = file->message_type(22);
  static const int pb_prj_t_task_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_desc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, f_task_end_),
  };
  pb_prj_t_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_task_descriptor_,
      pb_prj_t_task::default_instance_,
      pb_prj_t_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_task));
  pb_prj_t_task_report_descriptor_ = file->message_type(23);
  static const int pb_prj_t_task_report_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_sponsor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_reply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_attach_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_report_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, f_report_type_),
  };
  pb_prj_t_task_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_task_report_descriptor_,
      pb_prj_t_task_report::default_instance_,
      pb_prj_t_task_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_task_report));
  pb_prj_t_task_view_descriptor_ = file->message_type(24);
  static const int pb_prj_t_task_view_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, f_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, f_time_),
  };
  pb_prj_t_task_view_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_task_view_descriptor_,
      pb_prj_t_task_view::default_instance_,
      pb_prj_t_task_view_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_view, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_task_view));
  pb_prj_t_task_details_descriptor_ = file->message_type(25);
  static const int pb_prj_t_task_details_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_report_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_report_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_view_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_view_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, f_position_list_),
  };
  pb_prj_t_task_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_task_details_descriptor_,
      pb_prj_t_task_details::default_instance_,
      pb_prj_t_task_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_task_details));
  pb_prj_t_task_list_descriptor_ = file->message_type(26);
  static const int pb_prj_t_task_list_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_last_update_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, f_count_),
  };
  pb_prj_t_task_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_task_list_descriptor_,
      pb_prj_t_task_list::default_instance_,
      pb_prj_t_task_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_task_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_task_list));
  pb_prj_t_weather_base_descriptor_ = file->message_type(27);
  static const int pb_prj_t_weather_base_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_current_tem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_weather_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_weather_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_reminder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_air_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_air_quality_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, f_city_),
  };
  pb_prj_t_weather_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_weather_base_descriptor_,
      pb_prj_t_weather_base::default_instance_,
      pb_prj_t_weather_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_weather_base));
  pb_prj_t_reminder_descriptor_ = file->message_type(28);
  static const int pb_prj_t_reminder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_reminder, f_reminder_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_reminder, f_reminder_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_reminder, f_reminder_infos_),
  };
  pb_prj_t_reminder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_reminder_descriptor_,
      pb_prj_t_reminder::default_instance_,
      pb_prj_t_reminder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_reminder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_reminder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_reminder));
  pb_prj_t_weather_details_descriptor_ = file->message_type(29);
  static const int pb_prj_t_weather_details_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_hight_tem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_low_tem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_current_tem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_weather_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_wind_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_wind_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_weather_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_reminders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_air_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, f_air_quality_date_),
  };
  pb_prj_t_weather_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_weather_details_descriptor_,
      pb_prj_t_weather_details::default_instance_,
      pb_prj_t_weather_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_weather_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_weather_details));
  pb_prj_t_prj_weather_descriptor_ = file->message_type(30);
  static const int pb_prj_t_prj_weather_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj_weather, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj_weather, f_weather_info_),
  };
  pb_prj_t_prj_weather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_prj_weather_descriptor_,
      pb_prj_t_prj_weather::default_instance_,
      pb_prj_t_prj_weather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj_weather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj_weather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_prj_weather));
  pb_prj_t_info_descriptor_ = file->message_type(31);
  static const int pb_prj_t_info_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_floor_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_jianzhu_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_shigong_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_jianli_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_fenbao_danwei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_other_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_sms_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_owner_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_owner_tasks_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_creater_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_weather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_prj_my_job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_owner_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, f_float_floor_area_),
  };
  pb_prj_t_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_info_descriptor_,
      pb_prj_t_info::default_instance_,
      pb_prj_t_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_info));
  pb_prj_t_log_descriptor_ = file->message_type(32);
  static const int pb_prj_t_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_log, f_log_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_log, f_add_time_),
  };
  pb_prj_t_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_log_descriptor_,
      pb_prj_t_log::default_instance_,
      pb_prj_t_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_log));
  pb_prj_t_prj_descriptor_ = file->message_type(33);
  static const int pb_prj_t_prj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj, f_prjs_),
  };
  pb_prj_t_prj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_prj_descriptor_,
      pb_prj_t_prj::default_instance_,
      pb_prj_t_prj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_prj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_prj));
  pb_prj_t_recommend_info_descriptor_ = file->message_type(34);
  static const int pb_prj_t_recommend_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, f_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, f_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, f_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, f_other_info_),
  };
  pb_prj_t_recommend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_recommend_info_descriptor_,
      pb_prj_t_recommend_info::default_instance_,
      pb_prj_t_recommend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_recommend_info));
  pb_prj_t_recommend_prj_descriptor_ = file->message_type(35);
  static const int pb_prj_t_recommend_prj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_prj, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_prj, f_prjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_prj, f_prjs_cnt_),
  };
  pb_prj_t_recommend_prj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_recommend_prj_descriptor_,
      pb_prj_t_recommend_prj::default_instance_,
      pb_prj_t_recommend_prj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_prj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_recommend_prj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_recommend_prj));
  pb_prj_t_base_file_descriptor_ = file->message_type(36);
  static const int pb_prj_t_base_file_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_cre_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_cre_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, f_fpid_),
  };
  pb_prj_t_base_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_base_file_descriptor_,
      pb_prj_t_base_file::default_instance_,
      pb_prj_t_base_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_base_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_base_file));
  pb_prj_t_file_descriptor_ = file->message_type(37);
  static const int pb_prj_t_file_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, f_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, f_files_cnt_),
  };
  pb_prj_t_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_file_descriptor_,
      pb_prj_t_file::default_instance_,
      pb_prj_t_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_file));
  pb_prj_t_department_descriptor_ = file->message_type(38);
  static const int pb_prj_t_department_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_department, f_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_department, f_name_),
  };
  pb_prj_t_department_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_department_descriptor_,
      pb_prj_t_department::default_instance_,
      pb_prj_t_department_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_department, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_department, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_department));
  pb_prj_t_details_descriptor_ = file->message_type(39);
  static const int pb_prj_t_details_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_im_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_task_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_task_unfinished_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_task_delay_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_prj_all_day_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_prj_remain_day_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_app_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_frd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_feeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_prj_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_milestore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, f_department_),
  };
  pb_prj_t_details_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_prj_t_details_descriptor_,
      pb_prj_t_details::default_instance_,
      pb_prj_t_details_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_prj_t_details, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_prj_t_details));
  pb_user_t_info_descriptor_ = file->message_type(40);
  static const int pb_user_t_info_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_company_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_years_of_working_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_job_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_influence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_name_pinyin_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_tea_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_go_on_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_code_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, f_avatar_version_),
  };
  pb_user_t_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_info_descriptor_,
      pb_user_t_info::default_instance_,
      pb_user_t_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_info));
  pb_user_t_extra_descriptor_ = file->message_type(41);
  static const int pb_user_t_extra_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_extra, f_auto_inc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_extra, f_last_req_time_),
  };
  pb_user_t_extra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_extra_descriptor_,
      pb_user_t_extra::default_instance_,
      pb_user_t_extra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_extra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_extra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_extra));
  pb_user_t_friend_descriptor_ = file->message_type(42);
  static const int pb_user_t_friend_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_initial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_name_pinyin_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_remark_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_remark_pinyin_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_company_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, f_validation_add_time_),
  };
  pb_user_t_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_friend_descriptor_,
      pb_user_t_friend::default_instance_,
      pb_user_t_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_friend));
  pb_user_t_recommend_friend_descriptor_ = file->message_type(43);
  static const int pb_user_t_recommend_friend_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_name_pinyin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_name_pinyin_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_company_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, f_other_info_),
  };
  pb_user_t_recommend_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_recommend_friend_descriptor_,
      pb_user_t_recommend_friend::default_instance_,
      pb_user_t_recommend_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_recommend_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_recommend_friend));
  pb_user_t_phone_address_descriptor_ = file->message_type(44);
  static const int pb_user_t_phone_address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_phone_address, f_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_phone_address, f_phone_),
  };
  pb_user_t_phone_address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_phone_address_descriptor_,
      pb_user_t_phone_address::default_instance_,
      pb_user_t_phone_address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_phone_address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_phone_address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_phone_address));
  pb_user_t_im_group_descriptor_ = file->message_type(45);
  static const int pb_user_t_im_group_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_im_group, f_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_im_group, f_group_flag_),
  };
  pb_user_t_im_group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_im_group_descriptor_,
      pb_user_t_im_group::default_instance_,
      pb_user_t_im_group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_im_group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_im_group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_im_group));
  pb_user_t_prj_descriptor_ = file->message_type(46);
  static const int pb_user_t_prj_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_prj, f_prj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_prj, f_group_id_),
  };
  pb_user_t_prj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_prj_descriptor_,
      pb_user_t_prj::default_instance_,
      pb_user_t_prj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_prj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_prj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_prj));
  pb_user_t_collection_descriptor_ = file->message_type(47);
  static const int pb_user_t_collection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, f_collection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, f_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, f_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, f_type_),
  };
  pb_user_t_collection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_collection_descriptor_,
      pb_user_t_collection::default_instance_,
      pb_user_t_collection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_collection));
  pb_user_t_collection_list_descriptor_ = file->message_type(48);
  static const int pb_user_t_collection_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection_list, f_update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection_list, f_collections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection_list, f_collections_cnt_),
  };
  pb_user_t_collection_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_collection_list_descriptor_,
      pb_user_t_collection_list::default_instance_,
      pb_user_t_collection_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_collection_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_collection_list));
  pb_user_t_data_descriptor_ = file->message_type(49);
  static const int pb_user_t_data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_friend_validation_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_friend_recommend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_im_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_other_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_prj_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_recommend_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, f_prjs_),
  };
  pb_user_t_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pb_user_t_data_descriptor_,
      pb_user_t_data::default_instance_,
      pb_user_t_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pb_user_t_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pb_user_t_data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fgsk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_friend_descriptor_, &pb_clt_t_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_recommend_friend_descriptor_, &pb_clt_t_recommend_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_group_user_descriptor_, &pb_clt_t_group_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_group_base_user_descriptor_, &pb_clt_t_group_base_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_group_item_descriptor_, &pb_clt_t_group_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_group_details_descriptor_, &pb_clt_t_group_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_group_descriptor_, &pb_clt_t_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_version_descriptor_, &pb_clt_t_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_clt_t_user_descriptor_, &pb_clt_t_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_attach_descriptor_, &pb_im_t_msg_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_task_descriptor_, &pb_im_t_msg_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_weather_descriptor_, &pb_im_t_msg_weather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_book_descriptor_, &pb_im_t_msg_book::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_card_descriptor_, &pb_im_t_msg_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_hotspot_descriptor_, &pb_im_t_msg_hotspot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_prj_record_base_user_descriptor_, &pb_im_t_msg_prj_record_base_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_prj_record_descriptor_, &pb_im_t_msg_prj_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_item_descriptor_, &pb_im_t_msg_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_im_t_msg_descriptor_, &pb_im_t_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_user_descriptor_, &pb_prj_t_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_feed_descriptor_, &pb_prj_t_feed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_milestore_descriptor_, &pb_prj_t_milestore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_task_descriptor_, &pb_prj_t_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_task_report_descriptor_, &pb_prj_t_task_report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_task_view_descriptor_, &pb_prj_t_task_view::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_task_details_descriptor_, &pb_prj_t_task_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_task_list_descriptor_, &pb_prj_t_task_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_weather_base_descriptor_, &pb_prj_t_weather_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_reminder_descriptor_, &pb_prj_t_reminder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_weather_details_descriptor_, &pb_prj_t_weather_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_prj_weather_descriptor_, &pb_prj_t_prj_weather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_info_descriptor_, &pb_prj_t_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_log_descriptor_, &pb_prj_t_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_prj_descriptor_, &pb_prj_t_prj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_recommend_info_descriptor_, &pb_prj_t_recommend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_recommend_prj_descriptor_, &pb_prj_t_recommend_prj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_base_file_descriptor_, &pb_prj_t_base_file::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_file_descriptor_, &pb_prj_t_file::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_department_descriptor_, &pb_prj_t_department::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_prj_t_details_descriptor_, &pb_prj_t_details::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_info_descriptor_, &pb_user_t_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_extra_descriptor_, &pb_user_t_extra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_friend_descriptor_, &pb_user_t_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_recommend_friend_descriptor_, &pb_user_t_recommend_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_phone_address_descriptor_, &pb_user_t_phone_address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_im_group_descriptor_, &pb_user_t_im_group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_prj_descriptor_, &pb_user_t_prj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_collection_descriptor_, &pb_user_t_collection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_collection_list_descriptor_, &pb_user_t_collection_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pb_user_t_data_descriptor_, &pb_user_t_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fgsk_2eproto() {
  delete pb_clt_t_friend::default_instance_;
  delete pb_clt_t_friend_reflection_;
  delete pb_clt_t_recommend_friend::default_instance_;
  delete pb_clt_t_recommend_friend_reflection_;
  delete pb_clt_t_group_user::default_instance_;
  delete pb_clt_t_group_user_reflection_;
  delete pb_clt_t_group_base_user::default_instance_;
  delete pb_clt_t_group_base_user_reflection_;
  delete pb_clt_t_group_item::default_instance_;
  delete pb_clt_t_group_item_reflection_;
  delete pb_clt_t_group_details::default_instance_;
  delete pb_clt_t_group_details_reflection_;
  delete pb_clt_t_group::default_instance_;
  delete pb_clt_t_group_reflection_;
  delete pb_clt_t_version::default_instance_;
  delete pb_clt_t_version_reflection_;
  delete pb_clt_t_user::default_instance_;
  delete pb_clt_t_user_reflection_;
  delete pb_im_t_msg_attach::default_instance_;
  delete pb_im_t_msg_attach_reflection_;
  delete pb_im_t_msg_task::default_instance_;
  delete pb_im_t_msg_task_reflection_;
  delete pb_im_t_msg_weather::default_instance_;
  delete pb_im_t_msg_weather_reflection_;
  delete pb_im_t_msg_book::default_instance_;
  delete pb_im_t_msg_book_reflection_;
  delete pb_im_t_msg_card::default_instance_;
  delete pb_im_t_msg_card_reflection_;
  delete pb_im_t_msg_hotspot::default_instance_;
  delete pb_im_t_msg_hotspot_reflection_;
  delete pb_im_t_msg_prj_record_base_user::default_instance_;
  delete pb_im_t_msg_prj_record_base_user_reflection_;
  delete pb_im_t_msg_prj_record::default_instance_;
  delete pb_im_t_msg_prj_record_reflection_;
  delete pb_im_t_msg_item::default_instance_;
  delete pb_im_t_msg_item_reflection_;
  delete pb_im_t_msg::default_instance_;
  delete pb_im_t_msg_reflection_;
  delete pb_prj_t_user::default_instance_;
  delete pb_prj_t_user_reflection_;
  delete pb_prj_t_feed::default_instance_;
  delete pb_prj_t_feed_reflection_;
  delete pb_prj_t_milestore::default_instance_;
  delete pb_prj_t_milestore_reflection_;
  delete pb_prj_t_task::default_instance_;
  delete pb_prj_t_task_reflection_;
  delete pb_prj_t_task_report::default_instance_;
  delete pb_prj_t_task_report_reflection_;
  delete pb_prj_t_task_view::default_instance_;
  delete pb_prj_t_task_view_reflection_;
  delete pb_prj_t_task_details::default_instance_;
  delete pb_prj_t_task_details_reflection_;
  delete pb_prj_t_task_list::default_instance_;
  delete pb_prj_t_task_list_reflection_;
  delete pb_prj_t_weather_base::default_instance_;
  delete pb_prj_t_weather_base_reflection_;
  delete pb_prj_t_reminder::default_instance_;
  delete pb_prj_t_reminder_reflection_;
  delete pb_prj_t_weather_details::default_instance_;
  delete pb_prj_t_weather_details_reflection_;
  delete pb_prj_t_prj_weather::default_instance_;
  delete pb_prj_t_prj_weather_reflection_;
  delete pb_prj_t_info::default_instance_;
  delete pb_prj_t_info_reflection_;
  delete pb_prj_t_log::default_instance_;
  delete pb_prj_t_log_reflection_;
  delete pb_prj_t_prj::default_instance_;
  delete pb_prj_t_prj_reflection_;
  delete pb_prj_t_recommend_info::default_instance_;
  delete pb_prj_t_recommend_info_reflection_;
  delete pb_prj_t_recommend_prj::default_instance_;
  delete pb_prj_t_recommend_prj_reflection_;
  delete pb_prj_t_base_file::default_instance_;
  delete pb_prj_t_base_file_reflection_;
  delete pb_prj_t_file::default_instance_;
  delete pb_prj_t_file_reflection_;
  delete pb_prj_t_department::default_instance_;
  delete pb_prj_t_department_reflection_;
  delete pb_prj_t_details::default_instance_;
  delete pb_prj_t_details_reflection_;
  delete pb_user_t_info::default_instance_;
  delete pb_user_t_info_reflection_;
  delete pb_user_t_extra::default_instance_;
  delete pb_user_t_extra_reflection_;
  delete pb_user_t_friend::default_instance_;
  delete pb_user_t_friend_reflection_;
  delete pb_user_t_recommend_friend::default_instance_;
  delete pb_user_t_recommend_friend_reflection_;
  delete pb_user_t_phone_address::default_instance_;
  delete pb_user_t_phone_address_reflection_;
  delete pb_user_t_im_group::default_instance_;
  delete pb_user_t_im_group_reflection_;
  delete pb_user_t_prj::default_instance_;
  delete pb_user_t_prj_reflection_;
  delete pb_user_t_collection::default_instance_;
  delete pb_user_t_collection_reflection_;
  delete pb_user_t_collection_list::default_instance_;
  delete pb_user_t_collection_list_reflection_;
  delete pb_user_t_data::default_instance_;
  delete pb_user_t_data_reflection_;
}

void protobuf_AddDesc_pb_5fgsk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pb_gsk.proto\"d\n\017pb_clt_t_friend\022\025\n\rf_u"
    "pdate_type\030\001 \001(\005\022$\n\tf_friends\030\002 \003(\0132\021.pb"
    "_user_t_friend\022\024\n\014f_friend_cnt\030\003 \001(\005\"\214\001\n"
    "\031pb_clt_t_recommend_friend\022\025\n\rf_update_t"
    "ype\030\001 \001(\005\0228\n\023f_recommend_friends\030\002 \003(\0132\033"
    ".pb_user_t_recommend_friend\022\036\n\026f_recomme"
    "nd_friend_cnt\030\003 \001(\005\"\254\001\n\023pb_clt_t_group_u"
    "ser\022\r\n\005f_uin\030\001 \001(\r\022\016\n\006f_name\030\002 \001(\t\022\020\n\010f_"
    "remark\030\003 \001(\t\022\017\n\007f_title\030\004 \001(\005\022\021\n\tf_initi"
    "al\030\005 \001(\t\022\020\n\010f_weight\030\006 \001(\005\022\025\n\rf_name_pin"
    "yin\030\007 \001(\t\022\027\n\017f_name_pinyin_j\030\010 \001(\t\"9\n\030pb"
    "_clt_t_group_base_user\022\r\n\005f_uin\030\001 \001(\r\022\016\n"
    "\006f_name\030\002 \001(\t\"\245\004\n\023pb_clt_t_group_item\022\022\n"
    "\nf_group_id\030\001 \001(\t\022\024\n\014f_group_name\030\002 \001(\t\022"
    "\024\n\014f_group_desc\030\003 \001(\t\022\024\n\014f_group_type\030\004 "
    "\001(\005\022\r\n\005f_seq\030\005 \001(\005\022\022\n\nf_last_msg\030\006 \001(\t\022\027"
    "\n\017f_last_msg_time\030\007 \001(\005\022\027\n\017f_last_msg_ty"
    "pe\030\010 \001(\005\022\030\n\020f_last_sender_id\030\t \001(\005\022\032\n\022f_"
    "last_sender_name\030\n \001(\t\022\020\n\010f_avatar\030\013 \003(\t"
    "\022\023\n\013f_is_screen\030\014 \001(\005\022\023\n\013f_is_remind\030\r \001"
    "(\005\022\020\n\010f_remark\030\016 \001(\t\022\021\n\tf_initial\030\017 \001(\t\022"
    "\020\n\010f_weight\030\020 \001(\005\022\025\n\rf_name_pinyin\030\021 \001(\t"
    "\022\027\n\017f_name_pinyin_j\030\022 \001(\t\022\026\n\016f_member_co"
    "unt\030\023 \001(\005\022\024\n\014f_init_seqid\030\024 \001(\005\022\024\n\014f_rea"
    "d_seqid\030\025 \001(\005\022\025\n\rf_creator_uid\030\026 \001(\005\022/\n\014"
    "f_base_users\030\027 \003(\0132\031.pb_clt_t_group_base"
    "_user\"m\n\026pb_clt_t_group_details\022*\n\014f_gro"
    "up_info\030\001 \001(\0132\024.pb_clt_t_group_item\022\'\n\tf"
    "_members\030\002 \003(\0132\024.pb_clt_t_group_user\"l\n\016"
    "pb_clt_t_group\022\025\n\rf_update_type\030\001 \001(\005\022\031\n"
    "\021f_last_update_gid\030\002 \001(\t\022(\n\nf_im_group\030\003"
    " \003(\0132\024.pb_clt_t_group_item\"h\n\020pb_clt_t_v"
    "ersion\022\024\n\014f_version_id\030\001 \001(\005\022\025\n\rf_versio"
    "n_msg\030\002 \001(\t\022\023\n\013f_chanel_id\030\003 \001(\005\022\022\n\nf_do"
    "wn_url\030\004 \001(\t\"\326\007\n\rpb_clt_t_user\022\037\n\006f_info"
    "\030\001 \001(\0132\017.pb_user_t_info\022\'\n\rf_friend_list"
    "\030\002 \001(\0132\020.pb_clt_t_friend\022.\n\024f_search_fri"
    "end_list\030\003 \001(\0132\020.pb_clt_t_friend\0222\n\030f_va"
    "lidation_friend_list\030\004 \001(\0132\020.pb_clt_t_fr"
    "iend\022#\n\nf_im_group\030\005 \001(\0132\017.pb_clt_t_grou"
    "p\022&\n\rf_friend_info\030\006 \001(\0132\017.pb_user_t_inf"
    "o\022\036\n\010f_im_msg\030\007 \001(\0132\014.pb_im_t_msg\0223\n\022f_i"
    "m_group_details\030\010 \001(\0132\027.pb_clt_t_group_d"
    "etails\022!\n\nf_prj_list\030\t \001(\0132\r.pb_prj_t_pr"
    "j\022(\n\rf_prj_details\030\n \001(\0132\021.pb_prj_t_deta"
    "ils\022=\n\031f_n_recommend_friend_list\030\013 \001(\0132\032"
    ".pb_clt_t_recommend_friend\0225\n\024f_recommen"
    "d_prj_list\030\014 \001(\0132\027.pb_prj_t_recommend_pr"
    "j\022\"\n\nf_prj_user\030\r \003(\0132\016.pb_prj_t_user\022\'\n"
    "\017f_prj_join_user\030\016 \003(\0132\016.pb_prj_t_user\022$"
    "\n\tf_version\030\017 \001(\0132\021.pb_clt_t_version\022,\n\r"
    "f_prj_weather\030\020 \001(\0132\025.pb_prj_t_prj_weath"
    "er\022.\n\016f_task_details\030\021 \001(\0132\026.pb_prj_t_ta"
    "sk_details\022(\n\013f_task_list\030\022 \001(\0132\023.pb_prj"
    "_t_task_list\022#\n\013f_prj_files\030\023 \001(\0132\016.pb_p"
    "rj_t_file\022\032\n\022pb_clt_t_user_code\030\024 \001(\005\0220\n"
    "\014f_collection\030\025 \001(\0132\032.pb_user_t_collecti"
    "on_list\022\027\n\017f_upstream_time\030\026 \001(\005\022+\n\022f_pr"
    "j_record_group\030\027 \001(\0132\017.pb_clt_t_group\"\326\001"
    "\n\022pb_im_t_msg_attach\022\025\n\rf_attach_name\030\001 "
    "\001(\t\022\025\n\rf_attach_type\030\002 \001(\005\022\024\n\014f_attach_u"
    "rl\030\003 \001(\t\022\025\n\rf_attach_size\030\004 \001(\005\022\031\n\021f_att"
    "ach_playtime\030\005 \001(\005\022\033\n\023f_attach_uploadtim"
    "e\030\006 \001(\005\022\030\n\020f_attach_name_hl\030\007 \001(\t\022\023\n\013f_a"
    "ttach_id\030\010 \001(\t\"\247\003\n\020pb_im_t_msg_task\022\021\n\tf"
    "_task_id\030\001 \001(\t\022\020\n\010f_prj_id\030\002 \001(\t\022\023\n\013f_ta"
    "sk_type\030\003 \001(\005\022\023\n\013f_task_desc\030\004 \001(\t\022\030\n\020f_"
    "task_desc_type\030\005 \001(\005\022\022\n\nf_position\030\006 \001(\t"
    "\022\026\n\016f_receiver_uin\030\007 \003(\005\022\026\n\016f_operate_ty"
    "pe\030\010 \001(\005\022\025\n\rf_assign_desc\030\t \001(\t\022\022\n\nf_tas"
    "k_end\030\n \001(\005\022\025\n\rf_task_status\030\013 \001(\005\022\030\n\020f_"
    "operate_status\030\014 \001(\005\022\025\n\rf_operate_uin\030\r "
    "\003(\005\022\031\n\021f_attach_playtime\030\016 \001(\005\022\026\n\016f_atta"
    "ch_count\030\017 \001(\005\022\022\n\nf_job_type\030\020 \001(\005\022,\n\rf_"
    "last_report\030\021 \001(\0132\025.pb_prj_t_task_report"
    "\"f\n\023pb_im_t_msg_weather\022\020\n\010f_prj_id\030\001 \001("
    "\t\022\022\n\nf_prj_name\030\002 \001(\t\022)\n\tf_weather\030\003 \001(\013"
    "2\026.pb_prj_t_weather_base\"\346\001\n\020pb_im_t_msg"
    "_book\022\023\n\013f_book_type\030\001 \001(\005\022\021\n\tf_book_id\030"
    "\002 \001(\t\022\023\n\013f_book_name\030\003 \001(\t\022\026\n\016f_book_cat"
    "a_id\030\004 \001(\t\022\030\n\020f_book_cata_info\030\005 \001(\t\022\031\n\021"
    "f_book_subcata_id\030\006 \001(\t\022\033\n\023f_book_subcat"
    "a_info\030\007 \001(\t\022\026\n\016f_book_info_id\030\010 \001(\t\022\023\n\013"
    "f_book_info\030\t \001(\t\"\315\001\n\020pb_im_t_msg_card\022\024"
    "\n\014f_card_title\030\001 \001(\t\022\022\n\nf_card_img\030\002 \001(\t"
    "\022\023\n\013f_card_desc\030\003 \001(\t\022\026\n\016f_card_atction\030"
    "\004 \001(\t\022\027\n\017f_card_frominfo\030\005 \001(\t\022\025\n\rf_card"
    "_finish\030\006 \001(\t\022\034\n\024f_card_finish_action\030\007 "
    "\001(\t\022\024\n\014f_card_extrc\030\010 \001(\t\"\202\001\n\023pb_im_t_ms"
    "g_hotspot\022\024\n\014f_hotspot_id\030\001 \001(\t\022\027\n\017f_hot"
    "spot_title\030\002 \001(\t\022\035\n\025f_hotspot_first_imag"
    "e\030\003 \001(\t\022\035\n\025f_hotspot_source_site\030\004 \001(\t\"U"
    "\n pb_im_t_msg_prj_record_base_user\022\r\n\005f_"
    "uid\030\001 \001(\005\022\016\n\006f_name\030\002 \001(\t\022\022\n\nf_job_type\030"
    "\003 \001(\t\"\232\002\n\026pb_im_t_msg_prj_record\022\020\n\010f_pr"
    "j_id\030\001 \001(\t\0221\n\006sender\030\002 \001(\0132!.pb_im_t_msg"
    "_prj_record_base_user\0224\n\treceivers\030\003 \003(\013"
    "2!.pb_im_t_msg_prj_record_base_user\022\023\n\013r"
    "ecord_type\030\004 \001(\005\022&\n\013f_task_info\030\005 \001(\0132\021."
    "pb_im_t_msg_task\022\"\n\nf_prj_info\030\006 \001(\0132\016.p"
    "b_prj_t_info\022$\n\007f_files\030\007 \003(\0132\023.pb_prj_t"
    "_base_file\"\323\004\n\020pb_im_t_msg_item\022\020\n\010f_msg"
    "_id\030\001 \001(\t\022\022\n\nf_msg_type\030\002 \001(\r\022\022\n\nf_msg_b"
    "ody\030\003 \001(\t\022\023\n\013f_sender_id\030\004 \001(\005\022\025\n\rf_send"
    "er_name\030\005 \001(\t\022\027\n\017f_sender_remark\030\006 \001(\t\022\027"
    "\n\017f_sender_avatar\030\007 \001(\t\022\022\n\nf_group_id\030\010 "
    "\001(\t\022\024\n\014f_group_type\030\t \001(\r\022\024\n\014f_group_nam"
    "e\030\n \001(\t\022\024\n\014f_group_desc\030\013 \001(\t\022\023\n\013f_send_"
    "time\030\014 \001(\005\022\024\n\014f_msg_seq_id\030\r \001(\005\022$\n\007f_at"
    "tch\030\016 \003(\0132\023.pb_im_t_msg_attach\022%\n\nf_msg_"
    "task\030\017 \001(\0132\021.pb_im_t_msg_task\022+\n\rf_msg_w"
    "eather\030\020 \001(\0132\024.pb_im_t_msg_weather\022%\n\nf_"
    "msg_book\030\021 \001(\0132\021.pb_im_t_msg_book\022%\n\nf_m"
    "sg_card\030\022 \001(\0132\021.pb_im_t_msg_card\022+\n\rf_ms"
    "g_hotspot\030\023 \001(\0132\024.pb_im_t_msg_hotspot\0221\n"
    "\020f_msg_prj_record\030\024 \001(\0132\027.pb_im_t_msg_pr"
    "j_record\"Z\n\013pb_im_t_msg\022\025\n\rf_update_type"
    "\030\001 \001(\005\022\022\n\nf_group_id\030\002 \001(\t\022 \n\005f_msg\030\003 \003("
    "\0132\021.pb_im_t_msg_item\"\307\001\n\rpb_prj_t_user\022\r"
    "\n\005f_uid\030\001 \001(\005\022\016\n\006f_name\030\002 \001(\t\022\017\n\007f_phone"
    "\030\003 \001(\t\022\022\n\nf_job_type\030\004 \001(\t\022\022\n\nf_add_time"
    "\030\005 \001(\005\022\035\n\025f_task_operate_status\030\006 \001(\005\022\026\n"
    "\016f_join_content\030\007 \001(\t\022\025\n\rf_name_pinyin\030\010"
    " \001(\t\022\020\n\010f_dep_id\030\t \001(\t\".\n\rpb_prj_t_feed\022"
    "\016\n\006f_time\030\001 \001(\005\022\r\n\005f_msg\030\002 \001(\t\"5\n\022pb_prj"
    "_t_milestore\022\016\n\006f_time\030\001 \001(\005\022\017\n\007f_event\030"
    "\002 \001(\t\"\323\002\n\rpb_prj_t_task\022\021\n\tf_task_id\030\001 \001"
    "(\t\022\020\n\010f_prj_id\030\002 \001(\t\022\023\n\013f_task_type\030\003 \001("
    "\005\022\023\n\013f_task_desc\030\004 \001(\t\022\030\n\020f_task_desc_ty"
    "pe\030\005 \001(\005\022\022\n\nf_playtime\030\006 \001(\005\022!\n\tf_sponso"
    "r\030\007 \001(\0132\016.pb_prj_t_user\022!\n\tf_members\030\010 \003"
    "(\0132\016.pb_prj_t_user\022\025\n\rf_task_status\030\t \001("
    "\005\022\022\n\nf_position\030\n \001(\t\022*\n\rf_attach_list\030\013"
    " \003(\0132\023.pb_prj_t_base_file\022\024\n\014f_task_begi"
    "n\030\014 \001(\005\022\022\n\nf_task_end\030\r \001(\005\"\234\002\n\024pb_prj_t"
    "_task_report\022\023\n\013f_report_id\030\001 \001(\t\022!\n\tf_s"
    "ponsor\030\002 \001(\0132\016.pb_prj_t_user\022\"\n\nf_reply_"
    "to\030\003 \001(\0132\016.pb_prj_t_user\022\017\n\007f_title\030\004 \001("
    "\t\022\021\n\tf_content\030\005 \001(\t\022\026\n\016f_content_type\030\006"
    " \001(\005\022\022\n\nf_playtime\030\007 \001(\005\022*\n\rf_attach_lis"
    "t\030\010 \003(\0132\023.pb_prj_t_base_file\022\025\n\rf_report"
    "_time\030\t \001(\005\022\025\n\rf_report_type\030\n \001(\005\"U\n\022pb"
    "_prj_t_task_view\022\r\n\005f_uin\030\001 \001(\005\022\016\n\006f_nam"
    "e\030\002 \001(\t\022\020\n\010f_avatar\030\003 \001(\t\022\016\n\006f_time\030\004 \001("
    "\005\"\326\001\n\025pb_prj_t_task_details\022\036\n\006f_task\030\001 "
    "\001(\0132\016.pb_prj_t_task\022,\n\rf_report_list\030\002 \003"
    "(\0132\025.pb_prj_t_task_report\022\026\n\016f_report_co"
    "unt\030\003 \001(\005\022(\n\013f_view_list\030\004 \003(\0132\023.pb_prj_"
    "t_task_view\022\024\n\014f_view_count\030\005 \001(\005\022\027\n\017f_p"
    "osition_list\030\006 \003(\t\"\237\001\n\022pb_prj_t_task_lis"
    "t\022\020\n\010f_prj_id\030\001 \001(\t\022\025\n\rf_update_type\030\002 \001"
    "(\005\022\023\n\013f_list_type\030\003 \001(\005\022\031\n\021f_last_update"
    "_tid\030\004 \001(\t\022\037\n\007f_tasks\030\005 \003(\0132\016.pb_prj_t_t"
    "ask\022\017\n\007f_count\030\006 \001(\005\"\331\001\n\025pb_prj_t_weathe"
    "r_base\022\025\n\rf_current_tem\030\001 \001(\t\022\026\n\016f_weath"
    "er_info\030\002 \001(\t\022\016\n\006f_date\030\003 \001(\t\022\026\n\016f_weath"
    "er_type\030\004 \001(\005\022\022\n\nf_reminder\030\005 \001(\t\022\025\n\rf_a"
    "ir_quality\030\006 \001(\t\022\032\n\022f_air_quality_date\030\007"
    " \001(\005\022\022\n\nf_province\030\010 \001(\t\022\016\n\006f_city\030\t \001(\t"
    "\"`\n\021pb_prj_t_reminder\022\027\n\017f_reminder_type"
    "\030\001 \001(\005\022\030\n\020f_reminder_title\030\002 \001(\t\022\030\n\020f_re"
    "minder_infos\030\003 \003(\t\"\274\002\n\030pb_prj_t_weather_"
    "details\022\023\n\013f_hight_tem\030\001 \001(\t\022\021\n\tf_low_te"
    "m\030\002 \001(\t\022\025\n\rf_current_tem\030\003 \001(\t\022\026\n\016f_weat"
    "her_info\030\004 \001(\t\022\030\n\020f_wind_direction\030\005 \001(\t"
    "\022\024\n\014f_wind_power\030\006 \001(\t\022\016\n\006f_date\030\007 \001(\t\022\025"
    "\n\rf_modify_time\030\010 \001(\t\022\026\n\016f_weather_type\030"
    "\t \001(\005\022\'\n\013f_reminders\030\n \003(\0132\022.pb_prj_t_re"
    "minder\022\025\n\rf_air_quality\030\013 \001(\t\022\032\n\022f_air_q"
    "uality_date\030\014 \001(\005\"[\n\024pb_prj_t_prj_weathe"
    "r\022\020\n\010f_prj_id\030\001 \001(\t\0221\n\016f_weather_info\030\002 "
    "\003(\0132\031.pb_prj_t_weather_details\"\250\005\n\rpb_pr"
    "j_t_info\022\020\n\010f_prj_id\030\001 \001(\t\022\022\n\nf_prj_name"
    "\030\002 \001(\t\022\022\n\nf_prj_type\030\003 \001(\005\022\023\n\013f_prj_imag"
    "e\030\004 \001(\t\022\022\n\nf_group_id\030\005 \001(\t\022\022\n\nf_provinc"
    "e\030\006 \001(\t\022\016\n\006f_city\030\007 \001(\t\022\025\n\rf_prj_address"
    "\030\010 \001(\t\022\026\n\016f_member_count\030\t \001(\005\022\024\n\014f_floo"
    "r_area\030\n \001(\005\022\023\n\013f_prj_begin\030\013 \001(\005\022\021\n\tf_p"
    "rj_end\030\014 \001(\005\022\030\n\020f_jianzhu_danwei\030\r \001(\t\022\030"
    "\n\020f_shigong_danwei\030\016 \001(\t\022\027\n\017f_jianli_dan"
    "wei\030\017 \001(\t\022\027\n\017f_fenbao_danwei\030\020 \001(\t\022\r\n\005f_"
    "lat\030\021 \001(\001\022\r\n\005f_lon\030\022 \001(\001\022\022\n\nf_job_type\030\023"
    " \001(\t\022\024\n\014f_other_info\030\024 \001(\t\022\021\n\tf_sms_msg\030"
    "\025 \001(\t\022%\n\rf_owner_tasks\030\026 \003(\0132\016.pb_prj_t_"
    "task\022\031\n\021f_owner_tasks_cnt\030\027 \001(\005\022\022\n\nf_add"
    "_time\030\030 \001(\005\022\025\n\rf_creater_uin\030\031 \001(\005\022)\n\tf_"
    "weather\030\032 \001(\0132\026.pb_prj_t_weather_base\022\024\n"
    "\014f_prj_my_job\030\033 \001(\t\022\030\n\020f_owner_add_time\030"
    "\034 \001(\005\022\032\n\022f_float_floor_area\030\035 \001(\002\"9\n\014pb_"
    "prj_t_log\022\025\n\rf_log_content\030\001 \001(\t\022\022\n\nf_ad"
    "d_time\030\002 \001(\005\"E\n\014pb_prj_t_prj\022\025\n\rf_update"
    "_type\030\001 \001(\005\022\036\n\006f_prjs\030\002 \003(\0132\016.pb_prj_t_i"
    "nfo\"q\n\027pb_prj_t_recommend_info\022\036\n\006f_info"
    "\030\001 \001(\0132\016.pb_prj_t_info\022\016\n\006f_type\030\002 \001(\r\022\020"
    "\n\010f_weight\030\003 \001(\005\022\024\n\014f_other_info\030\004 \001(\t\"m"
    "\n\026pb_prj_t_recommend_prj\022\025\n\rf_update_typ"
    "e\030\001 \001(\005\022(\n\006f_prjs\030\002 \003(\0132\030.pb_prj_t_recom"
    "mend_info\022\022\n\nf_prjs_cnt\030\003 \001(\005\"\246\001\n\022pb_prj"
    "_t_base_file\022\'\n\nf_baseinfo\030\001 \001(\0132\023.pb_im"
    "_t_msg_attach\022\021\n\tf_cre_uin\030\002 \001(\005\022\022\n\nf_cr"
    "e_name\030\003 \001(\t\022\022\n\nf_job_type\030\004 \001(\t\022\r\n\005f_ta"
    "g\030\005 \001(\t\022\r\n\005f_fid\030\006 \001(\t\022\016\n\006f_fpid\030\007 \001(\t\"s"
    "\n\rpb_prj_t_file\022\025\n\rf_update_type\030\001 \001(\005\022\020"
    "\n\010f_prj_id\030\002 \001(\t\022$\n\007f_files\030\003 \003(\0132\023.pb_p"
    "rj_t_base_file\022\023\n\013f_files_cnt\030\004 \001(\005\"3\n\023p"
    "b_prj_t_department\022\014\n\004f_id\030\001 \001(\t\022\016\n\006f_na"
    "me\030\002 \001(\t\"\355\003\n\020pb_prj_t_details\022\036\n\006f_info\030"
    "\001 \001(\0132\016.pb_prj_t_info\022#\n\nf_im_group\030\002 \001("
    "\0132\017.pb_clt_t_group\022\032\n\022f_task_total_count"
    "\030\003 \001(\005\022\037\n\027f_task_unfinished_count\030\004 \001(\005\022"
    "\032\n\022f_task_delay_count\030\005 \001(\005\022\033\n\023f_prj_all"
    "_day_count\030\006 \001(\005\022\036\n\026f_prj_remain_day_cou"
    "nt\030\007 \001(\005\022\037\n\007f_users\030\010 \003(\0132\016.pb_prj_t_use"
    "r\022#\n\013f_app_users\030\t \003(\0132\016.pb_prj_t_user\022\037"
    "\n\005f_frd\030\n \001(\0132\020.pb_clt_t_friend\022\037\n\007f_fee"
    "ds\030\013 \003(\0132\016.pb_prj_t_feed\022 \n\tf_prj_log\030\014 "
    "\003(\0132\r.pb_prj_t_log\022(\n\013f_milestore\030\r \003(\0132"
    "\023.pb_prj_t_milestore\022*\n\014f_department\030\016 \003"
    "(\0132\024.pb_prj_t_department\"\243\003\n\016pb_user_t_i"
    "nfo\022\r\n\005f_uin\030\001 \001(\r\022\022\n\nf_province\030\002 \001(\t\022\016"
    "\n\006f_city\030\003 \001(\t\022\017\n\007f_phone\030\004 \001(\t\022\016\n\006f_nam"
    "e\030\005 \001(\t\022\026\n\016f_company_type\030\006 \001(\t\022\021\n\tf_com"
    "pany\030\007 \001(\t\022\032\n\022f_years_of_working\030\010 \001(\t\022\022"
    "\n\nf_job_type\030\t \001(\t\022\023\n\013f_job_title\030\n \001(\t\022"
    "\023\n\013f_influence\030\013 \001(\005\022\021\n\tf_setting\030\014 \001(\005\022"
    "\025\n\rf_name_pinyin\030\r \001(\t\022\027\n\017f_name_pinyin_"
    "j\030\016 \001(\t\022\016\n\006f_type\030\017 \001(\005\022\021\n\tf_tea_key\030\020 \001"
    "(\t\022\023\n\013f_go_on_day\030\021 \001(\005\022\020\n\010f_degree\030\022 \001("
    "\005\022\021\n\tf_code_id\030\023 \001(\t\022\030\n\020f_avatar_version"
    "\030\024 \001(\005\"A\n\017pb_user_t_extra\022\025\n\rf_auto_inc_"
    "id\030\001 \001(\005\022\027\n\017f_last_req_time\030\002 \001(\005\"\223\003\n\020pb"
    "_user_t_friend\022\r\n\005f_uin\030\001 \001(\r\022\016\n\006f_name\030"
    "\002 \001(\t\022\020\n\010f_remark\030\003 \001(\t\022\017\n\007f_phone\030\004 \001(\t"
    "\022\r\n\005f_msg\030\005 \001(\t\022\016\n\006f_flag\030\006 \001(\005\022\022\n\nf_gro"
    "up_id\030\007 \001(\t\022\021\n\tf_initial\030\010 \001(\t\022\020\n\010f_weig"
    "ht\030\t \001(\005\022\025\n\rf_name_pinyin\030\n \001(\t\022\027\n\017f_nam"
    "e_pinyin_j\030\013 \001(\t\022\027\n\017f_remark_pinyin\030\014 \001("
    "\t\022\031\n\021f_remark_pinyin_j\030\r \001(\t\022\022\n\nf_add_ti"
    "me\030\016 \001(\005\022\022\n\nf_province\030\017 \001(\t\022\016\n\006f_city\030\020"
    " \001(\t\022\026\n\016f_company_type\030\021 \001(\t\022\022\n\nf_job_ty"
    "pe\030\022 \001(\t\022\035\n\025f_validation_add_time\030\023 \001(\005\""
    "\316\001\n\032pb_user_t_recommend_friend\022\r\n\005f_uin\030"
    "\001 \001(\r\022\016\n\006f_name\030\002 \001(\t\022\016\n\006f_type\030\003 \001(\r\022\020\n"
    "\010f_weight\030\004 \001(\005\022\025\n\rf_name_pinyin\030\005 \001(\t\022\027"
    "\n\017f_name_pinyin_j\030\006 \001(\t\022\026\n\016f_company_typ"
    "e\030\007 \001(\t\022\021\n\tf_company\030\010 \001(\t\022\024\n\014f_other_in"
    "fo\030\t \001(\t\":\n\027pb_user_t_phone_address\022\016\n\006f"
    "_name\030\001 \001(\t\022\017\n\007f_phone\030\002 \001(\t\">\n\022pb_user_"
    "t_im_group\022\022\n\nf_group_id\030\001 \001(\t\022\024\n\014f_grou"
    "p_flag\030\002 \001(\005\"5\n\rpb_user_t_prj\022\020\n\010f_prj_i"
    "d\030\001 \001(\t\022\022\n\nf_group_id\030\002 \001(\t\"q\n\024pb_user_t"
    "_collection\022\027\n\017f_collection_id\030\001 \001(\t\022 \n\005"
    "f_msg\030\002 \001(\0132\021.pb_im_t_msg_item\022\016\n\006f_time"
    "\030\003 \001(\005\022\016\n\006f_type\030\004 \001(\005\"{\n\031pb_user_t_coll"
    "ection_list\022\025\n\rf_update_type\030\001 \001(\005\022,\n\rf_"
    "collections\030\002 \003(\0132\025.pb_user_t_collection"
    "\022\031\n\021f_collections_cnt\030\003 \001(\005\"\277\003\n\016pb_user_"
    "t_data\022\037\n\006f_info\030\001 \001(\0132\017.pb_user_t_info\022"
    "!\n\007f_extra\030\002 \001(\0132\020.pb_user_t_extra\022(\n\rf_"
    "friend_list\030\003 \003(\0132\021.pb_user_t_friend\0223\n\030"
    "f_friend_validation_list\030\004 \003(\0132\021.pb_user"
    "_t_friend\0222\n\027f_friend_recommend_list\030\005 \003"
    "(\0132\021.pb_user_t_friend\022\'\n\nf_im_group\030\006 \003("
    "\0132\023.pb_user_t_im_group\022%\n\014f_other_info\030\007"
    " \001(\0132\017.pb_user_t_info\022\"\n\nf_prj_list\030\010 \003("
    "\0132\016.pb_user_t_prj\0228\n\023f_recommend_friends"
    "\030\t \003(\0132\033.pb_user_t_recommend_friend\022(\n\006f"
    "_prjs\030\n \003(\0132\030.pb_prj_t_recommend_info", 10717);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_gsk.proto", &protobuf_RegisterTypes);
  pb_clt_t_friend::default_instance_ = new pb_clt_t_friend();
  pb_clt_t_recommend_friend::default_instance_ = new pb_clt_t_recommend_friend();
  pb_clt_t_group_user::default_instance_ = new pb_clt_t_group_user();
  pb_clt_t_group_base_user::default_instance_ = new pb_clt_t_group_base_user();
  pb_clt_t_group_item::default_instance_ = new pb_clt_t_group_item();
  pb_clt_t_group_details::default_instance_ = new pb_clt_t_group_details();
  pb_clt_t_group::default_instance_ = new pb_clt_t_group();
  pb_clt_t_version::default_instance_ = new pb_clt_t_version();
  pb_clt_t_user::default_instance_ = new pb_clt_t_user();
  pb_im_t_msg_attach::default_instance_ = new pb_im_t_msg_attach();
  pb_im_t_msg_task::default_instance_ = new pb_im_t_msg_task();
  pb_im_t_msg_weather::default_instance_ = new pb_im_t_msg_weather();
  pb_im_t_msg_book::default_instance_ = new pb_im_t_msg_book();
  pb_im_t_msg_card::default_instance_ = new pb_im_t_msg_card();
  pb_im_t_msg_hotspot::default_instance_ = new pb_im_t_msg_hotspot();
  pb_im_t_msg_prj_record_base_user::default_instance_ = new pb_im_t_msg_prj_record_base_user();
  pb_im_t_msg_prj_record::default_instance_ = new pb_im_t_msg_prj_record();
  pb_im_t_msg_item::default_instance_ = new pb_im_t_msg_item();
  pb_im_t_msg::default_instance_ = new pb_im_t_msg();
  pb_prj_t_user::default_instance_ = new pb_prj_t_user();
  pb_prj_t_feed::default_instance_ = new pb_prj_t_feed();
  pb_prj_t_milestore::default_instance_ = new pb_prj_t_milestore();
  pb_prj_t_task::default_instance_ = new pb_prj_t_task();
  pb_prj_t_task_report::default_instance_ = new pb_prj_t_task_report();
  pb_prj_t_task_view::default_instance_ = new pb_prj_t_task_view();
  pb_prj_t_task_details::default_instance_ = new pb_prj_t_task_details();
  pb_prj_t_task_list::default_instance_ = new pb_prj_t_task_list();
  pb_prj_t_weather_base::default_instance_ = new pb_prj_t_weather_base();
  pb_prj_t_reminder::default_instance_ = new pb_prj_t_reminder();
  pb_prj_t_weather_details::default_instance_ = new pb_prj_t_weather_details();
  pb_prj_t_prj_weather::default_instance_ = new pb_prj_t_prj_weather();
  pb_prj_t_info::default_instance_ = new pb_prj_t_info();
  pb_prj_t_log::default_instance_ = new pb_prj_t_log();
  pb_prj_t_prj::default_instance_ = new pb_prj_t_prj();
  pb_prj_t_recommend_info::default_instance_ = new pb_prj_t_recommend_info();
  pb_prj_t_recommend_prj::default_instance_ = new pb_prj_t_recommend_prj();
  pb_prj_t_base_file::default_instance_ = new pb_prj_t_base_file();
  pb_prj_t_file::default_instance_ = new pb_prj_t_file();
  pb_prj_t_department::default_instance_ = new pb_prj_t_department();
  pb_prj_t_details::default_instance_ = new pb_prj_t_details();
  pb_user_t_info::default_instance_ = new pb_user_t_info();
  pb_user_t_extra::default_instance_ = new pb_user_t_extra();
  pb_user_t_friend::default_instance_ = new pb_user_t_friend();
  pb_user_t_recommend_friend::default_instance_ = new pb_user_t_recommend_friend();
  pb_user_t_phone_address::default_instance_ = new pb_user_t_phone_address();
  pb_user_t_im_group::default_instance_ = new pb_user_t_im_group();
  pb_user_t_prj::default_instance_ = new pb_user_t_prj();
  pb_user_t_collection::default_instance_ = new pb_user_t_collection();
  pb_user_t_collection_list::default_instance_ = new pb_user_t_collection_list();
  pb_user_t_data::default_instance_ = new pb_user_t_data();
  pb_clt_t_friend::default_instance_->InitAsDefaultInstance();
  pb_clt_t_recommend_friend::default_instance_->InitAsDefaultInstance();
  pb_clt_t_group_user::default_instance_->InitAsDefaultInstance();
  pb_clt_t_group_base_user::default_instance_->InitAsDefaultInstance();
  pb_clt_t_group_item::default_instance_->InitAsDefaultInstance();
  pb_clt_t_group_details::default_instance_->InitAsDefaultInstance();
  pb_clt_t_group::default_instance_->InitAsDefaultInstance();
  pb_clt_t_version::default_instance_->InitAsDefaultInstance();
  pb_clt_t_user::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_attach::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_task::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_weather::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_book::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_card::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_hotspot::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_prj_record_base_user::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_prj_record::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg_item::default_instance_->InitAsDefaultInstance();
  pb_im_t_msg::default_instance_->InitAsDefaultInstance();
  pb_prj_t_user::default_instance_->InitAsDefaultInstance();
  pb_prj_t_feed::default_instance_->InitAsDefaultInstance();
  pb_prj_t_milestore::default_instance_->InitAsDefaultInstance();
  pb_prj_t_task::default_instance_->InitAsDefaultInstance();
  pb_prj_t_task_report::default_instance_->InitAsDefaultInstance();
  pb_prj_t_task_view::default_instance_->InitAsDefaultInstance();
  pb_prj_t_task_details::default_instance_->InitAsDefaultInstance();
  pb_prj_t_task_list::default_instance_->InitAsDefaultInstance();
  pb_prj_t_weather_base::default_instance_->InitAsDefaultInstance();
  pb_prj_t_reminder::default_instance_->InitAsDefaultInstance();
  pb_prj_t_weather_details::default_instance_->InitAsDefaultInstance();
  pb_prj_t_prj_weather::default_instance_->InitAsDefaultInstance();
  pb_prj_t_info::default_instance_->InitAsDefaultInstance();
  pb_prj_t_log::default_instance_->InitAsDefaultInstance();
  pb_prj_t_prj::default_instance_->InitAsDefaultInstance();
  pb_prj_t_recommend_info::default_instance_->InitAsDefaultInstance();
  pb_prj_t_recommend_prj::default_instance_->InitAsDefaultInstance();
  pb_prj_t_base_file::default_instance_->InitAsDefaultInstance();
  pb_prj_t_file::default_instance_->InitAsDefaultInstance();
  pb_prj_t_department::default_instance_->InitAsDefaultInstance();
  pb_prj_t_details::default_instance_->InitAsDefaultInstance();
  pb_user_t_info::default_instance_->InitAsDefaultInstance();
  pb_user_t_extra::default_instance_->InitAsDefaultInstance();
  pb_user_t_friend::default_instance_->InitAsDefaultInstance();
  pb_user_t_recommend_friend::default_instance_->InitAsDefaultInstance();
  pb_user_t_phone_address::default_instance_->InitAsDefaultInstance();
  pb_user_t_im_group::default_instance_->InitAsDefaultInstance();
  pb_user_t_prj::default_instance_->InitAsDefaultInstance();
  pb_user_t_collection::default_instance_->InitAsDefaultInstance();
  pb_user_t_collection_list::default_instance_->InitAsDefaultInstance();
  pb_user_t_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fgsk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fgsk_2eproto {
  StaticDescriptorInitializer_pb_5fgsk_2eproto() {
    protobuf_AddDesc_pb_5fgsk_2eproto();
  }
} static_descriptor_initializer_pb_5fgsk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_friend::kFUpdateTypeFieldNumber;
const int pb_clt_t_friend::kFFriendsFieldNumber;
const int pb_clt_t_friend::kFFriendCntFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_friend::pb_clt_t_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_friend)
}

void pb_clt_t_friend::InitAsDefaultInstance() {
}

pb_clt_t_friend::pb_clt_t_friend(const pb_clt_t_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_friend)
}

void pb_clt_t_friend::SharedCtor() {
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_friend_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_friend::~pb_clt_t_friend() {
  // @@protoc_insertion_point(destructor:pb_clt_t_friend)
  SharedDtor();
}

void pb_clt_t_friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_clt_t_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_friend_descriptor_;
}

const pb_clt_t_friend& pb_clt_t_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_friend* pb_clt_t_friend::default_instance_ = NULL;

pb_clt_t_friend* pb_clt_t_friend::New() const {
  return new pb_clt_t_friend;
}

void pb_clt_t_friend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_friend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(f_update_type_, f_friend_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_friends;
        break;
      }

      // repeated .pb_user_t_friend f_friends = 2;
      case 2: {
        if (tag == 18) {
         parse_f_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_friends;
        if (input->ExpectTag(24)) goto parse_f_friend_cnt;
        break;
      }

      // optional int32 f_friend_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_f_friend_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_friend_cnt_)));
          set_has_f_friend_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_friend)
  return false;
#undef DO_
}

void pb_clt_t_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_friend)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // repeated .pb_user_t_friend f_friends = 2;
  for (int i = 0; i < this->f_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_friends(i), output);
  }

  // optional int32 f_friend_cnt = 3;
  if (has_f_friend_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_friend_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_friend)
}

::google::protobuf::uint8* pb_clt_t_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_friend)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // repeated .pb_user_t_friend f_friends = 2;
  for (int i = 0; i < this->f_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_friends(i), target);
  }

  // optional int32 f_friend_cnt = 3;
  if (has_f_friend_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_friend_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_friend)
  return target;
}

int pb_clt_t_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional int32 f_friend_cnt = 3;
    if (has_f_friend_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_friend_cnt());
    }

  }
  // repeated .pb_user_t_friend f_friends = 2;
  total_size += 1 * this->f_friends_size();
  for (int i = 0; i < this->f_friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_friend::MergeFrom(const pb_clt_t_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_friends_.MergeFrom(from.f_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_friend_cnt()) {
      set_f_friend_cnt(from.f_friend_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_friend::CopyFrom(const pb_clt_t_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_friend::IsInitialized() const {

  return true;
}

void pb_clt_t_friend::Swap(pb_clt_t_friend* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    f_friends_.Swap(&other->f_friends_);
    std::swap(f_friend_cnt_, other->f_friend_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_friend_descriptor_;
  metadata.reflection = pb_clt_t_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_recommend_friend::kFUpdateTypeFieldNumber;
const int pb_clt_t_recommend_friend::kFRecommendFriendsFieldNumber;
const int pb_clt_t_recommend_friend::kFRecommendFriendCntFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_recommend_friend::pb_clt_t_recommend_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_recommend_friend)
}

void pb_clt_t_recommend_friend::InitAsDefaultInstance() {
}

pb_clt_t_recommend_friend::pb_clt_t_recommend_friend(const pb_clt_t_recommend_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_recommend_friend)
}

void pb_clt_t_recommend_friend::SharedCtor() {
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_recommend_friend_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_recommend_friend::~pb_clt_t_recommend_friend() {
  // @@protoc_insertion_point(destructor:pb_clt_t_recommend_friend)
  SharedDtor();
}

void pb_clt_t_recommend_friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_clt_t_recommend_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_recommend_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_recommend_friend_descriptor_;
}

const pb_clt_t_recommend_friend& pb_clt_t_recommend_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_recommend_friend* pb_clt_t_recommend_friend::default_instance_ = NULL;

pb_clt_t_recommend_friend* pb_clt_t_recommend_friend::New() const {
  return new pb_clt_t_recommend_friend;
}

void pb_clt_t_recommend_friend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_recommend_friend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(f_update_type_, f_recommend_friend_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_recommend_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_recommend_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_recommend_friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_recommend_friends;
        break;
      }

      // repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
      case 2: {
        if (tag == 18) {
         parse_f_recommend_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_recommend_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_recommend_friends;
        if (input->ExpectTag(24)) goto parse_f_recommend_friend_cnt;
        break;
      }

      // optional int32 f_recommend_friend_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_f_recommend_friend_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_recommend_friend_cnt_)));
          set_has_f_recommend_friend_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_recommend_friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_recommend_friend)
  return false;
#undef DO_
}

void pb_clt_t_recommend_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_recommend_friend)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_recommend_friends(i), output);
  }

  // optional int32 f_recommend_friend_cnt = 3;
  if (has_f_recommend_friend_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_recommend_friend_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_recommend_friend)
}

::google::protobuf::uint8* pb_clt_t_recommend_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_recommend_friend)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_recommend_friends(i), target);
  }

  // optional int32 f_recommend_friend_cnt = 3;
  if (has_f_recommend_friend_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_recommend_friend_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_recommend_friend)
  return target;
}

int pb_clt_t_recommend_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional int32 f_recommend_friend_cnt = 3;
    if (has_f_recommend_friend_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_recommend_friend_cnt());
    }

  }
  // repeated .pb_user_t_recommend_friend f_recommend_friends = 2;
  total_size += 1 * this->f_recommend_friends_size();
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_recommend_friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_recommend_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_recommend_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_recommend_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_recommend_friend::MergeFrom(const pb_clt_t_recommend_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_recommend_friends_.MergeFrom(from.f_recommend_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_recommend_friend_cnt()) {
      set_f_recommend_friend_cnt(from.f_recommend_friend_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_recommend_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_recommend_friend::CopyFrom(const pb_clt_t_recommend_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_recommend_friend::IsInitialized() const {

  return true;
}

void pb_clt_t_recommend_friend::Swap(pb_clt_t_recommend_friend* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    f_recommend_friends_.Swap(&other->f_recommend_friends_);
    std::swap(f_recommend_friend_cnt_, other->f_recommend_friend_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_recommend_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_recommend_friend_descriptor_;
  metadata.reflection = pb_clt_t_recommend_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_group_user::kFUinFieldNumber;
const int pb_clt_t_group_user::kFNameFieldNumber;
const int pb_clt_t_group_user::kFRemarkFieldNumber;
const int pb_clt_t_group_user::kFTitleFieldNumber;
const int pb_clt_t_group_user::kFInitialFieldNumber;
const int pb_clt_t_group_user::kFWeightFieldNumber;
const int pb_clt_t_group_user::kFNamePinyinFieldNumber;
const int pb_clt_t_group_user::kFNamePinyinJFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_group_user::pb_clt_t_group_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_group_user)
}

void pb_clt_t_group_user::InitAsDefaultInstance() {
}

pb_clt_t_group_user::pb_clt_t_group_user(const pb_clt_t_group_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_group_user)
}

void pb_clt_t_group_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_title_ = 0;
  f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weight_ = 0;
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_group_user::~pb_clt_t_group_user() {
  // @@protoc_insertion_point(destructor:pb_clt_t_group_user)
  SharedDtor();
}

void pb_clt_t_group_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (this != default_instance_) {
  }
}

void pb_clt_t_group_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_group_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_group_user_descriptor_;
}

const pb_clt_t_group_user& pb_clt_t_group_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_group_user* pb_clt_t_group_user::default_instance_ = NULL;

pb_clt_t_group_user* pb_clt_t_group_user::New() const {
  return new pb_clt_t_group_user;
}

void pb_clt_t_group_user::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_group_user*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_uin_, f_title_);
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_remark()) {
      if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_remark_->clear();
      }
    }
    if (has_f_initial()) {
      if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_initial_->clear();
      }
    }
    f_weight_ = 0;
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
    if (has_f_name_pinyin_j()) {
      if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_j_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_group_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_group_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_remark;
        break;
      }

      // optional string f_remark = 3;
      case 3: {
        if (tag == 26) {
         parse_f_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_remark().data(), this->f_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_title;
        break;
      }

      // optional int32 f_title = 4;
      case 4: {
        if (tag == 32) {
         parse_f_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_title_)));
          set_has_f_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_initial;
        break;
      }

      // optional string f_initial = 5;
      case 5: {
        if (tag == 42) {
         parse_f_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_initial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_initial().data(), this->f_initial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_initial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_weight;
        break;
      }

      // optional int32 f_weight = 6;
      case 6: {
        if (tag == 48) {
         parse_f_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weight_)));
          set_has_f_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 7;
      case 7: {
        if (tag == 58) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_name_pinyin_j;
        break;
      }

      // optional string f_name_pinyin_j = 8;
      case 8: {
        if (tag == 66) {
         parse_f_name_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_group_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_group_user)
  return false;
#undef DO_
}

void pb_clt_t_group_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_group_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_remark = 3;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_remark(), output);
  }

  // optional int32 f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_title(), output);
  }

  // optional string f_initial = 5;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_initial(), output);
  }

  // optional int32 f_weight = 6;
  if (has_f_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_weight(), output);
  }

  // optional string f_name_pinyin = 7;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_name_pinyin(), output);
  }

  // optional string f_name_pinyin_j = 8;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_name_pinyin_j(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_group_user)
}

::google::protobuf::uint8* pb_clt_t_group_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_group_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_remark = 3;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_remark(), target);
  }

  // optional int32 f_title = 4;
  if (has_f_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_title(), target);
  }

  // optional string f_initial = 5;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_initial(), target);
  }

  // optional int32 f_weight = 6;
  if (has_f_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_weight(), target);
  }

  // optional string f_name_pinyin = 7;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_name_pinyin(), target);
  }

  // optional string f_name_pinyin_j = 8;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_name_pinyin_j(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_group_user)
  return target;
}

int pb_clt_t_group_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_remark = 3;
    if (has_f_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_remark());
    }

    // optional int32 f_title = 4;
    if (has_f_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_title());
    }

    // optional string f_initial = 5;
    if (has_f_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_initial());
    }

    // optional int32 f_weight = 6;
    if (has_f_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weight());
    }

    // optional string f_name_pinyin = 7;
    if (has_f_name_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

    // optional string f_name_pinyin_j = 8;
    if (has_f_name_pinyin_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin_j());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_group_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_group_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_group_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_group_user::MergeFrom(const pb_clt_t_group_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_remark()) {
      set_f_remark(from.f_remark());
    }
    if (from.has_f_title()) {
      set_f_title(from.f_title());
    }
    if (from.has_f_initial()) {
      set_f_initial(from.f_initial());
    }
    if (from.has_f_weight()) {
      set_f_weight(from.f_weight());
    }
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
    if (from.has_f_name_pinyin_j()) {
      set_f_name_pinyin_j(from.f_name_pinyin_j());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_group_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_group_user::CopyFrom(const pb_clt_t_group_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_group_user::IsInitialized() const {

  return true;
}

void pb_clt_t_group_user::Swap(pb_clt_t_group_user* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_remark_, other->f_remark_);
    std::swap(f_title_, other->f_title_);
    std::swap(f_initial_, other->f_initial_);
    std::swap(f_weight_, other->f_weight_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_name_pinyin_j_, other->f_name_pinyin_j_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_group_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_group_user_descriptor_;
  metadata.reflection = pb_clt_t_group_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_group_base_user::kFUinFieldNumber;
const int pb_clt_t_group_base_user::kFNameFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_group_base_user::pb_clt_t_group_base_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_group_base_user)
}

void pb_clt_t_group_base_user::InitAsDefaultInstance() {
}

pb_clt_t_group_base_user::pb_clt_t_group_base_user(const pb_clt_t_group_base_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_group_base_user)
}

void pb_clt_t_group_base_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_group_base_user::~pb_clt_t_group_base_user() {
  // @@protoc_insertion_point(destructor:pb_clt_t_group_base_user)
  SharedDtor();
}

void pb_clt_t_group_base_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (this != default_instance_) {
  }
}

void pb_clt_t_group_base_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_group_base_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_group_base_user_descriptor_;
}

const pb_clt_t_group_base_user& pb_clt_t_group_base_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_group_base_user* pb_clt_t_group_base_user::default_instance_ = NULL;

pb_clt_t_group_base_user* pb_clt_t_group_base_user::New() const {
  return new pb_clt_t_group_base_user;
}

void pb_clt_t_group_base_user::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_uin_ = 0u;
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_group_base_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_group_base_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_group_base_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_group_base_user)
  return false;
#undef DO_
}

void pb_clt_t_group_base_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_group_base_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_group_base_user)
}

::google::protobuf::uint8* pb_clt_t_group_base_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_group_base_user)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_group_base_user)
  return target;
}

int pb_clt_t_group_base_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_group_base_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_group_base_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_group_base_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_group_base_user::MergeFrom(const pb_clt_t_group_base_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_group_base_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_group_base_user::CopyFrom(const pb_clt_t_group_base_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_group_base_user::IsInitialized() const {

  return true;
}

void pb_clt_t_group_base_user::Swap(pb_clt_t_group_base_user* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_group_base_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_group_base_user_descriptor_;
  metadata.reflection = pb_clt_t_group_base_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_group_item::kFGroupIdFieldNumber;
const int pb_clt_t_group_item::kFGroupNameFieldNumber;
const int pb_clt_t_group_item::kFGroupDescFieldNumber;
const int pb_clt_t_group_item::kFGroupTypeFieldNumber;
const int pb_clt_t_group_item::kFSeqFieldNumber;
const int pb_clt_t_group_item::kFLastMsgFieldNumber;
const int pb_clt_t_group_item::kFLastMsgTimeFieldNumber;
const int pb_clt_t_group_item::kFLastMsgTypeFieldNumber;
const int pb_clt_t_group_item::kFLastSenderIdFieldNumber;
const int pb_clt_t_group_item::kFLastSenderNameFieldNumber;
const int pb_clt_t_group_item::kFAvatarFieldNumber;
const int pb_clt_t_group_item::kFIsScreenFieldNumber;
const int pb_clt_t_group_item::kFIsRemindFieldNumber;
const int pb_clt_t_group_item::kFRemarkFieldNumber;
const int pb_clt_t_group_item::kFInitialFieldNumber;
const int pb_clt_t_group_item::kFWeightFieldNumber;
const int pb_clt_t_group_item::kFNamePinyinFieldNumber;
const int pb_clt_t_group_item::kFNamePinyinJFieldNumber;
const int pb_clt_t_group_item::kFMemberCountFieldNumber;
const int pb_clt_t_group_item::kFInitSeqidFieldNumber;
const int pb_clt_t_group_item::kFReadSeqidFieldNumber;
const int pb_clt_t_group_item::kFCreatorUidFieldNumber;
const int pb_clt_t_group_item::kFBaseUsersFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_group_item::pb_clt_t_group_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_group_item)
}

void pb_clt_t_group_item::InitAsDefaultInstance() {
}

pb_clt_t_group_item::pb_clt_t_group_item(const pb_clt_t_group_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_group_item)
}

void pb_clt_t_group_item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_type_ = 0;
  f_seq_ = 0;
  f_last_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_last_msg_time_ = 0;
  f_last_msg_type_ = 0;
  f_last_sender_id_ = 0;
  f_last_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_is_screen_ = 0;
  f_is_remind_ = 0;
  f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weight_ = 0;
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_member_count_ = 0;
  f_init_seqid_ = 0;
  f_read_seqid_ = 0;
  f_creator_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_group_item::~pb_clt_t_group_item() {
  // @@protoc_insertion_point(destructor:pb_clt_t_group_item)
  SharedDtor();
}

void pb_clt_t_group_item::SharedDtor() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_name_;
  }
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_desc_;
  }
  if (f_last_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_msg_;
  }
  if (f_last_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_sender_name_;
  }
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (this != default_instance_) {
  }
}

void pb_clt_t_group_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_group_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_group_item_descriptor_;
}

const pb_clt_t_group_item& pb_clt_t_group_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_group_item* pb_clt_t_group_item::default_instance_ = NULL;

pb_clt_t_group_item* pb_clt_t_group_item::New() const {
  return new pb_clt_t_group_item;
}

void pb_clt_t_group_item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_group_item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_group_type_, f_seq_);
    ZR_(f_last_msg_time_, f_last_msg_type_);
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
    if (has_f_group_name()) {
      if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_name_->clear();
      }
    }
    if (has_f_group_desc()) {
      if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_desc_->clear();
      }
    }
    if (has_f_last_msg()) {
      if (f_last_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_last_msg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 64256) {
    ZR_(f_last_sender_id_, f_is_screen_);
    ZR_(f_is_remind_, f_weight_);
    if (has_f_last_sender_name()) {
      if (f_last_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_last_sender_name_->clear();
      }
    }
    if (has_f_remark()) {
      if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_remark_->clear();
      }
    }
    if (has_f_initial()) {
      if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_initial_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(f_member_count_, f_creator_uid_);
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
    if (has_f_name_pinyin_j()) {
      if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_j_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_avatar_.Clear();
  f_base_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_group_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_group_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_group_name;
        break;
      }

      // optional string f_group_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_name().data(), this->f_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_group_desc;
        break;
      }

      // optional string f_group_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_f_group_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_desc().data(), this->f_group_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_group_type;
        break;
      }

      // optional int32 f_group_type = 4;
      case 4: {
        if (tag == 32) {
         parse_f_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_group_type_)));
          set_has_f_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_seq;
        break;
      }

      // optional int32 f_seq = 5;
      case 5: {
        if (tag == 40) {
         parse_f_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_seq_)));
          set_has_f_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_last_msg;
        break;
      }

      // optional string f_last_msg = 6;
      case 6: {
        if (tag == 50) {
         parse_f_last_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_last_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_last_msg().data(), this->f_last_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_last_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_last_msg_time;
        break;
      }

      // optional int32 f_last_msg_time = 7;
      case 7: {
        if (tag == 56) {
         parse_f_last_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_last_msg_time_)));
          set_has_f_last_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_f_last_msg_type;
        break;
      }

      // optional int32 f_last_msg_type = 8;
      case 8: {
        if (tag == 64) {
         parse_f_last_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_last_msg_type_)));
          set_has_f_last_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_last_sender_id;
        break;
      }

      // optional int32 f_last_sender_id = 9;
      case 9: {
        if (tag == 72) {
         parse_f_last_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_last_sender_id_)));
          set_has_f_last_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_last_sender_name;
        break;
      }

      // optional string f_last_sender_name = 10;
      case 10: {
        if (tag == 82) {
         parse_f_last_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_last_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_last_sender_name().data(), this->f_last_sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_last_sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_avatar;
        break;
      }

      // repeated string f_avatar = 11;
      case 11: {
        if (tag == 90) {
         parse_f_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_avatar(this->f_avatar_size() - 1).data(),
            this->f_avatar(this->f_avatar_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_avatar;
        if (input->ExpectTag(96)) goto parse_f_is_screen;
        break;
      }

      // optional int32 f_is_screen = 12;
      case 12: {
        if (tag == 96) {
         parse_f_is_screen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_is_screen_)));
          set_has_f_is_screen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_f_is_remind;
        break;
      }

      // optional int32 f_is_remind = 13;
      case 13: {
        if (tag == 104) {
         parse_f_is_remind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_is_remind_)));
          set_has_f_is_remind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_remark;
        break;
      }

      // optional string f_remark = 14;
      case 14: {
        if (tag == 114) {
         parse_f_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_remark().data(), this->f_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_f_initial;
        break;
      }

      // optional string f_initial = 15;
      case 15: {
        if (tag == 122) {
         parse_f_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_initial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_initial().data(), this->f_initial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_initial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_f_weight;
        break;
      }

      // optional int32 f_weight = 16;
      case 16: {
        if (tag == 128) {
         parse_f_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weight_)));
          set_has_f_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 17;
      case 17: {
        if (tag == 138) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_f_name_pinyin_j;
        break;
      }

      // optional string f_name_pinyin_j = 18;
      case 18: {
        if (tag == 146) {
         parse_f_name_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_f_member_count;
        break;
      }

      // optional int32 f_member_count = 19;
      case 19: {
        if (tag == 152) {
         parse_f_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_member_count_)));
          set_has_f_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_f_init_seqid;
        break;
      }

      // optional int32 f_init_seqid = 20;
      case 20: {
        if (tag == 160) {
         parse_f_init_seqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_init_seqid_)));
          set_has_f_init_seqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_f_read_seqid;
        break;
      }

      // optional int32 f_read_seqid = 21;
      case 21: {
        if (tag == 168) {
         parse_f_read_seqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_read_seqid_)));
          set_has_f_read_seqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_f_creator_uid;
        break;
      }

      // optional int32 f_creator_uid = 22;
      case 22: {
        if (tag == 176) {
         parse_f_creator_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_creator_uid_)));
          set_has_f_creator_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_f_base_users;
        break;
      }

      // repeated .pb_clt_t_group_base_user f_base_users = 23;
      case 23: {
        if (tag == 186) {
         parse_f_base_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_base_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_f_base_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_group_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_group_item)
  return false;
#undef DO_
}

void pb_clt_t_group_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_group_item)
  // optional string f_group_id = 1;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_group_id(), output);
  }

  // optional string f_group_name = 2;
  if (has_f_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_name().data(), this->f_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_group_name(), output);
  }

  // optional string f_group_desc = 3;
  if (has_f_group_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_desc().data(), this->f_group_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_group_desc(), output);
  }

  // optional int32 f_group_type = 4;
  if (has_f_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_group_type(), output);
  }

  // optional int32 f_seq = 5;
  if (has_f_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_seq(), output);
  }

  // optional string f_last_msg = 6;
  if (has_f_last_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_msg().data(), this->f_last_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_last_msg(), output);
  }

  // optional int32 f_last_msg_time = 7;
  if (has_f_last_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_last_msg_time(), output);
  }

  // optional int32 f_last_msg_type = 8;
  if (has_f_last_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->f_last_msg_type(), output);
  }

  // optional int32 f_last_sender_id = 9;
  if (has_f_last_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_last_sender_id(), output);
  }

  // optional string f_last_sender_name = 10;
  if (has_f_last_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_sender_name().data(), this->f_last_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_last_sender_name(), output);
  }

  // repeated string f_avatar = 11;
  for (int i = 0; i < this->f_avatar_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_avatar(i).data(), this->f_avatar(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->f_avatar(i), output);
  }

  // optional int32 f_is_screen = 12;
  if (has_f_is_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_is_screen(), output);
  }

  // optional int32 f_is_remind = 13;
  if (has_f_is_remind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->f_is_remind(), output);
  }

  // optional string f_remark = 14;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->f_remark(), output);
  }

  // optional string f_initial = 15;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->f_initial(), output);
  }

  // optional int32 f_weight = 16;
  if (has_f_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->f_weight(), output);
  }

  // optional string f_name_pinyin = 17;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->f_name_pinyin(), output);
  }

  // optional string f_name_pinyin_j = 18;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->f_name_pinyin_j(), output);
  }

  // optional int32 f_member_count = 19;
  if (has_f_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->f_member_count(), output);
  }

  // optional int32 f_init_seqid = 20;
  if (has_f_init_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->f_init_seqid(), output);
  }

  // optional int32 f_read_seqid = 21;
  if (has_f_read_seqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->f_read_seqid(), output);
  }

  // optional int32 f_creator_uid = 22;
  if (has_f_creator_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->f_creator_uid(), output);
  }

  // repeated .pb_clt_t_group_base_user f_base_users = 23;
  for (int i = 0; i < this->f_base_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->f_base_users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_group_item)
}

::google::protobuf::uint8* pb_clt_t_group_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_group_item)
  // optional string f_group_id = 1;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_group_id(), target);
  }

  // optional string f_group_name = 2;
  if (has_f_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_name().data(), this->f_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_group_name(), target);
  }

  // optional string f_group_desc = 3;
  if (has_f_group_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_desc().data(), this->f_group_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_group_desc(), target);
  }

  // optional int32 f_group_type = 4;
  if (has_f_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_group_type(), target);
  }

  // optional int32 f_seq = 5;
  if (has_f_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_seq(), target);
  }

  // optional string f_last_msg = 6;
  if (has_f_last_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_msg().data(), this->f_last_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_last_msg(), target);
  }

  // optional int32 f_last_msg_time = 7;
  if (has_f_last_msg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_last_msg_time(), target);
  }

  // optional int32 f_last_msg_type = 8;
  if (has_f_last_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->f_last_msg_type(), target);
  }

  // optional int32 f_last_sender_id = 9;
  if (has_f_last_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_last_sender_id(), target);
  }

  // optional string f_last_sender_name = 10;
  if (has_f_last_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_sender_name().data(), this->f_last_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_last_sender_name(), target);
  }

  // repeated string f_avatar = 11;
  for (int i = 0; i < this->f_avatar_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_avatar(i).data(), this->f_avatar(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_avatar");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->f_avatar(i), target);
  }

  // optional int32 f_is_screen = 12;
  if (has_f_is_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_is_screen(), target);
  }

  // optional int32 f_is_remind = 13;
  if (has_f_is_remind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->f_is_remind(), target);
  }

  // optional string f_remark = 14;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->f_remark(), target);
  }

  // optional string f_initial = 15;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->f_initial(), target);
  }

  // optional int32 f_weight = 16;
  if (has_f_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->f_weight(), target);
  }

  // optional string f_name_pinyin = 17;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->f_name_pinyin(), target);
  }

  // optional string f_name_pinyin_j = 18;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->f_name_pinyin_j(), target);
  }

  // optional int32 f_member_count = 19;
  if (has_f_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->f_member_count(), target);
  }

  // optional int32 f_init_seqid = 20;
  if (has_f_init_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->f_init_seqid(), target);
  }

  // optional int32 f_read_seqid = 21;
  if (has_f_read_seqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->f_read_seqid(), target);
  }

  // optional int32 f_creator_uid = 22;
  if (has_f_creator_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->f_creator_uid(), target);
  }

  // repeated .pb_clt_t_group_base_user f_base_users = 23;
  for (int i = 0; i < this->f_base_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->f_base_users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_group_item)
  return target;
}

int pb_clt_t_group_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_group_id = 1;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

    // optional string f_group_name = 2;
    if (has_f_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_name());
    }

    // optional string f_group_desc = 3;
    if (has_f_group_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_desc());
    }

    // optional int32 f_group_type = 4;
    if (has_f_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_group_type());
    }

    // optional int32 f_seq = 5;
    if (has_f_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_seq());
    }

    // optional string f_last_msg = 6;
    if (has_f_last_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_last_msg());
    }

    // optional int32 f_last_msg_time = 7;
    if (has_f_last_msg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_last_msg_time());
    }

    // optional int32 f_last_msg_type = 8;
    if (has_f_last_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_last_msg_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_last_sender_id = 9;
    if (has_f_last_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_last_sender_id());
    }

    // optional string f_last_sender_name = 10;
    if (has_f_last_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_last_sender_name());
    }

    // optional int32 f_is_screen = 12;
    if (has_f_is_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_is_screen());
    }

    // optional int32 f_is_remind = 13;
    if (has_f_is_remind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_is_remind());
    }

    // optional string f_remark = 14;
    if (has_f_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_remark());
    }

    // optional string f_initial = 15;
    if (has_f_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_initial());
    }

    // optional int32 f_weight = 16;
    if (has_f_weight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weight());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string f_name_pinyin = 17;
    if (has_f_name_pinyin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

    // optional string f_name_pinyin_j = 18;
    if (has_f_name_pinyin_j()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin_j());
    }

    // optional int32 f_member_count = 19;
    if (has_f_member_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_member_count());
    }

    // optional int32 f_init_seqid = 20;
    if (has_f_init_seqid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_init_seqid());
    }

    // optional int32 f_read_seqid = 21;
    if (has_f_read_seqid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_read_seqid());
    }

    // optional int32 f_creator_uid = 22;
    if (has_f_creator_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_creator_uid());
    }

  }
  // repeated string f_avatar = 11;
  total_size += 1 * this->f_avatar_size();
  for (int i = 0; i < this->f_avatar_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_avatar(i));
  }

  // repeated .pb_clt_t_group_base_user f_base_users = 23;
  total_size += 2 * this->f_base_users_size();
  for (int i = 0; i < this->f_base_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_base_users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_group_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_group_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_group_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_group_item::MergeFrom(const pb_clt_t_group_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_avatar_.MergeFrom(from.f_avatar_);
  f_base_users_.MergeFrom(from.f_base_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
    if (from.has_f_group_name()) {
      set_f_group_name(from.f_group_name());
    }
    if (from.has_f_group_desc()) {
      set_f_group_desc(from.f_group_desc());
    }
    if (from.has_f_group_type()) {
      set_f_group_type(from.f_group_type());
    }
    if (from.has_f_seq()) {
      set_f_seq(from.f_seq());
    }
    if (from.has_f_last_msg()) {
      set_f_last_msg(from.f_last_msg());
    }
    if (from.has_f_last_msg_time()) {
      set_f_last_msg_time(from.f_last_msg_time());
    }
    if (from.has_f_last_msg_type()) {
      set_f_last_msg_type(from.f_last_msg_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_last_sender_id()) {
      set_f_last_sender_id(from.f_last_sender_id());
    }
    if (from.has_f_last_sender_name()) {
      set_f_last_sender_name(from.f_last_sender_name());
    }
    if (from.has_f_is_screen()) {
      set_f_is_screen(from.f_is_screen());
    }
    if (from.has_f_is_remind()) {
      set_f_is_remind(from.f_is_remind());
    }
    if (from.has_f_remark()) {
      set_f_remark(from.f_remark());
    }
    if (from.has_f_initial()) {
      set_f_initial(from.f_initial());
    }
    if (from.has_f_weight()) {
      set_f_weight(from.f_weight());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
    if (from.has_f_name_pinyin_j()) {
      set_f_name_pinyin_j(from.f_name_pinyin_j());
    }
    if (from.has_f_member_count()) {
      set_f_member_count(from.f_member_count());
    }
    if (from.has_f_init_seqid()) {
      set_f_init_seqid(from.f_init_seqid());
    }
    if (from.has_f_read_seqid()) {
      set_f_read_seqid(from.f_read_seqid());
    }
    if (from.has_f_creator_uid()) {
      set_f_creator_uid(from.f_creator_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_group_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_group_item::CopyFrom(const pb_clt_t_group_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_group_item::IsInitialized() const {

  return true;
}

void pb_clt_t_group_item::Swap(pb_clt_t_group_item* other) {
  if (other != this) {
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(f_group_name_, other->f_group_name_);
    std::swap(f_group_desc_, other->f_group_desc_);
    std::swap(f_group_type_, other->f_group_type_);
    std::swap(f_seq_, other->f_seq_);
    std::swap(f_last_msg_, other->f_last_msg_);
    std::swap(f_last_msg_time_, other->f_last_msg_time_);
    std::swap(f_last_msg_type_, other->f_last_msg_type_);
    std::swap(f_last_sender_id_, other->f_last_sender_id_);
    std::swap(f_last_sender_name_, other->f_last_sender_name_);
    f_avatar_.Swap(&other->f_avatar_);
    std::swap(f_is_screen_, other->f_is_screen_);
    std::swap(f_is_remind_, other->f_is_remind_);
    std::swap(f_remark_, other->f_remark_);
    std::swap(f_initial_, other->f_initial_);
    std::swap(f_weight_, other->f_weight_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_name_pinyin_j_, other->f_name_pinyin_j_);
    std::swap(f_member_count_, other->f_member_count_);
    std::swap(f_init_seqid_, other->f_init_seqid_);
    std::swap(f_read_seqid_, other->f_read_seqid_);
    std::swap(f_creator_uid_, other->f_creator_uid_);
    f_base_users_.Swap(&other->f_base_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_group_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_group_item_descriptor_;
  metadata.reflection = pb_clt_t_group_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_group_details::kFGroupInfoFieldNumber;
const int pb_clt_t_group_details::kFMembersFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_group_details::pb_clt_t_group_details()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_group_details)
}

void pb_clt_t_group_details::InitAsDefaultInstance() {
  f_group_info_ = const_cast< ::pb_clt_t_group_item*>(&::pb_clt_t_group_item::default_instance());
}

pb_clt_t_group_details::pb_clt_t_group_details(const pb_clt_t_group_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_group_details)
}

void pb_clt_t_group_details::SharedCtor() {
  _cached_size_ = 0;
  f_group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_group_details::~pb_clt_t_group_details() {
  // @@protoc_insertion_point(destructor:pb_clt_t_group_details)
  SharedDtor();
}

void pb_clt_t_group_details::SharedDtor() {
  if (this != default_instance_) {
    delete f_group_info_;
  }
}

void pb_clt_t_group_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_group_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_group_details_descriptor_;
}

const pb_clt_t_group_details& pb_clt_t_group_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_group_details* pb_clt_t_group_details::default_instance_ = NULL;

pb_clt_t_group_details* pb_clt_t_group_details::New() const {
  return new pb_clt_t_group_details;
}

void pb_clt_t_group_details::Clear() {
  if (has_f_group_info()) {
    if (f_group_info_ != NULL) f_group_info_->::pb_clt_t_group_item::Clear();
  }
  f_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_group_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_group_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_clt_t_group_item f_group_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_group_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_members;
        break;
      }

      // repeated .pb_clt_t_group_user f_members = 2;
      case 2: {
        if (tag == 18) {
         parse_f_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_group_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_group_details)
  return false;
#undef DO_
}

void pb_clt_t_group_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_group_details)
  // optional .pb_clt_t_group_item f_group_info = 1;
  if (has_f_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_group_info(), output);
  }

  // repeated .pb_clt_t_group_user f_members = 2;
  for (int i = 0; i < this->f_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_group_details)
}

::google::protobuf::uint8* pb_clt_t_group_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_group_details)
  // optional .pb_clt_t_group_item f_group_info = 1;
  if (has_f_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_group_info(), target);
  }

  // repeated .pb_clt_t_group_user f_members = 2;
  for (int i = 0; i < this->f_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_group_details)
  return target;
}

int pb_clt_t_group_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_clt_t_group_item f_group_info = 1;
    if (has_f_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_group_info());
    }

  }
  // repeated .pb_clt_t_group_user f_members = 2;
  total_size += 1 * this->f_members_size();
  for (int i = 0; i < this->f_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_group_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_group_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_group_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_group_details::MergeFrom(const pb_clt_t_group_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_members_.MergeFrom(from.f_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_group_info()) {
      mutable_f_group_info()->::pb_clt_t_group_item::MergeFrom(from.f_group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_group_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_group_details::CopyFrom(const pb_clt_t_group_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_group_details::IsInitialized() const {

  return true;
}

void pb_clt_t_group_details::Swap(pb_clt_t_group_details* other) {
  if (other != this) {
    std::swap(f_group_info_, other->f_group_info_);
    f_members_.Swap(&other->f_members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_group_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_group_details_descriptor_;
  metadata.reflection = pb_clt_t_group_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_group::kFUpdateTypeFieldNumber;
const int pb_clt_t_group::kFLastUpdateGidFieldNumber;
const int pb_clt_t_group::kFImGroupFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_group::pb_clt_t_group()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_group)
}

void pb_clt_t_group::InitAsDefaultInstance() {
}

pb_clt_t_group::pb_clt_t_group(const pb_clt_t_group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_group)
}

void pb_clt_t_group::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_last_update_gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_group::~pb_clt_t_group() {
  // @@protoc_insertion_point(destructor:pb_clt_t_group)
  SharedDtor();
}

void pb_clt_t_group::SharedDtor() {
  if (f_last_update_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_update_gid_;
  }
  if (this != default_instance_) {
  }
}

void pb_clt_t_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_group_descriptor_;
}

const pb_clt_t_group& pb_clt_t_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_group* pb_clt_t_group::default_instance_ = NULL;

pb_clt_t_group* pb_clt_t_group::New() const {
  return new pb_clt_t_group;
}

void pb_clt_t_group::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_update_type_ = 0;
    if (has_f_last_update_gid()) {
      if (f_last_update_gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_last_update_gid_->clear();
      }
    }
  }
  f_im_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_last_update_gid;
        break;
      }

      // optional string f_last_update_gid = 2;
      case 2: {
        if (tag == 18) {
         parse_f_last_update_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_last_update_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_last_update_gid().data(), this->f_last_update_gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_last_update_gid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_im_group;
        break;
      }

      // repeated .pb_clt_t_group_item f_im_group = 3;
      case 3: {
        if (tag == 26) {
         parse_f_im_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_im_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_im_group;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_group)
  return false;
#undef DO_
}

void pb_clt_t_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_group)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // optional string f_last_update_gid = 2;
  if (has_f_last_update_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_update_gid().data(), this->f_last_update_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_update_gid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_last_update_gid(), output);
  }

  // repeated .pb_clt_t_group_item f_im_group = 3;
  for (int i = 0; i < this->f_im_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_im_group(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_group)
}

::google::protobuf::uint8* pb_clt_t_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_group)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // optional string f_last_update_gid = 2;
  if (has_f_last_update_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_update_gid().data(), this->f_last_update_gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_update_gid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_last_update_gid(), target);
  }

  // repeated .pb_clt_t_group_item f_im_group = 3;
  for (int i = 0; i < this->f_im_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_im_group(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_group)
  return target;
}

int pb_clt_t_group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional string f_last_update_gid = 2;
    if (has_f_last_update_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_last_update_gid());
    }

  }
  // repeated .pb_clt_t_group_item f_im_group = 3;
  total_size += 1 * this->f_im_group_size();
  for (int i = 0; i < this->f_im_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_im_group(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_group::MergeFrom(const pb_clt_t_group& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_im_group_.MergeFrom(from.f_im_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_last_update_gid()) {
      set_f_last_update_gid(from.f_last_update_gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_group::CopyFrom(const pb_clt_t_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_group::IsInitialized() const {

  return true;
}

void pb_clt_t_group::Swap(pb_clt_t_group* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    std::swap(f_last_update_gid_, other->f_last_update_gid_);
    f_im_group_.Swap(&other->f_im_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_group_descriptor_;
  metadata.reflection = pb_clt_t_group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_version::kFVersionIdFieldNumber;
const int pb_clt_t_version::kFVersionMsgFieldNumber;
const int pb_clt_t_version::kFChanelIdFieldNumber;
const int pb_clt_t_version::kFDownUrlFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_version::pb_clt_t_version()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_version)
}

void pb_clt_t_version::InitAsDefaultInstance() {
}

pb_clt_t_version::pb_clt_t_version(const pb_clt_t_version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_version)
}

void pb_clt_t_version::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_version_id_ = 0;
  f_version_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_chanel_id_ = 0;
  f_down_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_version::~pb_clt_t_version() {
  // @@protoc_insertion_point(destructor:pb_clt_t_version)
  SharedDtor();
}

void pb_clt_t_version::SharedDtor() {
  if (f_version_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_version_msg_;
  }
  if (f_down_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_down_url_;
  }
  if (this != default_instance_) {
  }
}

void pb_clt_t_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_version_descriptor_;
}

const pb_clt_t_version& pb_clt_t_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_version* pb_clt_t_version::default_instance_ = NULL;

pb_clt_t_version* pb_clt_t_version::New() const {
  return new pb_clt_t_version;
}

void pb_clt_t_version::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_version*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(f_version_id_, f_chanel_id_);
    if (has_f_version_msg()) {
      if (f_version_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_version_msg_->clear();
      }
    }
    if (has_f_down_url()) {
      if (f_down_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_down_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_version_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_version_id_)));
          set_has_f_version_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_version_msg;
        break;
      }

      // optional string f_version_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_f_version_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_version_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_version_msg().data(), this->f_version_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_version_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_chanel_id;
        break;
      }

      // optional int32 f_chanel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_f_chanel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_chanel_id_)));
          set_has_f_chanel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_down_url;
        break;
      }

      // optional string f_down_url = 4;
      case 4: {
        if (tag == 34) {
         parse_f_down_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_down_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_down_url().data(), this->f_down_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_down_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_version)
  return false;
#undef DO_
}

void pb_clt_t_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_version)
  // optional int32 f_version_id = 1;
  if (has_f_version_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_version_id(), output);
  }

  // optional string f_version_msg = 2;
  if (has_f_version_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_version_msg().data(), this->f_version_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_version_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_version_msg(), output);
  }

  // optional int32 f_chanel_id = 3;
  if (has_f_chanel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_chanel_id(), output);
  }

  // optional string f_down_url = 4;
  if (has_f_down_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_down_url().data(), this->f_down_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_down_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_down_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_version)
}

::google::protobuf::uint8* pb_clt_t_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_version)
  // optional int32 f_version_id = 1;
  if (has_f_version_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_version_id(), target);
  }

  // optional string f_version_msg = 2;
  if (has_f_version_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_version_msg().data(), this->f_version_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_version_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_version_msg(), target);
  }

  // optional int32 f_chanel_id = 3;
  if (has_f_chanel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_chanel_id(), target);
  }

  // optional string f_down_url = 4;
  if (has_f_down_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_down_url().data(), this->f_down_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_down_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_down_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_version)
  return target;
}

int pb_clt_t_version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_version_id = 1;
    if (has_f_version_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_version_id());
    }

    // optional string f_version_msg = 2;
    if (has_f_version_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_version_msg());
    }

    // optional int32 f_chanel_id = 3;
    if (has_f_chanel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_chanel_id());
    }

    // optional string f_down_url = 4;
    if (has_f_down_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_down_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_version::MergeFrom(const pb_clt_t_version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_version_id()) {
      set_f_version_id(from.f_version_id());
    }
    if (from.has_f_version_msg()) {
      set_f_version_msg(from.f_version_msg());
    }
    if (from.has_f_chanel_id()) {
      set_f_chanel_id(from.f_chanel_id());
    }
    if (from.has_f_down_url()) {
      set_f_down_url(from.f_down_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_version::CopyFrom(const pb_clt_t_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_version::IsInitialized() const {

  return true;
}

void pb_clt_t_version::Swap(pb_clt_t_version* other) {
  if (other != this) {
    std::swap(f_version_id_, other->f_version_id_);
    std::swap(f_version_msg_, other->f_version_msg_);
    std::swap(f_chanel_id_, other->f_chanel_id_);
    std::swap(f_down_url_, other->f_down_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_version_descriptor_;
  metadata.reflection = pb_clt_t_version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_clt_t_user::kFInfoFieldNumber;
const int pb_clt_t_user::kFFriendListFieldNumber;
const int pb_clt_t_user::kFSearchFriendListFieldNumber;
const int pb_clt_t_user::kFValidationFriendListFieldNumber;
const int pb_clt_t_user::kFImGroupFieldNumber;
const int pb_clt_t_user::kFFriendInfoFieldNumber;
const int pb_clt_t_user::kFImMsgFieldNumber;
const int pb_clt_t_user::kFImGroupDetailsFieldNumber;
const int pb_clt_t_user::kFPrjListFieldNumber;
const int pb_clt_t_user::kFPrjDetailsFieldNumber;
const int pb_clt_t_user::kFNRecommendFriendListFieldNumber;
const int pb_clt_t_user::kFRecommendPrjListFieldNumber;
const int pb_clt_t_user::kFPrjUserFieldNumber;
const int pb_clt_t_user::kFPrjJoinUserFieldNumber;
const int pb_clt_t_user::kFVersionFieldNumber;
const int pb_clt_t_user::kFPrjWeatherFieldNumber;
const int pb_clt_t_user::kFTaskDetailsFieldNumber;
const int pb_clt_t_user::kFTaskListFieldNumber;
const int pb_clt_t_user::kFPrjFilesFieldNumber;
const int pb_clt_t_user::kPbCltTUserCodeFieldNumber;
const int pb_clt_t_user::kFCollectionFieldNumber;
const int pb_clt_t_user::kFUpstreamTimeFieldNumber;
const int pb_clt_t_user::kFPrjRecordGroupFieldNumber;
#endif  // !_MSC_VER

pb_clt_t_user::pb_clt_t_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_clt_t_user)
}

void pb_clt_t_user::InitAsDefaultInstance() {
  f_info_ = const_cast< ::pb_user_t_info*>(&::pb_user_t_info::default_instance());
  f_friend_list_ = const_cast< ::pb_clt_t_friend*>(&::pb_clt_t_friend::default_instance());
  f_search_friend_list_ = const_cast< ::pb_clt_t_friend*>(&::pb_clt_t_friend::default_instance());
  f_validation_friend_list_ = const_cast< ::pb_clt_t_friend*>(&::pb_clt_t_friend::default_instance());
  f_im_group_ = const_cast< ::pb_clt_t_group*>(&::pb_clt_t_group::default_instance());
  f_friend_info_ = const_cast< ::pb_user_t_info*>(&::pb_user_t_info::default_instance());
  f_im_msg_ = const_cast< ::pb_im_t_msg*>(&::pb_im_t_msg::default_instance());
  f_im_group_details_ = const_cast< ::pb_clt_t_group_details*>(&::pb_clt_t_group_details::default_instance());
  f_prj_list_ = const_cast< ::pb_prj_t_prj*>(&::pb_prj_t_prj::default_instance());
  f_prj_details_ = const_cast< ::pb_prj_t_details*>(&::pb_prj_t_details::default_instance());
  f_n_recommend_friend_list_ = const_cast< ::pb_clt_t_recommend_friend*>(&::pb_clt_t_recommend_friend::default_instance());
  f_recommend_prj_list_ = const_cast< ::pb_prj_t_recommend_prj*>(&::pb_prj_t_recommend_prj::default_instance());
  f_version_ = const_cast< ::pb_clt_t_version*>(&::pb_clt_t_version::default_instance());
  f_prj_weather_ = const_cast< ::pb_prj_t_prj_weather*>(&::pb_prj_t_prj_weather::default_instance());
  f_task_details_ = const_cast< ::pb_prj_t_task_details*>(&::pb_prj_t_task_details::default_instance());
  f_task_list_ = const_cast< ::pb_prj_t_task_list*>(&::pb_prj_t_task_list::default_instance());
  f_prj_files_ = const_cast< ::pb_prj_t_file*>(&::pb_prj_t_file::default_instance());
  f_collection_ = const_cast< ::pb_user_t_collection_list*>(&::pb_user_t_collection_list::default_instance());
  f_prj_record_group_ = const_cast< ::pb_clt_t_group*>(&::pb_clt_t_group::default_instance());
}

pb_clt_t_user::pb_clt_t_user(const pb_clt_t_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_clt_t_user)
}

void pb_clt_t_user::SharedCtor() {
  _cached_size_ = 0;
  f_info_ = NULL;
  f_friend_list_ = NULL;
  f_search_friend_list_ = NULL;
  f_validation_friend_list_ = NULL;
  f_im_group_ = NULL;
  f_friend_info_ = NULL;
  f_im_msg_ = NULL;
  f_im_group_details_ = NULL;
  f_prj_list_ = NULL;
  f_prj_details_ = NULL;
  f_n_recommend_friend_list_ = NULL;
  f_recommend_prj_list_ = NULL;
  f_version_ = NULL;
  f_prj_weather_ = NULL;
  f_task_details_ = NULL;
  f_task_list_ = NULL;
  f_prj_files_ = NULL;
  pb_clt_t_user_code_ = 0;
  f_collection_ = NULL;
  f_upstream_time_ = 0;
  f_prj_record_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_clt_t_user::~pb_clt_t_user() {
  // @@protoc_insertion_point(destructor:pb_clt_t_user)
  SharedDtor();
}

void pb_clt_t_user::SharedDtor() {
  if (this != default_instance_) {
    delete f_info_;
    delete f_friend_list_;
    delete f_search_friend_list_;
    delete f_validation_friend_list_;
    delete f_im_group_;
    delete f_friend_info_;
    delete f_im_msg_;
    delete f_im_group_details_;
    delete f_prj_list_;
    delete f_prj_details_;
    delete f_n_recommend_friend_list_;
    delete f_recommend_prj_list_;
    delete f_version_;
    delete f_prj_weather_;
    delete f_task_details_;
    delete f_task_list_;
    delete f_prj_files_;
    delete f_collection_;
    delete f_prj_record_group_;
  }
}

void pb_clt_t_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_clt_t_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_clt_t_user_descriptor_;
}

const pb_clt_t_user& pb_clt_t_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_clt_t_user* pb_clt_t_user::default_instance_ = NULL;

pb_clt_t_user* pb_clt_t_user::New() const {
  return new pb_clt_t_user;
}

void pb_clt_t_user::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_clt_t_user*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_f_info()) {
      if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
    }
    if (has_f_friend_list()) {
      if (f_friend_list_ != NULL) f_friend_list_->::pb_clt_t_friend::Clear();
    }
    if (has_f_search_friend_list()) {
      if (f_search_friend_list_ != NULL) f_search_friend_list_->::pb_clt_t_friend::Clear();
    }
    if (has_f_validation_friend_list()) {
      if (f_validation_friend_list_ != NULL) f_validation_friend_list_->::pb_clt_t_friend::Clear();
    }
    if (has_f_im_group()) {
      if (f_im_group_ != NULL) f_im_group_->::pb_clt_t_group::Clear();
    }
    if (has_f_friend_info()) {
      if (f_friend_info_ != NULL) f_friend_info_->::pb_user_t_info::Clear();
    }
    if (has_f_im_msg()) {
      if (f_im_msg_ != NULL) f_im_msg_->::pb_im_t_msg::Clear();
    }
    if (has_f_im_group_details()) {
      if (f_im_group_details_ != NULL) f_im_group_details_->::pb_clt_t_group_details::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 52992) {
    if (has_f_prj_list()) {
      if (f_prj_list_ != NULL) f_prj_list_->::pb_prj_t_prj::Clear();
    }
    if (has_f_prj_details()) {
      if (f_prj_details_ != NULL) f_prj_details_->::pb_prj_t_details::Clear();
    }
    if (has_f_n_recommend_friend_list()) {
      if (f_n_recommend_friend_list_ != NULL) f_n_recommend_friend_list_->::pb_clt_t_recommend_friend::Clear();
    }
    if (has_f_recommend_prj_list()) {
      if (f_recommend_prj_list_ != NULL) f_recommend_prj_list_->::pb_prj_t_recommend_prj::Clear();
    }
    if (has_f_version()) {
      if (f_version_ != NULL) f_version_->::pb_clt_t_version::Clear();
    }
    if (has_f_prj_weather()) {
      if (f_prj_weather_ != NULL) f_prj_weather_->::pb_prj_t_prj_weather::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(pb_clt_t_user_code_, f_upstream_time_);
    if (has_f_task_details()) {
      if (f_task_details_ != NULL) f_task_details_->::pb_prj_t_task_details::Clear();
    }
    if (has_f_task_list()) {
      if (f_task_list_ != NULL) f_task_list_->::pb_prj_t_task_list::Clear();
    }
    if (has_f_prj_files()) {
      if (f_prj_files_ != NULL) f_prj_files_->::pb_prj_t_file::Clear();
    }
    if (has_f_collection()) {
      if (f_collection_ != NULL) f_collection_->::pb_user_t_collection_list::Clear();
    }
    if (has_f_prj_record_group()) {
      if (f_prj_record_group_ != NULL) f_prj_record_group_->::pb_clt_t_group::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_prj_user_.Clear();
  f_prj_join_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_clt_t_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_clt_t_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_user_t_info f_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_friend_list;
        break;
      }

      // optional .pb_clt_t_friend f_friend_list = 2;
      case 2: {
        if (tag == 18) {
         parse_f_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_search_friend_list;
        break;
      }

      // optional .pb_clt_t_friend f_search_friend_list = 3;
      case 3: {
        if (tag == 26) {
         parse_f_search_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_search_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_validation_friend_list;
        break;
      }

      // optional .pb_clt_t_friend f_validation_friend_list = 4;
      case 4: {
        if (tag == 34) {
         parse_f_validation_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_validation_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_im_group;
        break;
      }

      // optional .pb_clt_t_group f_im_group = 5;
      case 5: {
        if (tag == 42) {
         parse_f_im_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_im_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_friend_info;
        break;
      }

      // optional .pb_user_t_info f_friend_info = 6;
      case 6: {
        if (tag == 50) {
         parse_f_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_friend_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_im_msg;
        break;
      }

      // optional .pb_im_t_msg f_im_msg = 7;
      case 7: {
        if (tag == 58) {
         parse_f_im_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_im_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_im_group_details;
        break;
      }

      // optional .pb_clt_t_group_details f_im_group_details = 8;
      case 8: {
        if (tag == 66) {
         parse_f_im_group_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_im_group_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_prj_list;
        break;
      }

      // optional .pb_prj_t_prj f_prj_list = 9;
      case 9: {
        if (tag == 74) {
         parse_f_prj_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_prj_details;
        break;
      }

      // optional .pb_prj_t_details f_prj_details = 10;
      case 10: {
        if (tag == 82) {
         parse_f_prj_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_n_recommend_friend_list;
        break;
      }

      // optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 11;
      case 11: {
        if (tag == 90) {
         parse_f_n_recommend_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_n_recommend_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_recommend_prj_list;
        break;
      }

      // optional .pb_prj_t_recommend_prj f_recommend_prj_list = 12;
      case 12: {
        if (tag == 98) {
         parse_f_recommend_prj_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_recommend_prj_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_prj_user;
        break;
      }

      // repeated .pb_prj_t_user f_prj_user = 13;
      case 13: {
        if (tag == 106) {
         parse_f_prj_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_prj_user;
        if (input->ExpectTag(114)) goto parse_f_prj_join_user;
        break;
      }

      // repeated .pb_prj_t_user f_prj_join_user = 14;
      case 14: {
        if (tag == 114) {
         parse_f_prj_join_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_join_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_prj_join_user;
        if (input->ExpectTag(122)) goto parse_f_version;
        break;
      }

      // optional .pb_clt_t_version f_version = 15;
      case 15: {
        if (tag == 122) {
         parse_f_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_f_prj_weather;
        break;
      }

      // optional .pb_prj_t_prj_weather f_prj_weather = 16;
      case 16: {
        if (tag == 130) {
         parse_f_prj_weather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_weather()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_f_task_details;
        break;
      }

      // optional .pb_prj_t_task_details f_task_details = 17;
      case 17: {
        if (tag == 138) {
         parse_f_task_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_f_task_list;
        break;
      }

      // optional .pb_prj_t_task_list f_task_list = 18;
      case 18: {
        if (tag == 146) {
         parse_f_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_f_prj_files;
        break;
      }

      // optional .pb_prj_t_file f_prj_files = 19;
      case 19: {
        if (tag == 154) {
         parse_f_prj_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_pb_clt_t_user_code;
        break;
      }

      // optional int32 pb_clt_t_user_code = 20;
      case 20: {
        if (tag == 160) {
         parse_pb_clt_t_user_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pb_clt_t_user_code_)));
          set_has_pb_clt_t_user_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_f_collection;
        break;
      }

      // optional .pb_user_t_collection_list f_collection = 21;
      case 21: {
        if (tag == 170) {
         parse_f_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_f_upstream_time;
        break;
      }

      // optional int32 f_upstream_time = 22;
      case 22: {
        if (tag == 176) {
         parse_f_upstream_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_upstream_time_)));
          set_has_f_upstream_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_f_prj_record_group;
        break;
      }

      // optional .pb_clt_t_group f_prj_record_group = 23;
      case 23: {
        if (tag == 186) {
         parse_f_prj_record_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_record_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_clt_t_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_clt_t_user)
  return false;
#undef DO_
}

void pb_clt_t_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_clt_t_user)
  // optional .pb_user_t_info f_info = 1;
  if (has_f_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_info(), output);
  }

  // optional .pb_clt_t_friend f_friend_list = 2;
  if (has_f_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_friend_list(), output);
  }

  // optional .pb_clt_t_friend f_search_friend_list = 3;
  if (has_f_search_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_search_friend_list(), output);
  }

  // optional .pb_clt_t_friend f_validation_friend_list = 4;
  if (has_f_validation_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->f_validation_friend_list(), output);
  }

  // optional .pb_clt_t_group f_im_group = 5;
  if (has_f_im_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_im_group(), output);
  }

  // optional .pb_user_t_info f_friend_info = 6;
  if (has_f_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_friend_info(), output);
  }

  // optional .pb_im_t_msg f_im_msg = 7;
  if (has_f_im_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_im_msg(), output);
  }

  // optional .pb_clt_t_group_details f_im_group_details = 8;
  if (has_f_im_group_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_im_group_details(), output);
  }

  // optional .pb_prj_t_prj f_prj_list = 9;
  if (has_f_prj_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->f_prj_list(), output);
  }

  // optional .pb_prj_t_details f_prj_details = 10;
  if (has_f_prj_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f_prj_details(), output);
  }

  // optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 11;
  if (has_f_n_recommend_friend_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_n_recommend_friend_list(), output);
  }

  // optional .pb_prj_t_recommend_prj f_recommend_prj_list = 12;
  if (has_f_recommend_prj_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->f_recommend_prj_list(), output);
  }

  // repeated .pb_prj_t_user f_prj_user = 13;
  for (int i = 0; i < this->f_prj_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->f_prj_user(i), output);
  }

  // repeated .pb_prj_t_user f_prj_join_user = 14;
  for (int i = 0; i < this->f_prj_join_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->f_prj_join_user(i), output);
  }

  // optional .pb_clt_t_version f_version = 15;
  if (has_f_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->f_version(), output);
  }

  // optional .pb_prj_t_prj_weather f_prj_weather = 16;
  if (has_f_prj_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->f_prj_weather(), output);
  }

  // optional .pb_prj_t_task_details f_task_details = 17;
  if (has_f_task_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->f_task_details(), output);
  }

  // optional .pb_prj_t_task_list f_task_list = 18;
  if (has_f_task_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->f_task_list(), output);
  }

  // optional .pb_prj_t_file f_prj_files = 19;
  if (has_f_prj_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->f_prj_files(), output);
  }

  // optional int32 pb_clt_t_user_code = 20;
  if (has_pb_clt_t_user_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->pb_clt_t_user_code(), output);
  }

  // optional .pb_user_t_collection_list f_collection = 21;
  if (has_f_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->f_collection(), output);
  }

  // optional int32 f_upstream_time = 22;
  if (has_f_upstream_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->f_upstream_time(), output);
  }

  // optional .pb_clt_t_group f_prj_record_group = 23;
  if (has_f_prj_record_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->f_prj_record_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_clt_t_user)
}

::google::protobuf::uint8* pb_clt_t_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_clt_t_user)
  // optional .pb_user_t_info f_info = 1;
  if (has_f_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_info(), target);
  }

  // optional .pb_clt_t_friend f_friend_list = 2;
  if (has_f_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_friend_list(), target);
  }

  // optional .pb_clt_t_friend f_search_friend_list = 3;
  if (has_f_search_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_search_friend_list(), target);
  }

  // optional .pb_clt_t_friend f_validation_friend_list = 4;
  if (has_f_validation_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->f_validation_friend_list(), target);
  }

  // optional .pb_clt_t_group f_im_group = 5;
  if (has_f_im_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_im_group(), target);
  }

  // optional .pb_user_t_info f_friend_info = 6;
  if (has_f_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_friend_info(), target);
  }

  // optional .pb_im_t_msg f_im_msg = 7;
  if (has_f_im_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_im_msg(), target);
  }

  // optional .pb_clt_t_group_details f_im_group_details = 8;
  if (has_f_im_group_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_im_group_details(), target);
  }

  // optional .pb_prj_t_prj f_prj_list = 9;
  if (has_f_prj_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->f_prj_list(), target);
  }

  // optional .pb_prj_t_details f_prj_details = 10;
  if (has_f_prj_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f_prj_details(), target);
  }

  // optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 11;
  if (has_f_n_recommend_friend_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_n_recommend_friend_list(), target);
  }

  // optional .pb_prj_t_recommend_prj f_recommend_prj_list = 12;
  if (has_f_recommend_prj_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->f_recommend_prj_list(), target);
  }

  // repeated .pb_prj_t_user f_prj_user = 13;
  for (int i = 0; i < this->f_prj_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->f_prj_user(i), target);
  }

  // repeated .pb_prj_t_user f_prj_join_user = 14;
  for (int i = 0; i < this->f_prj_join_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->f_prj_join_user(i), target);
  }

  // optional .pb_clt_t_version f_version = 15;
  if (has_f_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->f_version(), target);
  }

  // optional .pb_prj_t_prj_weather f_prj_weather = 16;
  if (has_f_prj_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->f_prj_weather(), target);
  }

  // optional .pb_prj_t_task_details f_task_details = 17;
  if (has_f_task_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->f_task_details(), target);
  }

  // optional .pb_prj_t_task_list f_task_list = 18;
  if (has_f_task_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->f_task_list(), target);
  }

  // optional .pb_prj_t_file f_prj_files = 19;
  if (has_f_prj_files()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->f_prj_files(), target);
  }

  // optional int32 pb_clt_t_user_code = 20;
  if (has_pb_clt_t_user_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->pb_clt_t_user_code(), target);
  }

  // optional .pb_user_t_collection_list f_collection = 21;
  if (has_f_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->f_collection(), target);
  }

  // optional int32 f_upstream_time = 22;
  if (has_f_upstream_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->f_upstream_time(), target);
  }

  // optional .pb_clt_t_group f_prj_record_group = 23;
  if (has_f_prj_record_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->f_prj_record_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_clt_t_user)
  return target;
}

int pb_clt_t_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_user_t_info f_info = 1;
    if (has_f_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_info());
    }

    // optional .pb_clt_t_friend f_friend_list = 2;
    if (has_f_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_friend_list());
    }

    // optional .pb_clt_t_friend f_search_friend_list = 3;
    if (has_f_search_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_search_friend_list());
    }

    // optional .pb_clt_t_friend f_validation_friend_list = 4;
    if (has_f_validation_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_validation_friend_list());
    }

    // optional .pb_clt_t_group f_im_group = 5;
    if (has_f_im_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_im_group());
    }

    // optional .pb_user_t_info f_friend_info = 6;
    if (has_f_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_friend_info());
    }

    // optional .pb_im_t_msg f_im_msg = 7;
    if (has_f_im_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_im_msg());
    }

    // optional .pb_clt_t_group_details f_im_group_details = 8;
    if (has_f_im_group_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_im_group_details());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb_prj_t_prj f_prj_list = 9;
    if (has_f_prj_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_list());
    }

    // optional .pb_prj_t_details f_prj_details = 10;
    if (has_f_prj_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_details());
    }

    // optional .pb_clt_t_recommend_friend f_n_recommend_friend_list = 11;
    if (has_f_n_recommend_friend_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_n_recommend_friend_list());
    }

    // optional .pb_prj_t_recommend_prj f_recommend_prj_list = 12;
    if (has_f_recommend_prj_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_recommend_prj_list());
    }

    // optional .pb_clt_t_version f_version = 15;
    if (has_f_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_version());
    }

    // optional .pb_prj_t_prj_weather f_prj_weather = 16;
    if (has_f_prj_weather()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_weather());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb_prj_t_task_details f_task_details = 17;
    if (has_f_task_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task_details());
    }

    // optional .pb_prj_t_task_list f_task_list = 18;
    if (has_f_task_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task_list());
    }

    // optional .pb_prj_t_file f_prj_files = 19;
    if (has_f_prj_files()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_files());
    }

    // optional int32 pb_clt_t_user_code = 20;
    if (has_pb_clt_t_user_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pb_clt_t_user_code());
    }

    // optional .pb_user_t_collection_list f_collection = 21;
    if (has_f_collection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_collection());
    }

    // optional int32 f_upstream_time = 22;
    if (has_f_upstream_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_upstream_time());
    }

    // optional .pb_clt_t_group f_prj_record_group = 23;
    if (has_f_prj_record_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_record_group());
    }

  }
  // repeated .pb_prj_t_user f_prj_user = 13;
  total_size += 1 * this->f_prj_user_size();
  for (int i = 0; i < this->f_prj_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_user(i));
  }

  // repeated .pb_prj_t_user f_prj_join_user = 14;
  total_size += 1 * this->f_prj_join_user_size();
  for (int i = 0; i < this->f_prj_join_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_join_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_clt_t_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_clt_t_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_clt_t_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_clt_t_user::MergeFrom(const pb_clt_t_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_prj_user_.MergeFrom(from.f_prj_user_);
  f_prj_join_user_.MergeFrom(from.f_prj_join_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_info()) {
      mutable_f_info()->::pb_user_t_info::MergeFrom(from.f_info());
    }
    if (from.has_f_friend_list()) {
      mutable_f_friend_list()->::pb_clt_t_friend::MergeFrom(from.f_friend_list());
    }
    if (from.has_f_search_friend_list()) {
      mutable_f_search_friend_list()->::pb_clt_t_friend::MergeFrom(from.f_search_friend_list());
    }
    if (from.has_f_validation_friend_list()) {
      mutable_f_validation_friend_list()->::pb_clt_t_friend::MergeFrom(from.f_validation_friend_list());
    }
    if (from.has_f_im_group()) {
      mutable_f_im_group()->::pb_clt_t_group::MergeFrom(from.f_im_group());
    }
    if (from.has_f_friend_info()) {
      mutable_f_friend_info()->::pb_user_t_info::MergeFrom(from.f_friend_info());
    }
    if (from.has_f_im_msg()) {
      mutable_f_im_msg()->::pb_im_t_msg::MergeFrom(from.f_im_msg());
    }
    if (from.has_f_im_group_details()) {
      mutable_f_im_group_details()->::pb_clt_t_group_details::MergeFrom(from.f_im_group_details());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_prj_list()) {
      mutable_f_prj_list()->::pb_prj_t_prj::MergeFrom(from.f_prj_list());
    }
    if (from.has_f_prj_details()) {
      mutable_f_prj_details()->::pb_prj_t_details::MergeFrom(from.f_prj_details());
    }
    if (from.has_f_n_recommend_friend_list()) {
      mutable_f_n_recommend_friend_list()->::pb_clt_t_recommend_friend::MergeFrom(from.f_n_recommend_friend_list());
    }
    if (from.has_f_recommend_prj_list()) {
      mutable_f_recommend_prj_list()->::pb_prj_t_recommend_prj::MergeFrom(from.f_recommend_prj_list());
    }
    if (from.has_f_version()) {
      mutable_f_version()->::pb_clt_t_version::MergeFrom(from.f_version());
    }
    if (from.has_f_prj_weather()) {
      mutable_f_prj_weather()->::pb_prj_t_prj_weather::MergeFrom(from.f_prj_weather());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_task_details()) {
      mutable_f_task_details()->::pb_prj_t_task_details::MergeFrom(from.f_task_details());
    }
    if (from.has_f_task_list()) {
      mutable_f_task_list()->::pb_prj_t_task_list::MergeFrom(from.f_task_list());
    }
    if (from.has_f_prj_files()) {
      mutable_f_prj_files()->::pb_prj_t_file::MergeFrom(from.f_prj_files());
    }
    if (from.has_pb_clt_t_user_code()) {
      set_pb_clt_t_user_code(from.pb_clt_t_user_code());
    }
    if (from.has_f_collection()) {
      mutable_f_collection()->::pb_user_t_collection_list::MergeFrom(from.f_collection());
    }
    if (from.has_f_upstream_time()) {
      set_f_upstream_time(from.f_upstream_time());
    }
    if (from.has_f_prj_record_group()) {
      mutable_f_prj_record_group()->::pb_clt_t_group::MergeFrom(from.f_prj_record_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_clt_t_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_clt_t_user::CopyFrom(const pb_clt_t_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_clt_t_user::IsInitialized() const {

  return true;
}

void pb_clt_t_user::Swap(pb_clt_t_user* other) {
  if (other != this) {
    std::swap(f_info_, other->f_info_);
    std::swap(f_friend_list_, other->f_friend_list_);
    std::swap(f_search_friend_list_, other->f_search_friend_list_);
    std::swap(f_validation_friend_list_, other->f_validation_friend_list_);
    std::swap(f_im_group_, other->f_im_group_);
    std::swap(f_friend_info_, other->f_friend_info_);
    std::swap(f_im_msg_, other->f_im_msg_);
    std::swap(f_im_group_details_, other->f_im_group_details_);
    std::swap(f_prj_list_, other->f_prj_list_);
    std::swap(f_prj_details_, other->f_prj_details_);
    std::swap(f_n_recommend_friend_list_, other->f_n_recommend_friend_list_);
    std::swap(f_recommend_prj_list_, other->f_recommend_prj_list_);
    f_prj_user_.Swap(&other->f_prj_user_);
    f_prj_join_user_.Swap(&other->f_prj_join_user_);
    std::swap(f_version_, other->f_version_);
    std::swap(f_prj_weather_, other->f_prj_weather_);
    std::swap(f_task_details_, other->f_task_details_);
    std::swap(f_task_list_, other->f_task_list_);
    std::swap(f_prj_files_, other->f_prj_files_);
    std::swap(pb_clt_t_user_code_, other->pb_clt_t_user_code_);
    std::swap(f_collection_, other->f_collection_);
    std::swap(f_upstream_time_, other->f_upstream_time_);
    std::swap(f_prj_record_group_, other->f_prj_record_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_clt_t_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_clt_t_user_descriptor_;
  metadata.reflection = pb_clt_t_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_attach::kFAttachNameFieldNumber;
const int pb_im_t_msg_attach::kFAttachTypeFieldNumber;
const int pb_im_t_msg_attach::kFAttachUrlFieldNumber;
const int pb_im_t_msg_attach::kFAttachSizeFieldNumber;
const int pb_im_t_msg_attach::kFAttachPlaytimeFieldNumber;
const int pb_im_t_msg_attach::kFAttachUploadtimeFieldNumber;
const int pb_im_t_msg_attach::kFAttachNameHlFieldNumber;
const int pb_im_t_msg_attach::kFAttachIdFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_attach::pb_im_t_msg_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_attach)
}

void pb_im_t_msg_attach::InitAsDefaultInstance() {
}

pb_im_t_msg_attach::pb_im_t_msg_attach(const pb_im_t_msg_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_attach)
}

void pb_im_t_msg_attach::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_attach_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_type_ = 0;
  f_attach_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_size_ = 0;
  f_attach_playtime_ = 0;
  f_attach_uploadtime_ = 0;
  f_attach_name_hl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_attach_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_attach::~pb_im_t_msg_attach() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_attach)
  SharedDtor();
}

void pb_im_t_msg_attach::SharedDtor() {
  if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_;
  }
  if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_url_;
  }
  if (f_attach_name_hl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_name_hl_;
  }
  if (f_attach_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_attach_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_attach_descriptor_;
}

const pb_im_t_msg_attach& pb_im_t_msg_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_attach* pb_im_t_msg_attach::default_instance_ = NULL;

pb_im_t_msg_attach* pb_im_t_msg_attach::New() const {
  return new pb_im_t_msg_attach;
}

void pb_im_t_msg_attach::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_im_t_msg_attach*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_attach_type_, f_attach_uploadtime_);
    if (has_f_attach_name()) {
      if (f_attach_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_name_->clear();
      }
    }
    if (has_f_attach_url()) {
      if (f_attach_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_url_->clear();
      }
    }
    if (has_f_attach_name_hl()) {
      if (f_attach_name_hl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_name_hl_->clear();
      }
    }
    if (has_f_attach_id()) {
      if (f_attach_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_attach_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_attach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_attach_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_name().data(), this->f_attach_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_attach_type;
        break;
      }

      // optional int32 f_attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_type_)));
          set_has_f_attach_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_attach_url;
        break;
      }

      // optional string f_attach_url = 3;
      case 3: {
        if (tag == 26) {
         parse_f_attach_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_url().data(), this->f_attach_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_attach_size;
        break;
      }

      // optional int32 f_attach_size = 4;
      case 4: {
        if (tag == 32) {
         parse_f_attach_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_size_)));
          set_has_f_attach_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_attach_playtime;
        break;
      }

      // optional int32 f_attach_playtime = 5;
      case 5: {
        if (tag == 40) {
         parse_f_attach_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_playtime_)));
          set_has_f_attach_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_attach_uploadtime;
        break;
      }

      // optional int32 f_attach_uploadtime = 6;
      case 6: {
        if (tag == 48) {
         parse_f_attach_uploadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_uploadtime_)));
          set_has_f_attach_uploadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_attach_name_hl;
        break;
      }

      // optional string f_attach_name_hl = 7;
      case 7: {
        if (tag == 58) {
         parse_f_attach_name_hl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_name_hl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_name_hl().data(), this->f_attach_name_hl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_name_hl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_attach_id;
        break;
      }

      // optional string f_attach_id = 8;
      case 8: {
        if (tag == 66) {
         parse_f_attach_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_attach_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_attach_id().data(), this->f_attach_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_attach_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_attach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_attach)
  return false;
#undef DO_
}

void pb_im_t_msg_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_attach_name(), output);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_attach_type(), output);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_attach_url(), output);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_attach_size(), output);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_attach_playtime(), output);
  }

  // optional int32 f_attach_uploadtime = 6;
  if (has_f_attach_uploadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_attach_uploadtime(), output);
  }

  // optional string f_attach_name_hl = 7;
  if (has_f_attach_name_hl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name_hl().data(), this->f_attach_name_hl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name_hl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_attach_name_hl(), output);
  }

  // optional string f_attach_id = 8;
  if (has_f_attach_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_id().data(), this->f_attach_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_attach_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_attach)
}

::google::protobuf::uint8* pb_im_t_msg_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_attach)
  // optional string f_attach_name = 1;
  if (has_f_attach_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name().data(), this->f_attach_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_attach_name(), target);
  }

  // optional int32 f_attach_type = 2;
  if (has_f_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_attach_type(), target);
  }

  // optional string f_attach_url = 3;
  if (has_f_attach_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_url().data(), this->f_attach_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_attach_url(), target);
  }

  // optional int32 f_attach_size = 4;
  if (has_f_attach_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_attach_size(), target);
  }

  // optional int32 f_attach_playtime = 5;
  if (has_f_attach_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_attach_playtime(), target);
  }

  // optional int32 f_attach_uploadtime = 6;
  if (has_f_attach_uploadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_attach_uploadtime(), target);
  }

  // optional string f_attach_name_hl = 7;
  if (has_f_attach_name_hl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_name_hl().data(), this->f_attach_name_hl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_name_hl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_attach_name_hl(), target);
  }

  // optional string f_attach_id = 8;
  if (has_f_attach_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_attach_id().data(), this->f_attach_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_attach_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_attach_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_attach)
  return target;
}

int pb_im_t_msg_attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_attach_name = 1;
    if (has_f_attach_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_name());
    }

    // optional int32 f_attach_type = 2;
    if (has_f_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_type());
    }

    // optional string f_attach_url = 3;
    if (has_f_attach_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_url());
    }

    // optional int32 f_attach_size = 4;
    if (has_f_attach_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_size());
    }

    // optional int32 f_attach_playtime = 5;
    if (has_f_attach_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_playtime());
    }

    // optional int32 f_attach_uploadtime = 6;
    if (has_f_attach_uploadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_uploadtime());
    }

    // optional string f_attach_name_hl = 7;
    if (has_f_attach_name_hl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_name_hl());
    }

    // optional string f_attach_id = 8;
    if (has_f_attach_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_attach_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_attach::MergeFrom(const pb_im_t_msg_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_attach_name()) {
      set_f_attach_name(from.f_attach_name());
    }
    if (from.has_f_attach_type()) {
      set_f_attach_type(from.f_attach_type());
    }
    if (from.has_f_attach_url()) {
      set_f_attach_url(from.f_attach_url());
    }
    if (from.has_f_attach_size()) {
      set_f_attach_size(from.f_attach_size());
    }
    if (from.has_f_attach_playtime()) {
      set_f_attach_playtime(from.f_attach_playtime());
    }
    if (from.has_f_attach_uploadtime()) {
      set_f_attach_uploadtime(from.f_attach_uploadtime());
    }
    if (from.has_f_attach_name_hl()) {
      set_f_attach_name_hl(from.f_attach_name_hl());
    }
    if (from.has_f_attach_id()) {
      set_f_attach_id(from.f_attach_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_attach::CopyFrom(const pb_im_t_msg_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_attach::IsInitialized() const {

  return true;
}

void pb_im_t_msg_attach::Swap(pb_im_t_msg_attach* other) {
  if (other != this) {
    std::swap(f_attach_name_, other->f_attach_name_);
    std::swap(f_attach_type_, other->f_attach_type_);
    std::swap(f_attach_url_, other->f_attach_url_);
    std::swap(f_attach_size_, other->f_attach_size_);
    std::swap(f_attach_playtime_, other->f_attach_playtime_);
    std::swap(f_attach_uploadtime_, other->f_attach_uploadtime_);
    std::swap(f_attach_name_hl_, other->f_attach_name_hl_);
    std::swap(f_attach_id_, other->f_attach_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_attach_descriptor_;
  metadata.reflection = pb_im_t_msg_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_task::kFTaskIdFieldNumber;
const int pb_im_t_msg_task::kFPrjIdFieldNumber;
const int pb_im_t_msg_task::kFTaskTypeFieldNumber;
const int pb_im_t_msg_task::kFTaskDescFieldNumber;
const int pb_im_t_msg_task::kFTaskDescTypeFieldNumber;
const int pb_im_t_msg_task::kFPositionFieldNumber;
const int pb_im_t_msg_task::kFReceiverUinFieldNumber;
const int pb_im_t_msg_task::kFOperateTypeFieldNumber;
const int pb_im_t_msg_task::kFAssignDescFieldNumber;
const int pb_im_t_msg_task::kFTaskEndFieldNumber;
const int pb_im_t_msg_task::kFTaskStatusFieldNumber;
const int pb_im_t_msg_task::kFOperateStatusFieldNumber;
const int pb_im_t_msg_task::kFOperateUinFieldNumber;
const int pb_im_t_msg_task::kFAttachPlaytimeFieldNumber;
const int pb_im_t_msg_task::kFAttachCountFieldNumber;
const int pb_im_t_msg_task::kFJobTypeFieldNumber;
const int pb_im_t_msg_task::kFLastReportFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_task::pb_im_t_msg_task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_task)
}

void pb_im_t_msg_task::InitAsDefaultInstance() {
  f_last_report_ = const_cast< ::pb_prj_t_task_report*>(&::pb_prj_t_task_report::default_instance());
}

pb_im_t_msg_task::pb_im_t_msg_task(const pb_im_t_msg_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_task)
}

void pb_im_t_msg_task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_type_ = 0;
  f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_type_ = 0;
  f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_operate_type_ = 0;
  f_assign_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_end_ = 0;
  f_task_status_ = 0;
  f_operate_status_ = 0;
  f_attach_playtime_ = 0;
  f_attach_count_ = 0;
  f_job_type_ = 0;
  f_last_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_task::~pb_im_t_msg_task() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_task)
  SharedDtor();
}

void pb_im_t_msg_task::SharedDtor() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (f_assign_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_assign_desc_;
  }
  if (this != default_instance_) {
    delete f_last_report_;
  }
}

void pb_im_t_msg_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_task_descriptor_;
}

const pb_im_t_msg_task& pb_im_t_msg_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_task* pb_im_t_msg_task::default_instance_ = NULL;

pb_im_t_msg_task* pb_im_t_msg_task::New() const {
  return new pb_im_t_msg_task;
}

void pb_im_t_msg_task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_im_t_msg_task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(f_task_type_, f_task_desc_type_);
    if (has_f_task_id()) {
      if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_id_->clear();
      }
    }
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_task_desc()) {
      if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_desc_->clear();
      }
    }
    if (has_f_position()) {
      if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_position_->clear();
      }
    }
    f_operate_type_ = 0;
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(f_task_end_, f_operate_status_);
    ZR_(f_attach_playtime_, f_attach_count_);
    if (has_f_assign_desc()) {
      if (f_assign_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_assign_desc_->clear();
      }
    }
    f_job_type_ = 0;
  }
  if (has_f_last_report()) {
    if (f_last_report_ != NULL) f_last_report_->::pb_prj_t_task_report::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_receiver_uin_.Clear();
  f_operate_uin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_id().data(), this->f_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prj_id;
        break;
      }

      // optional string f_prj_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_task_type;
        break;
      }

      // optional int32 f_task_type = 3;
      case 3: {
        if (tag == 24) {
         parse_f_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_type_)));
          set_has_f_task_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_task_desc;
        break;
      }

      // optional string f_task_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_f_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_desc().data(), this->f_task_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_task_desc_type;
        break;
      }

      // optional int32 f_task_desc_type = 5;
      case 5: {
        if (tag == 40) {
         parse_f_task_desc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_desc_type_)));
          set_has_f_task_desc_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_position;
        break;
      }

      // optional string f_position = 6;
      case 6: {
        if (tag == 50) {
         parse_f_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_position().data(), this->f_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_receiver_uin;
        break;
      }

      // repeated int32 f_receiver_uin = 7;
      case 7: {
        if (tag == 56) {
         parse_f_receiver_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_f_receiver_uin())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_f_receiver_uin())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_receiver_uin;
        if (input->ExpectTag(64)) goto parse_f_operate_type;
        break;
      }

      // optional int32 f_operate_type = 8;
      case 8: {
        if (tag == 64) {
         parse_f_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_operate_type_)));
          set_has_f_operate_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_assign_desc;
        break;
      }

      // optional string f_assign_desc = 9;
      case 9: {
        if (tag == 74) {
         parse_f_assign_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_assign_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_assign_desc().data(), this->f_assign_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_assign_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_task_end;
        break;
      }

      // optional int32 f_task_end = 10;
      case 10: {
        if (tag == 80) {
         parse_f_task_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_end_)));
          set_has_f_task_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_f_task_status;
        break;
      }

      // optional int32 f_task_status = 11;
      case 11: {
        if (tag == 88) {
         parse_f_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_status_)));
          set_has_f_task_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_f_operate_status;
        break;
      }

      // optional int32 f_operate_status = 12;
      case 12: {
        if (tag == 96) {
         parse_f_operate_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_operate_status_)));
          set_has_f_operate_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_f_operate_uin;
        break;
      }

      // repeated int32 f_operate_uin = 13;
      case 13: {
        if (tag == 104) {
         parse_f_operate_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_f_operate_uin())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_f_operate_uin())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_f_operate_uin;
        if (input->ExpectTag(112)) goto parse_f_attach_playtime;
        break;
      }

      // optional int32 f_attach_playtime = 14;
      case 14: {
        if (tag == 112) {
         parse_f_attach_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_playtime_)));
          set_has_f_attach_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_f_attach_count;
        break;
      }

      // optional int32 f_attach_count = 15;
      case 15: {
        if (tag == 120) {
         parse_f_attach_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_attach_count_)));
          set_has_f_attach_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_f_job_type;
        break;
      }

      // optional int32 f_job_type = 16;
      case 16: {
        if (tag == 128) {
         parse_f_job_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_job_type_)));
          set_has_f_job_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_f_last_report;
        break;
      }

      // optional .pb_prj_t_task_report f_last_report = 17;
      case 17: {
        if (tag == 138) {
         parse_f_last_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_last_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_task)
  return false;
#undef DO_
}

void pb_im_t_msg_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_task_id(), output);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_prj_id(), output);
  }

  // optional int32 f_task_type = 3;
  if (has_f_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_task_type(), output);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_task_desc(), output);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_task_desc_type(), output);
  }

  // optional string f_position = 6;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_position(), output);
  }

  // repeated int32 f_receiver_uin = 7;
  for (int i = 0; i < this->f_receiver_uin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->f_receiver_uin(i), output);
  }

  // optional int32 f_operate_type = 8;
  if (has_f_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->f_operate_type(), output);
  }

  // optional string f_assign_desc = 9;
  if (has_f_assign_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_assign_desc().data(), this->f_assign_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_assign_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_assign_desc(), output);
  }

  // optional int32 f_task_end = 10;
  if (has_f_task_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->f_task_end(), output);
  }

  // optional int32 f_task_status = 11;
  if (has_f_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->f_task_status(), output);
  }

  // optional int32 f_operate_status = 12;
  if (has_f_operate_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_operate_status(), output);
  }

  // repeated int32 f_operate_uin = 13;
  for (int i = 0; i < this->f_operate_uin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->f_operate_uin(i), output);
  }

  // optional int32 f_attach_playtime = 14;
  if (has_f_attach_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->f_attach_playtime(), output);
  }

  // optional int32 f_attach_count = 15;
  if (has_f_attach_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->f_attach_count(), output);
  }

  // optional int32 f_job_type = 16;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->f_job_type(), output);
  }

  // optional .pb_prj_t_task_report f_last_report = 17;
  if (has_f_last_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->f_last_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_task)
}

::google::protobuf::uint8* pb_im_t_msg_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_task_id(), target);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_prj_id(), target);
  }

  // optional int32 f_task_type = 3;
  if (has_f_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_task_type(), target);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_task_desc(), target);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_task_desc_type(), target);
  }

  // optional string f_position = 6;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_position(), target);
  }

  // repeated int32 f_receiver_uin = 7;
  for (int i = 0; i < this->f_receiver_uin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->f_receiver_uin(i), target);
  }

  // optional int32 f_operate_type = 8;
  if (has_f_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->f_operate_type(), target);
  }

  // optional string f_assign_desc = 9;
  if (has_f_assign_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_assign_desc().data(), this->f_assign_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_assign_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_assign_desc(), target);
  }

  // optional int32 f_task_end = 10;
  if (has_f_task_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->f_task_end(), target);
  }

  // optional int32 f_task_status = 11;
  if (has_f_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->f_task_status(), target);
  }

  // optional int32 f_operate_status = 12;
  if (has_f_operate_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_operate_status(), target);
  }

  // repeated int32 f_operate_uin = 13;
  for (int i = 0; i < this->f_operate_uin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->f_operate_uin(i), target);
  }

  // optional int32 f_attach_playtime = 14;
  if (has_f_attach_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->f_attach_playtime(), target);
  }

  // optional int32 f_attach_count = 15;
  if (has_f_attach_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->f_attach_count(), target);
  }

  // optional int32 f_job_type = 16;
  if (has_f_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->f_job_type(), target);
  }

  // optional .pb_prj_t_task_report f_last_report = 17;
  if (has_f_last_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->f_last_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_task)
  return target;
}

int pb_im_t_msg_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_task_id = 1;
    if (has_f_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_id());
    }

    // optional string f_prj_id = 2;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional int32 f_task_type = 3;
    if (has_f_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_type());
    }

    // optional string f_task_desc = 4;
    if (has_f_task_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_desc());
    }

    // optional int32 f_task_desc_type = 5;
    if (has_f_task_desc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_desc_type());
    }

    // optional string f_position = 6;
    if (has_f_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_position());
    }

    // optional int32 f_operate_type = 8;
    if (has_f_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_operate_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_assign_desc = 9;
    if (has_f_assign_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_assign_desc());
    }

    // optional int32 f_task_end = 10;
    if (has_f_task_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_end());
    }

    // optional int32 f_task_status = 11;
    if (has_f_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_status());
    }

    // optional int32 f_operate_status = 12;
    if (has_f_operate_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_operate_status());
    }

    // optional int32 f_attach_playtime = 14;
    if (has_f_attach_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_playtime());
    }

    // optional int32 f_attach_count = 15;
    if (has_f_attach_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_attach_count());
    }

    // optional int32 f_job_type = 16;
    if (has_f_job_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_job_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb_prj_t_task_report f_last_report = 17;
    if (has_f_last_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_last_report());
    }

  }
  // repeated int32 f_receiver_uin = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->f_receiver_uin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->f_receiver_uin(i));
    }
    total_size += 1 * this->f_receiver_uin_size() + data_size;
  }

  // repeated int32 f_operate_uin = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->f_operate_uin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->f_operate_uin(i));
    }
    total_size += 1 * this->f_operate_uin_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_task::MergeFrom(const pb_im_t_msg_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_receiver_uin_.MergeFrom(from.f_receiver_uin_);
  f_operate_uin_.MergeFrom(from.f_operate_uin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_task_id()) {
      set_f_task_id(from.f_task_id());
    }
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_task_type()) {
      set_f_task_type(from.f_task_type());
    }
    if (from.has_f_task_desc()) {
      set_f_task_desc(from.f_task_desc());
    }
    if (from.has_f_task_desc_type()) {
      set_f_task_desc_type(from.f_task_desc_type());
    }
    if (from.has_f_position()) {
      set_f_position(from.f_position());
    }
    if (from.has_f_operate_type()) {
      set_f_operate_type(from.f_operate_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_assign_desc()) {
      set_f_assign_desc(from.f_assign_desc());
    }
    if (from.has_f_task_end()) {
      set_f_task_end(from.f_task_end());
    }
    if (from.has_f_task_status()) {
      set_f_task_status(from.f_task_status());
    }
    if (from.has_f_operate_status()) {
      set_f_operate_status(from.f_operate_status());
    }
    if (from.has_f_attach_playtime()) {
      set_f_attach_playtime(from.f_attach_playtime());
    }
    if (from.has_f_attach_count()) {
      set_f_attach_count(from.f_attach_count());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_last_report()) {
      mutable_f_last_report()->::pb_prj_t_task_report::MergeFrom(from.f_last_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_task::CopyFrom(const pb_im_t_msg_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_task::IsInitialized() const {

  return true;
}

void pb_im_t_msg_task::Swap(pb_im_t_msg_task* other) {
  if (other != this) {
    std::swap(f_task_id_, other->f_task_id_);
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_task_type_, other->f_task_type_);
    std::swap(f_task_desc_, other->f_task_desc_);
    std::swap(f_task_desc_type_, other->f_task_desc_type_);
    std::swap(f_position_, other->f_position_);
    f_receiver_uin_.Swap(&other->f_receiver_uin_);
    std::swap(f_operate_type_, other->f_operate_type_);
    std::swap(f_assign_desc_, other->f_assign_desc_);
    std::swap(f_task_end_, other->f_task_end_);
    std::swap(f_task_status_, other->f_task_status_);
    std::swap(f_operate_status_, other->f_operate_status_);
    f_operate_uin_.Swap(&other->f_operate_uin_);
    std::swap(f_attach_playtime_, other->f_attach_playtime_);
    std::swap(f_attach_count_, other->f_attach_count_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_last_report_, other->f_last_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_task_descriptor_;
  metadata.reflection = pb_im_t_msg_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_weather::kFPrjIdFieldNumber;
const int pb_im_t_msg_weather::kFPrjNameFieldNumber;
const int pb_im_t_msg_weather::kFWeatherFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_weather::pb_im_t_msg_weather()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_weather)
}

void pb_im_t_msg_weather::InitAsDefaultInstance() {
  f_weather_ = const_cast< ::pb_prj_t_weather_base*>(&::pb_prj_t_weather_base::default_instance());
}

pb_im_t_msg_weather::pb_im_t_msg_weather(const pb_im_t_msg_weather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_weather)
}

void pb_im_t_msg_weather::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weather_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_weather::~pb_im_t_msg_weather() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_weather)
  SharedDtor();
}

void pb_im_t_msg_weather::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (this != default_instance_) {
    delete f_weather_;
  }
}

void pb_im_t_msg_weather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_weather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_weather_descriptor_;
}

const pb_im_t_msg_weather& pb_im_t_msg_weather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_weather* pb_im_t_msg_weather::default_instance_ = NULL;

pb_im_t_msg_weather* pb_im_t_msg_weather::New() const {
  return new pb_im_t_msg_weather;
}

void pb_im_t_msg_weather::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_prj_name()) {
      if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_name_->clear();
      }
    }
    if (has_f_weather()) {
      if (f_weather_ != NULL) f_weather_->::pb_prj_t_weather_base::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_weather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_weather)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prj_name;
        break;
      }

      // optional string f_prj_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prj_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_name().data(), this->f_prj_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_weather;
        break;
      }

      // optional .pb_prj_t_weather_base f_weather = 3;
      case 3: {
        if (tag == 26) {
         parse_f_weather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_weather()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_weather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_weather)
  return false;
#undef DO_
}

void pb_im_t_msg_weather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_weather)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // optional string f_prj_name = 2;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_prj_name(), output);
  }

  // optional .pb_prj_t_weather_base f_weather = 3;
  if (has_f_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_weather(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_weather)
}

::google::protobuf::uint8* pb_im_t_msg_weather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_weather)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // optional string f_prj_name = 2;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_prj_name(), target);
  }

  // optional .pb_prj_t_weather_base f_weather = 3;
  if (has_f_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_weather(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_weather)
  return target;
}

int pb_im_t_msg_weather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional string f_prj_name = 2;
    if (has_f_prj_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_name());
    }

    // optional .pb_prj_t_weather_base f_weather = 3;
    if (has_f_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_weather());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_weather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_weather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_weather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_weather::MergeFrom(const pb_im_t_msg_weather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_prj_name()) {
      set_f_prj_name(from.f_prj_name());
    }
    if (from.has_f_weather()) {
      mutable_f_weather()->::pb_prj_t_weather_base::MergeFrom(from.f_weather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_weather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_weather::CopyFrom(const pb_im_t_msg_weather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_weather::IsInitialized() const {

  return true;
}

void pb_im_t_msg_weather::Swap(pb_im_t_msg_weather* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_prj_name_, other->f_prj_name_);
    std::swap(f_weather_, other->f_weather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_weather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_weather_descriptor_;
  metadata.reflection = pb_im_t_msg_weather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_book::kFBookTypeFieldNumber;
const int pb_im_t_msg_book::kFBookIdFieldNumber;
const int pb_im_t_msg_book::kFBookNameFieldNumber;
const int pb_im_t_msg_book::kFBookCataIdFieldNumber;
const int pb_im_t_msg_book::kFBookCataInfoFieldNumber;
const int pb_im_t_msg_book::kFBookSubcataIdFieldNumber;
const int pb_im_t_msg_book::kFBookSubcataInfoFieldNumber;
const int pb_im_t_msg_book::kFBookInfoIdFieldNumber;
const int pb_im_t_msg_book::kFBookInfoFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_book::pb_im_t_msg_book()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_book)
}

void pb_im_t_msg_book::InitAsDefaultInstance() {
}

pb_im_t_msg_book::pb_im_t_msg_book(const pb_im_t_msg_book& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_book)
}

void pb_im_t_msg_book::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_book_type_ = 0;
  f_book_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_cata_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_cata_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_subcata_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_subcata_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_info_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_book_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_book::~pb_im_t_msg_book() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_book)
  SharedDtor();
}

void pb_im_t_msg_book::SharedDtor() {
  if (f_book_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_id_;
  }
  if (f_book_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_name_;
  }
  if (f_book_cata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_cata_id_;
  }
  if (f_book_cata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_cata_info_;
  }
  if (f_book_subcata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_subcata_id_;
  }
  if (f_book_subcata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_subcata_info_;
  }
  if (f_book_info_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_info_id_;
  }
  if (f_book_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_book_info_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg_book::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_book::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_book_descriptor_;
}

const pb_im_t_msg_book& pb_im_t_msg_book::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_book* pb_im_t_msg_book::default_instance_ = NULL;

pb_im_t_msg_book* pb_im_t_msg_book::New() const {
  return new pb_im_t_msg_book;
}

void pb_im_t_msg_book::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    f_book_type_ = 0;
    if (has_f_book_id()) {
      if (f_book_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_id_->clear();
      }
    }
    if (has_f_book_name()) {
      if (f_book_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_name_->clear();
      }
    }
    if (has_f_book_cata_id()) {
      if (f_book_cata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_cata_id_->clear();
      }
    }
    if (has_f_book_cata_info()) {
      if (f_book_cata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_cata_info_->clear();
      }
    }
    if (has_f_book_subcata_id()) {
      if (f_book_subcata_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_subcata_id_->clear();
      }
    }
    if (has_f_book_subcata_info()) {
      if (f_book_subcata_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_subcata_info_->clear();
      }
    }
    if (has_f_book_info_id()) {
      if (f_book_info_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_book_info_id_->clear();
      }
    }
  }
  if (has_f_book_info()) {
    if (f_book_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_book_info_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_book::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_book)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_book_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_book_type_)));
          set_has_f_book_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_book_id;
        break;
      }

      // optional string f_book_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_book_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_id().data(), this->f_book_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_book_name;
        break;
      }

      // optional string f_book_name = 3;
      case 3: {
        if (tag == 26) {
         parse_f_book_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_name().data(), this->f_book_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_book_cata_id;
        break;
      }

      // optional string f_book_cata_id = 4;
      case 4: {
        if (tag == 34) {
         parse_f_book_cata_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_cata_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_cata_id().data(), this->f_book_cata_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_cata_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_book_cata_info;
        break;
      }

      // optional string f_book_cata_info = 5;
      case 5: {
        if (tag == 42) {
         parse_f_book_cata_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_cata_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_cata_info().data(), this->f_book_cata_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_cata_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_book_subcata_id;
        break;
      }

      // optional string f_book_subcata_id = 6;
      case 6: {
        if (tag == 50) {
         parse_f_book_subcata_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_subcata_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_subcata_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_book_subcata_info;
        break;
      }

      // optional string f_book_subcata_info = 7;
      case 7: {
        if (tag == 58) {
         parse_f_book_subcata_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_subcata_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_subcata_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_book_info_id;
        break;
      }

      // optional string f_book_info_id = 8;
      case 8: {
        if (tag == 66) {
         parse_f_book_info_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_info_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_info_id().data(), this->f_book_info_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_info_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_book_info;
        break;
      }

      // optional string f_book_info = 9;
      case 9: {
        if (tag == 74) {
         parse_f_book_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_book_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_book_info().data(), this->f_book_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_book_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_book)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_book)
  return false;
#undef DO_
}

void pb_im_t_msg_book::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_book)
  // optional int32 f_book_type = 1;
  if (has_f_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_book_type(), output);
  }

  // optional string f_book_id = 2;
  if (has_f_book_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_id().data(), this->f_book_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_book_id(), output);
  }

  // optional string f_book_name = 3;
  if (has_f_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_name().data(), this->f_book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_book_name(), output);
  }

  // optional string f_book_cata_id = 4;
  if (has_f_book_cata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_id().data(), this->f_book_cata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_book_cata_id(), output);
  }

  // optional string f_book_cata_info = 5;
  if (has_f_book_cata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_info().data(), this->f_book_cata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_book_cata_info(), output);
  }

  // optional string f_book_subcata_id = 6;
  if (has_f_book_subcata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_book_subcata_id(), output);
  }

  // optional string f_book_subcata_info = 7;
  if (has_f_book_subcata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_book_subcata_info(), output);
  }

  // optional string f_book_info_id = 8;
  if (has_f_book_info_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info_id().data(), this->f_book_info_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_book_info_id(), output);
  }

  // optional string f_book_info = 9;
  if (has_f_book_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info().data(), this->f_book_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_book_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_book)
}

::google::protobuf::uint8* pb_im_t_msg_book::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_book)
  // optional int32 f_book_type = 1;
  if (has_f_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_book_type(), target);
  }

  // optional string f_book_id = 2;
  if (has_f_book_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_id().data(), this->f_book_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_book_id(), target);
  }

  // optional string f_book_name = 3;
  if (has_f_book_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_name().data(), this->f_book_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_book_name(), target);
  }

  // optional string f_book_cata_id = 4;
  if (has_f_book_cata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_id().data(), this->f_book_cata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_book_cata_id(), target);
  }

  // optional string f_book_cata_info = 5;
  if (has_f_book_cata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_cata_info().data(), this->f_book_cata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_cata_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_book_cata_info(), target);
  }

  // optional string f_book_subcata_id = 6;
  if (has_f_book_subcata_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_id().data(), this->f_book_subcata_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_book_subcata_id(), target);
  }

  // optional string f_book_subcata_info = 7;
  if (has_f_book_subcata_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_subcata_info().data(), this->f_book_subcata_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_subcata_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_book_subcata_info(), target);
  }

  // optional string f_book_info_id = 8;
  if (has_f_book_info_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info_id().data(), this->f_book_info_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_book_info_id(), target);
  }

  // optional string f_book_info = 9;
  if (has_f_book_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_book_info().data(), this->f_book_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_book_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_book_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_book)
  return target;
}

int pb_im_t_msg_book::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_book_type = 1;
    if (has_f_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_book_type());
    }

    // optional string f_book_id = 2;
    if (has_f_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_id());
    }

    // optional string f_book_name = 3;
    if (has_f_book_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_name());
    }

    // optional string f_book_cata_id = 4;
    if (has_f_book_cata_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_cata_id());
    }

    // optional string f_book_cata_info = 5;
    if (has_f_book_cata_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_cata_info());
    }

    // optional string f_book_subcata_id = 6;
    if (has_f_book_subcata_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_subcata_id());
    }

    // optional string f_book_subcata_info = 7;
    if (has_f_book_subcata_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_subcata_info());
    }

    // optional string f_book_info_id = 8;
    if (has_f_book_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_info_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_book_info = 9;
    if (has_f_book_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_book_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_book::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_book* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_book*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_book::MergeFrom(const pb_im_t_msg_book& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_book_type()) {
      set_f_book_type(from.f_book_type());
    }
    if (from.has_f_book_id()) {
      set_f_book_id(from.f_book_id());
    }
    if (from.has_f_book_name()) {
      set_f_book_name(from.f_book_name());
    }
    if (from.has_f_book_cata_id()) {
      set_f_book_cata_id(from.f_book_cata_id());
    }
    if (from.has_f_book_cata_info()) {
      set_f_book_cata_info(from.f_book_cata_info());
    }
    if (from.has_f_book_subcata_id()) {
      set_f_book_subcata_id(from.f_book_subcata_id());
    }
    if (from.has_f_book_subcata_info()) {
      set_f_book_subcata_info(from.f_book_subcata_info());
    }
    if (from.has_f_book_info_id()) {
      set_f_book_info_id(from.f_book_info_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_book_info()) {
      set_f_book_info(from.f_book_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_book::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_book::CopyFrom(const pb_im_t_msg_book& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_book::IsInitialized() const {

  return true;
}

void pb_im_t_msg_book::Swap(pb_im_t_msg_book* other) {
  if (other != this) {
    std::swap(f_book_type_, other->f_book_type_);
    std::swap(f_book_id_, other->f_book_id_);
    std::swap(f_book_name_, other->f_book_name_);
    std::swap(f_book_cata_id_, other->f_book_cata_id_);
    std::swap(f_book_cata_info_, other->f_book_cata_info_);
    std::swap(f_book_subcata_id_, other->f_book_subcata_id_);
    std::swap(f_book_subcata_info_, other->f_book_subcata_info_);
    std::swap(f_book_info_id_, other->f_book_info_id_);
    std::swap(f_book_info_, other->f_book_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_book::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_book_descriptor_;
  metadata.reflection = pb_im_t_msg_book_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_card::kFCardTitleFieldNumber;
const int pb_im_t_msg_card::kFCardImgFieldNumber;
const int pb_im_t_msg_card::kFCardDescFieldNumber;
const int pb_im_t_msg_card::kFCardAtctionFieldNumber;
const int pb_im_t_msg_card::kFCardFrominfoFieldNumber;
const int pb_im_t_msg_card::kFCardFinishFieldNumber;
const int pb_im_t_msg_card::kFCardFinishActionFieldNumber;
const int pb_im_t_msg_card::kFCardExtrcFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_card::pb_im_t_msg_card()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_card)
}

void pb_im_t_msg_card::InitAsDefaultInstance() {
}

pb_im_t_msg_card::pb_im_t_msg_card(const pb_im_t_msg_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_card)
}

void pb_im_t_msg_card::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_card_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_img_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_atction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_frominfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_finish_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_finish_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_card_extrc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_card::~pb_im_t_msg_card() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_card)
  SharedDtor();
}

void pb_im_t_msg_card::SharedDtor() {
  if (f_card_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_title_;
  }
  if (f_card_img_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_img_;
  }
  if (f_card_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_desc_;
  }
  if (f_card_atction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_atction_;
  }
  if (f_card_frominfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_frominfo_;
  }
  if (f_card_finish_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_finish_;
  }
  if (f_card_finish_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_finish_action_;
  }
  if (f_card_extrc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_card_extrc_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_card_descriptor_;
}

const pb_im_t_msg_card& pb_im_t_msg_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_card* pb_im_t_msg_card::default_instance_ = NULL;

pb_im_t_msg_card* pb_im_t_msg_card::New() const {
  return new pb_im_t_msg_card;
}

void pb_im_t_msg_card::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_f_card_title()) {
      if (f_card_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_title_->clear();
      }
    }
    if (has_f_card_img()) {
      if (f_card_img_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_img_->clear();
      }
    }
    if (has_f_card_desc()) {
      if (f_card_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_desc_->clear();
      }
    }
    if (has_f_card_atction()) {
      if (f_card_atction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_atction_->clear();
      }
    }
    if (has_f_card_frominfo()) {
      if (f_card_frominfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_frominfo_->clear();
      }
    }
    if (has_f_card_finish()) {
      if (f_card_finish_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_finish_->clear();
      }
    }
    if (has_f_card_finish_action()) {
      if (f_card_finish_action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_finish_action_->clear();
      }
    }
    if (has_f_card_extrc()) {
      if (f_card_extrc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_card_extrc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_card_title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_title().data(), this->f_card_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_card_img;
        break;
      }

      // optional string f_card_img = 2;
      case 2: {
        if (tag == 18) {
         parse_f_card_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_img()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_img().data(), this->f_card_img().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_img");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_card_desc;
        break;
      }

      // optional string f_card_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_f_card_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_desc().data(), this->f_card_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_card_atction;
        break;
      }

      // optional string f_card_atction = 4;
      case 4: {
        if (tag == 34) {
         parse_f_card_atction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_atction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_atction().data(), this->f_card_atction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_atction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_card_frominfo;
        break;
      }

      // optional string f_card_frominfo = 5;
      case 5: {
        if (tag == 42) {
         parse_f_card_frominfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_frominfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_frominfo().data(), this->f_card_frominfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_frominfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_card_finish;
        break;
      }

      // optional string f_card_finish = 6;
      case 6: {
        if (tag == 50) {
         parse_f_card_finish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_finish()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_finish().data(), this->f_card_finish().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_finish");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_card_finish_action;
        break;
      }

      // optional string f_card_finish_action = 7;
      case 7: {
        if (tag == 58) {
         parse_f_card_finish_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_finish_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_finish_action().data(), this->f_card_finish_action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_finish_action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_card_extrc;
        break;
      }

      // optional string f_card_extrc = 8;
      case 8: {
        if (tag == 66) {
         parse_f_card_extrc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_card_extrc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_card_extrc().data(), this->f_card_extrc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_card_extrc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_card)
  return false;
#undef DO_
}

void pb_im_t_msg_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_card)
  // optional string f_card_title = 1;
  if (has_f_card_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_title().data(), this->f_card_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_card_title(), output);
  }

  // optional string f_card_img = 2;
  if (has_f_card_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_img().data(), this->f_card_img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_card_img(), output);
  }

  // optional string f_card_desc = 3;
  if (has_f_card_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_desc().data(), this->f_card_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_card_desc(), output);
  }

  // optional string f_card_atction = 4;
  if (has_f_card_atction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_atction().data(), this->f_card_atction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_atction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_card_atction(), output);
  }

  // optional string f_card_frominfo = 5;
  if (has_f_card_frominfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_frominfo().data(), this->f_card_frominfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_frominfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_card_frominfo(), output);
  }

  // optional string f_card_finish = 6;
  if (has_f_card_finish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_finish().data(), this->f_card_finish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_finish");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_card_finish(), output);
  }

  // optional string f_card_finish_action = 7;
  if (has_f_card_finish_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_finish_action().data(), this->f_card_finish_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_finish_action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_card_finish_action(), output);
  }

  // optional string f_card_extrc = 8;
  if (has_f_card_extrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_extrc().data(), this->f_card_extrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_extrc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_card_extrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_card)
}

::google::protobuf::uint8* pb_im_t_msg_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_card)
  // optional string f_card_title = 1;
  if (has_f_card_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_title().data(), this->f_card_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_card_title(), target);
  }

  // optional string f_card_img = 2;
  if (has_f_card_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_img().data(), this->f_card_img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_card_img(), target);
  }

  // optional string f_card_desc = 3;
  if (has_f_card_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_desc().data(), this->f_card_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_card_desc(), target);
  }

  // optional string f_card_atction = 4;
  if (has_f_card_atction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_atction().data(), this->f_card_atction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_atction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_card_atction(), target);
  }

  // optional string f_card_frominfo = 5;
  if (has_f_card_frominfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_frominfo().data(), this->f_card_frominfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_frominfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_card_frominfo(), target);
  }

  // optional string f_card_finish = 6;
  if (has_f_card_finish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_finish().data(), this->f_card_finish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_finish");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_card_finish(), target);
  }

  // optional string f_card_finish_action = 7;
  if (has_f_card_finish_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_finish_action().data(), this->f_card_finish_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_finish_action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_card_finish_action(), target);
  }

  // optional string f_card_extrc = 8;
  if (has_f_card_extrc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_card_extrc().data(), this->f_card_extrc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_card_extrc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_card_extrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_card)
  return target;
}

int pb_im_t_msg_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_card_title = 1;
    if (has_f_card_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_title());
    }

    // optional string f_card_img = 2;
    if (has_f_card_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_img());
    }

    // optional string f_card_desc = 3;
    if (has_f_card_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_desc());
    }

    // optional string f_card_atction = 4;
    if (has_f_card_atction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_atction());
    }

    // optional string f_card_frominfo = 5;
    if (has_f_card_frominfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_frominfo());
    }

    // optional string f_card_finish = 6;
    if (has_f_card_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_finish());
    }

    // optional string f_card_finish_action = 7;
    if (has_f_card_finish_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_finish_action());
    }

    // optional string f_card_extrc = 8;
    if (has_f_card_extrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_card_extrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_card::MergeFrom(const pb_im_t_msg_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_card_title()) {
      set_f_card_title(from.f_card_title());
    }
    if (from.has_f_card_img()) {
      set_f_card_img(from.f_card_img());
    }
    if (from.has_f_card_desc()) {
      set_f_card_desc(from.f_card_desc());
    }
    if (from.has_f_card_atction()) {
      set_f_card_atction(from.f_card_atction());
    }
    if (from.has_f_card_frominfo()) {
      set_f_card_frominfo(from.f_card_frominfo());
    }
    if (from.has_f_card_finish()) {
      set_f_card_finish(from.f_card_finish());
    }
    if (from.has_f_card_finish_action()) {
      set_f_card_finish_action(from.f_card_finish_action());
    }
    if (from.has_f_card_extrc()) {
      set_f_card_extrc(from.f_card_extrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_card::CopyFrom(const pb_im_t_msg_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_card::IsInitialized() const {

  return true;
}

void pb_im_t_msg_card::Swap(pb_im_t_msg_card* other) {
  if (other != this) {
    std::swap(f_card_title_, other->f_card_title_);
    std::swap(f_card_img_, other->f_card_img_);
    std::swap(f_card_desc_, other->f_card_desc_);
    std::swap(f_card_atction_, other->f_card_atction_);
    std::swap(f_card_frominfo_, other->f_card_frominfo_);
    std::swap(f_card_finish_, other->f_card_finish_);
    std::swap(f_card_finish_action_, other->f_card_finish_action_);
    std::swap(f_card_extrc_, other->f_card_extrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_card_descriptor_;
  metadata.reflection = pb_im_t_msg_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_hotspot::kFHotspotIdFieldNumber;
const int pb_im_t_msg_hotspot::kFHotspotTitleFieldNumber;
const int pb_im_t_msg_hotspot::kFHotspotFirstImageFieldNumber;
const int pb_im_t_msg_hotspot::kFHotspotSourceSiteFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_hotspot::pb_im_t_msg_hotspot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_hotspot)
}

void pb_im_t_msg_hotspot::InitAsDefaultInstance() {
}

pb_im_t_msg_hotspot::pb_im_t_msg_hotspot(const pb_im_t_msg_hotspot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_hotspot)
}

void pb_im_t_msg_hotspot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_hotspot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_first_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_hotspot_source_site_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_hotspot::~pb_im_t_msg_hotspot() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_hotspot)
  SharedDtor();
}

void pb_im_t_msg_hotspot::SharedDtor() {
  if (f_hotspot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_id_;
  }
  if (f_hotspot_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_title_;
  }
  if (f_hotspot_first_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_first_image_;
  }
  if (f_hotspot_source_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hotspot_source_site_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg_hotspot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_hotspot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_hotspot_descriptor_;
}

const pb_im_t_msg_hotspot& pb_im_t_msg_hotspot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_hotspot* pb_im_t_msg_hotspot::default_instance_ = NULL;

pb_im_t_msg_hotspot* pb_im_t_msg_hotspot::New() const {
  return new pb_im_t_msg_hotspot;
}

void pb_im_t_msg_hotspot::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_f_hotspot_id()) {
      if (f_hotspot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_id_->clear();
      }
    }
    if (has_f_hotspot_title()) {
      if (f_hotspot_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_title_->clear();
      }
    }
    if (has_f_hotspot_first_image()) {
      if (f_hotspot_first_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_first_image_->clear();
      }
    }
    if (has_f_hotspot_source_site()) {
      if (f_hotspot_source_site_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hotspot_source_site_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_hotspot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_hotspot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_hotspot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_id().data(), this->f_hotspot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_hotspot_title;
        break;
      }

      // optional string f_hotspot_title = 2;
      case 2: {
        if (tag == 18) {
         parse_f_hotspot_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_title().data(), this->f_hotspot_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_hotspot_first_image;
        break;
      }

      // optional string f_hotspot_first_image = 3;
      case 3: {
        if (tag == 26) {
         parse_f_hotspot_first_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_first_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_first_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_hotspot_source_site;
        break;
      }

      // optional string f_hotspot_source_site = 4;
      case 4: {
        if (tag == 34) {
         parse_f_hotspot_source_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hotspot_source_site()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hotspot_source_site");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_hotspot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_hotspot)
  return false;
#undef DO_
}

void pb_im_t_msg_hotspot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_hotspot)
  // optional string f_hotspot_id = 1;
  if (has_f_hotspot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_id().data(), this->f_hotspot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_hotspot_id(), output);
  }

  // optional string f_hotspot_title = 2;
  if (has_f_hotspot_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_title().data(), this->f_hotspot_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_hotspot_title(), output);
  }

  // optional string f_hotspot_first_image = 3;
  if (has_f_hotspot_first_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_first_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_hotspot_first_image(), output);
  }

  // optional string f_hotspot_source_site = 4;
  if (has_f_hotspot_source_site()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_source_site");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_hotspot_source_site(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_hotspot)
}

::google::protobuf::uint8* pb_im_t_msg_hotspot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_hotspot)
  // optional string f_hotspot_id = 1;
  if (has_f_hotspot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_id().data(), this->f_hotspot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_hotspot_id(), target);
  }

  // optional string f_hotspot_title = 2;
  if (has_f_hotspot_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_title().data(), this->f_hotspot_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_hotspot_title(), target);
  }

  // optional string f_hotspot_first_image = 3;
  if (has_f_hotspot_first_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_first_image().data(), this->f_hotspot_first_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_first_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_hotspot_first_image(), target);
  }

  // optional string f_hotspot_source_site = 4;
  if (has_f_hotspot_source_site()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hotspot_source_site().data(), this->f_hotspot_source_site().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hotspot_source_site");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_hotspot_source_site(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_hotspot)
  return target;
}

int pb_im_t_msg_hotspot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_hotspot_id = 1;
    if (has_f_hotspot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_id());
    }

    // optional string f_hotspot_title = 2;
    if (has_f_hotspot_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_title());
    }

    // optional string f_hotspot_first_image = 3;
    if (has_f_hotspot_first_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_first_image());
    }

    // optional string f_hotspot_source_site = 4;
    if (has_f_hotspot_source_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hotspot_source_site());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_hotspot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_hotspot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_hotspot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_hotspot::MergeFrom(const pb_im_t_msg_hotspot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_hotspot_id()) {
      set_f_hotspot_id(from.f_hotspot_id());
    }
    if (from.has_f_hotspot_title()) {
      set_f_hotspot_title(from.f_hotspot_title());
    }
    if (from.has_f_hotspot_first_image()) {
      set_f_hotspot_first_image(from.f_hotspot_first_image());
    }
    if (from.has_f_hotspot_source_site()) {
      set_f_hotspot_source_site(from.f_hotspot_source_site());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_hotspot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_hotspot::CopyFrom(const pb_im_t_msg_hotspot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_hotspot::IsInitialized() const {

  return true;
}

void pb_im_t_msg_hotspot::Swap(pb_im_t_msg_hotspot* other) {
  if (other != this) {
    std::swap(f_hotspot_id_, other->f_hotspot_id_);
    std::swap(f_hotspot_title_, other->f_hotspot_title_);
    std::swap(f_hotspot_first_image_, other->f_hotspot_first_image_);
    std::swap(f_hotspot_source_site_, other->f_hotspot_source_site_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_hotspot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_hotspot_descriptor_;
  metadata.reflection = pb_im_t_msg_hotspot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_prj_record_base_user::kFUidFieldNumber;
const int pb_im_t_msg_prj_record_base_user::kFNameFieldNumber;
const int pb_im_t_msg_prj_record_base_user::kFJobTypeFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_prj_record_base_user::pb_im_t_msg_prj_record_base_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_prj_record_base_user)
}

void pb_im_t_msg_prj_record_base_user::InitAsDefaultInstance() {
}

pb_im_t_msg_prj_record_base_user::pb_im_t_msg_prj_record_base_user(const pb_im_t_msg_prj_record_base_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_prj_record_base_user)
}

void pb_im_t_msg_prj_record_base_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uid_ = 0;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_prj_record_base_user::~pb_im_t_msg_prj_record_base_user() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_prj_record_base_user)
  SharedDtor();
}

void pb_im_t_msg_prj_record_base_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg_prj_record_base_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_prj_record_base_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_prj_record_base_user_descriptor_;
}

const pb_im_t_msg_prj_record_base_user& pb_im_t_msg_prj_record_base_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_prj_record_base_user* pb_im_t_msg_prj_record_base_user::default_instance_ = NULL;

pb_im_t_msg_prj_record_base_user* pb_im_t_msg_prj_record_base_user::New() const {
  return new pb_im_t_msg_prj_record_base_user;
}

void pb_im_t_msg_prj_record_base_user::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    f_uid_ = 0;
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_prj_record_base_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_prj_record_base_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_uid_)));
          set_has_f_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 3;
      case 3: {
        if (tag == 26) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_prj_record_base_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_prj_record_base_user)
  return false;
#undef DO_
}

void pb_im_t_msg_prj_record_base_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_prj_record_base_user)
  // optional int32 f_uid = 1;
  if (has_f_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_uid(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_job_type = 3;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_job_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_prj_record_base_user)
}

::google::protobuf::uint8* pb_im_t_msg_prj_record_base_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_prj_record_base_user)
  // optional int32 f_uid = 1;
  if (has_f_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_uid(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_job_type = 3;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_job_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_prj_record_base_user)
  return target;
}

int pb_im_t_msg_prj_record_base_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_uid = 1;
    if (has_f_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_uid());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_job_type = 3;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_prj_record_base_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_prj_record_base_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_prj_record_base_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_prj_record_base_user::MergeFrom(const pb_im_t_msg_prj_record_base_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uid()) {
      set_f_uid(from.f_uid());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_prj_record_base_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_prj_record_base_user::CopyFrom(const pb_im_t_msg_prj_record_base_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_prj_record_base_user::IsInitialized() const {

  return true;
}

void pb_im_t_msg_prj_record_base_user::Swap(pb_im_t_msg_prj_record_base_user* other) {
  if (other != this) {
    std::swap(f_uid_, other->f_uid_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_prj_record_base_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_prj_record_base_user_descriptor_;
  metadata.reflection = pb_im_t_msg_prj_record_base_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_prj_record::kFPrjIdFieldNumber;
const int pb_im_t_msg_prj_record::kSenderFieldNumber;
const int pb_im_t_msg_prj_record::kReceiversFieldNumber;
const int pb_im_t_msg_prj_record::kRecordTypeFieldNumber;
const int pb_im_t_msg_prj_record::kFTaskInfoFieldNumber;
const int pb_im_t_msg_prj_record::kFPrjInfoFieldNumber;
const int pb_im_t_msg_prj_record::kFFilesFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_prj_record::pb_im_t_msg_prj_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_prj_record)
}

void pb_im_t_msg_prj_record::InitAsDefaultInstance() {
  sender_ = const_cast< ::pb_im_t_msg_prj_record_base_user*>(&::pb_im_t_msg_prj_record_base_user::default_instance());
  f_task_info_ = const_cast< ::pb_im_t_msg_task*>(&::pb_im_t_msg_task::default_instance());
  f_prj_info_ = const_cast< ::pb_prj_t_info*>(&::pb_prj_t_info::default_instance());
}

pb_im_t_msg_prj_record::pb_im_t_msg_prj_record(const pb_im_t_msg_prj_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_prj_record)
}

void pb_im_t_msg_prj_record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = NULL;
  record_type_ = 0;
  f_task_info_ = NULL;
  f_prj_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_prj_record::~pb_im_t_msg_prj_record() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_prj_record)
  SharedDtor();
}

void pb_im_t_msg_prj_record::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete f_task_info_;
    delete f_prj_info_;
  }
}

void pb_im_t_msg_prj_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_prj_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_prj_record_descriptor_;
}

const pb_im_t_msg_prj_record& pb_im_t_msg_prj_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_prj_record* pb_im_t_msg_prj_record::default_instance_ = NULL;

pb_im_t_msg_prj_record* pb_im_t_msg_prj_record::New() const {
  return new pb_im_t_msg_prj_record;
}

void pb_im_t_msg_prj_record::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != NULL) sender_->::pb_im_t_msg_prj_record_base_user::Clear();
    }
    record_type_ = 0;
    if (has_f_task_info()) {
      if (f_task_info_ != NULL) f_task_info_->::pb_im_t_msg_task::Clear();
    }
    if (has_f_prj_info()) {
      if (f_prj_info_ != NULL) f_prj_info_->::pb_prj_t_info::Clear();
    }
  }
  receivers_.Clear();
  f_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_prj_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_prj_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sender;
        break;
      }

      // optional .pb_im_t_msg_prj_record_base_user sender = 2;
      case 2: {
        if (tag == 18) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receivers;
        break;
      }

      // repeated .pb_im_t_msg_prj_record_base_user receivers = 3;
      case 3: {
        if (tag == 26) {
         parse_receivers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receivers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_receivers;
        if (input->ExpectTag(32)) goto parse_record_type;
        break;
      }

      // optional int32 record_type = 4;
      case 4: {
        if (tag == 32) {
         parse_record_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &record_type_)));
          set_has_record_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_task_info;
        break;
      }

      // optional .pb_im_t_msg_task f_task_info = 5;
      case 5: {
        if (tag == 42) {
         parse_f_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_prj_info;
        break;
      }

      // optional .pb_prj_t_info f_prj_info = 6;
      case 6: {
        if (tag == 50) {
         parse_f_prj_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_prj_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_files;
        break;
      }

      // repeated .pb_prj_t_base_file f_files = 7;
      case 7: {
        if (tag == 58) {
         parse_f_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_files;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_prj_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_prj_record)
  return false;
#undef DO_
}

void pb_im_t_msg_prj_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_prj_record)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // optional .pb_im_t_msg_prj_record_base_user sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sender(), output);
  }

  // repeated .pb_im_t_msg_prj_record_base_user receivers = 3;
  for (int i = 0; i < this->receivers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receivers(i), output);
  }

  // optional int32 record_type = 4;
  if (has_record_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->record_type(), output);
  }

  // optional .pb_im_t_msg_task f_task_info = 5;
  if (has_f_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_task_info(), output);
  }

  // optional .pb_prj_t_info f_prj_info = 6;
  if (has_f_prj_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_prj_info(), output);
  }

  // repeated .pb_prj_t_base_file f_files = 7;
  for (int i = 0; i < this->f_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_files(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_prj_record)
}

::google::protobuf::uint8* pb_im_t_msg_prj_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_prj_record)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // optional .pb_im_t_msg_prj_record_base_user sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sender(), target);
  }

  // repeated .pb_im_t_msg_prj_record_base_user receivers = 3;
  for (int i = 0; i < this->receivers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receivers(i), target);
  }

  // optional int32 record_type = 4;
  if (has_record_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->record_type(), target);
  }

  // optional .pb_im_t_msg_task f_task_info = 5;
  if (has_f_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_task_info(), target);
  }

  // optional .pb_prj_t_info f_prj_info = 6;
  if (has_f_prj_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_prj_info(), target);
  }

  // repeated .pb_prj_t_base_file f_files = 7;
  for (int i = 0; i < this->f_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_files(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_prj_record)
  return target;
}

int pb_im_t_msg_prj_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional .pb_im_t_msg_prj_record_base_user sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // optional int32 record_type = 4;
    if (has_record_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->record_type());
    }

    // optional .pb_im_t_msg_task f_task_info = 5;
    if (has_f_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task_info());
    }

    // optional .pb_prj_t_info f_prj_info = 6;
    if (has_f_prj_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_prj_info());
    }

  }
  // repeated .pb_im_t_msg_prj_record_base_user receivers = 3;
  total_size += 1 * this->receivers_size();
  for (int i = 0; i < this->receivers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receivers(i));
  }

  // repeated .pb_prj_t_base_file f_files = 7;
  total_size += 1 * this->f_files_size();
  for (int i = 0; i < this->f_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_prj_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_prj_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_prj_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_prj_record::MergeFrom(const pb_im_t_msg_prj_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivers_.MergeFrom(from.receivers_);
  f_files_.MergeFrom(from.f_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_sender()) {
      mutable_sender()->::pb_im_t_msg_prj_record_base_user::MergeFrom(from.sender());
    }
    if (from.has_record_type()) {
      set_record_type(from.record_type());
    }
    if (from.has_f_task_info()) {
      mutable_f_task_info()->::pb_im_t_msg_task::MergeFrom(from.f_task_info());
    }
    if (from.has_f_prj_info()) {
      mutable_f_prj_info()->::pb_prj_t_info::MergeFrom(from.f_prj_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_prj_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_prj_record::CopyFrom(const pb_im_t_msg_prj_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_prj_record::IsInitialized() const {

  return true;
}

void pb_im_t_msg_prj_record::Swap(pb_im_t_msg_prj_record* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(sender_, other->sender_);
    receivers_.Swap(&other->receivers_);
    std::swap(record_type_, other->record_type_);
    std::swap(f_task_info_, other->f_task_info_);
    std::swap(f_prj_info_, other->f_prj_info_);
    f_files_.Swap(&other->f_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_prj_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_prj_record_descriptor_;
  metadata.reflection = pb_im_t_msg_prj_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg_item::kFMsgIdFieldNumber;
const int pb_im_t_msg_item::kFMsgTypeFieldNumber;
const int pb_im_t_msg_item::kFMsgBodyFieldNumber;
const int pb_im_t_msg_item::kFSenderIdFieldNumber;
const int pb_im_t_msg_item::kFSenderNameFieldNumber;
const int pb_im_t_msg_item::kFSenderRemarkFieldNumber;
const int pb_im_t_msg_item::kFSenderAvatarFieldNumber;
const int pb_im_t_msg_item::kFGroupIdFieldNumber;
const int pb_im_t_msg_item::kFGroupTypeFieldNumber;
const int pb_im_t_msg_item::kFGroupNameFieldNumber;
const int pb_im_t_msg_item::kFGroupDescFieldNumber;
const int pb_im_t_msg_item::kFSendTimeFieldNumber;
const int pb_im_t_msg_item::kFMsgSeqIdFieldNumber;
const int pb_im_t_msg_item::kFAttchFieldNumber;
const int pb_im_t_msg_item::kFMsgTaskFieldNumber;
const int pb_im_t_msg_item::kFMsgWeatherFieldNumber;
const int pb_im_t_msg_item::kFMsgBookFieldNumber;
const int pb_im_t_msg_item::kFMsgCardFieldNumber;
const int pb_im_t_msg_item::kFMsgHotspotFieldNumber;
const int pb_im_t_msg_item::kFMsgPrjRecordFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg_item::pb_im_t_msg_item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg_item)
}

void pb_im_t_msg_item::InitAsDefaultInstance() {
  f_msg_task_ = const_cast< ::pb_im_t_msg_task*>(&::pb_im_t_msg_task::default_instance());
  f_msg_weather_ = const_cast< ::pb_im_t_msg_weather*>(&::pb_im_t_msg_weather::default_instance());
  f_msg_book_ = const_cast< ::pb_im_t_msg_book*>(&::pb_im_t_msg_book::default_instance());
  f_msg_card_ = const_cast< ::pb_im_t_msg_card*>(&::pb_im_t_msg_card::default_instance());
  f_msg_hotspot_ = const_cast< ::pb_im_t_msg_hotspot*>(&::pb_im_t_msg_hotspot::default_instance());
  f_msg_prj_record_ = const_cast< ::pb_im_t_msg_prj_record*>(&::pb_im_t_msg_prj_record::default_instance());
}

pb_im_t_msg_item::pb_im_t_msg_item(const pb_im_t_msg_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg_item)
}

void pb_im_t_msg_item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_msg_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_msg_type_ = 0u;
  f_msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sender_id_ = 0;
  f_sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sender_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sender_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_type_ = 0u;
  f_group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_send_time_ = 0;
  f_msg_seq_id_ = 0;
  f_msg_task_ = NULL;
  f_msg_weather_ = NULL;
  f_msg_book_ = NULL;
  f_msg_card_ = NULL;
  f_msg_hotspot_ = NULL;
  f_msg_prj_record_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg_item::~pb_im_t_msg_item() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg_item)
  SharedDtor();
}

void pb_im_t_msg_item::SharedDtor() {
  if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_id_;
  }
  if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_body_;
  }
  if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_name_;
  }
  if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_remark_;
  }
  if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sender_avatar_;
  }
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_name_;
  }
  if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_desc_;
  }
  if (this != default_instance_) {
    delete f_msg_task_;
    delete f_msg_weather_;
    delete f_msg_book_;
    delete f_msg_card_;
    delete f_msg_hotspot_;
    delete f_msg_prj_record_;
  }
}

void pb_im_t_msg_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_item_descriptor_;
}

const pb_im_t_msg_item& pb_im_t_msg_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg_item* pb_im_t_msg_item::default_instance_ = NULL;

pb_im_t_msg_item* pb_im_t_msg_item::New() const {
  return new pb_im_t_msg_item;
}

void pb_im_t_msg_item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_im_t_msg_item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_msg_type_, f_sender_id_);
    if (has_f_msg_id()) {
      if (f_msg_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_msg_id_->clear();
      }
    }
    if (has_f_msg_body()) {
      if (f_msg_body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_msg_body_->clear();
      }
    }
    if (has_f_sender_name()) {
      if (f_sender_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sender_name_->clear();
      }
    }
    if (has_f_sender_remark()) {
      if (f_sender_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sender_remark_->clear();
      }
    }
    if (has_f_sender_avatar()) {
      if (f_sender_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sender_avatar_->clear();
      }
    }
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 57088) {
    ZR_(f_group_type_, f_send_time_);
    if (has_f_group_name()) {
      if (f_group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_name_->clear();
      }
    }
    if (has_f_group_desc()) {
      if (f_group_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_desc_->clear();
      }
    }
    f_msg_seq_id_ = 0;
    if (has_f_msg_task()) {
      if (f_msg_task_ != NULL) f_msg_task_->::pb_im_t_msg_task::Clear();
    }
    if (has_f_msg_weather()) {
      if (f_msg_weather_ != NULL) f_msg_weather_->::pb_im_t_msg_weather::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_f_msg_book()) {
      if (f_msg_book_ != NULL) f_msg_book_->::pb_im_t_msg_book::Clear();
    }
    if (has_f_msg_card()) {
      if (f_msg_card_ != NULL) f_msg_card_->::pb_im_t_msg_card::Clear();
    }
    if (has_f_msg_hotspot()) {
      if (f_msg_hotspot_ != NULL) f_msg_hotspot_->::pb_im_t_msg_hotspot::Clear();
    }
    if (has_f_msg_prj_record()) {
      if (f_msg_prj_record_ != NULL) f_msg_prj_record_->::pb_im_t_msg_prj_record::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_attch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_msg_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_msg_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_msg_id().data(), this->f_msg_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_msg_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_msg_type;
        break;
      }

      // optional uint32 f_msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_msg_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_msg_type_)));
          set_has_f_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_msg_body;
        break;
      }

      // optional string f_msg_body = 3;
      case 3: {
        if (tag == 26) {
         parse_f_msg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_msg_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_msg_body().data(), this->f_msg_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_msg_body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_sender_id;
        break;
      }

      // optional int32 f_sender_id = 4;
      case 4: {
        if (tag == 32) {
         parse_f_sender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_sender_id_)));
          set_has_f_sender_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_sender_name;
        break;
      }

      // optional string f_sender_name = 5;
      case 5: {
        if (tag == 42) {
         parse_f_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sender_name().data(), this->f_sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sender_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_sender_remark;
        break;
      }

      // optional string f_sender_remark = 6;
      case 6: {
        if (tag == 50) {
         parse_f_sender_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sender_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sender_remark().data(), this->f_sender_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sender_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_sender_avatar;
        break;
      }

      // optional string f_sender_avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_f_sender_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sender_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sender_avatar().data(), this->f_sender_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sender_avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_group_id;
        break;
      }

      // optional string f_group_id = 8;
      case 8: {
        if (tag == 66) {
         parse_f_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_group_type;
        break;
      }

      // optional uint32 f_group_type = 9;
      case 9: {
        if (tag == 72) {
         parse_f_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_group_type_)));
          set_has_f_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_group_name;
        break;
      }

      // optional string f_group_name = 10;
      case 10: {
        if (tag == 82) {
         parse_f_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_name().data(), this->f_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_group_desc;
        break;
      }

      // optional string f_group_desc = 11;
      case 11: {
        if (tag == 90) {
         parse_f_group_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_desc().data(), this->f_group_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_f_send_time;
        break;
      }

      // optional int32 f_send_time = 12;
      case 12: {
        if (tag == 96) {
         parse_f_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_send_time_)));
          set_has_f_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_f_msg_seq_id;
        break;
      }

      // optional int32 f_msg_seq_id = 13;
      case 13: {
        if (tag == 104) {
         parse_f_msg_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_msg_seq_id_)));
          set_has_f_msg_seq_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_attch;
        break;
      }

      // repeated .pb_im_t_msg_attach f_attch = 14;
      case 14: {
        if (tag == 114) {
         parse_f_attch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_attch;
        if (input->ExpectTag(122)) goto parse_f_msg_task;
        break;
      }

      // optional .pb_im_t_msg_task f_msg_task = 15;
      case 15: {
        if (tag == 122) {
         parse_f_msg_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_f_msg_weather;
        break;
      }

      // optional .pb_im_t_msg_weather f_msg_weather = 16;
      case 16: {
        if (tag == 130) {
         parse_f_msg_weather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_weather()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_f_msg_book;
        break;
      }

      // optional .pb_im_t_msg_book f_msg_book = 17;
      case 17: {
        if (tag == 138) {
         parse_f_msg_book:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_book()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_f_msg_card;
        break;
      }

      // optional .pb_im_t_msg_card f_msg_card = 18;
      case 18: {
        if (tag == 146) {
         parse_f_msg_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_f_msg_hotspot;
        break;
      }

      // optional .pb_im_t_msg_hotspot f_msg_hotspot = 19;
      case 19: {
        if (tag == 154) {
         parse_f_msg_hotspot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_hotspot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_f_msg_prj_record;
        break;
      }

      // optional .pb_im_t_msg_prj_record f_msg_prj_record = 20;
      case 20: {
        if (tag == 162) {
         parse_f_msg_prj_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg_prj_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg_item)
  return false;
#undef DO_
}

void pb_im_t_msg_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg_item)
  // optional string f_msg_id = 1;
  if (has_f_msg_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg_id().data(), this->f_msg_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_msg_id(), output);
  }

  // optional uint32 f_msg_type = 2;
  if (has_f_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->f_msg_type(), output);
  }

  // optional string f_msg_body = 3;
  if (has_f_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg_body().data(), this->f_msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_msg_body(), output);
  }

  // optional int32 f_sender_id = 4;
  if (has_f_sender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_sender_id(), output);
  }

  // optional string f_sender_name = 5;
  if (has_f_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_name().data(), this->f_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_sender_name(), output);
  }

  // optional string f_sender_remark = 6;
  if (has_f_sender_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_remark().data(), this->f_sender_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_sender_remark(), output);
  }

  // optional string f_sender_avatar = 7;
  if (has_f_sender_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_avatar().data(), this->f_sender_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_sender_avatar(), output);
  }

  // optional string f_group_id = 8;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_group_id(), output);
  }

  // optional uint32 f_group_type = 9;
  if (has_f_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->f_group_type(), output);
  }

  // optional string f_group_name = 10;
  if (has_f_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_name().data(), this->f_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_group_name(), output);
  }

  // optional string f_group_desc = 11;
  if (has_f_group_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_desc().data(), this->f_group_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_group_desc(), output);
  }

  // optional int32 f_send_time = 12;
  if (has_f_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_send_time(), output);
  }

  // optional int32 f_msg_seq_id = 13;
  if (has_f_msg_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->f_msg_seq_id(), output);
  }

  // repeated .pb_im_t_msg_attach f_attch = 14;
  for (int i = 0; i < this->f_attch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->f_attch(i), output);
  }

  // optional .pb_im_t_msg_task f_msg_task = 15;
  if (has_f_msg_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->f_msg_task(), output);
  }

  // optional .pb_im_t_msg_weather f_msg_weather = 16;
  if (has_f_msg_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->f_msg_weather(), output);
  }

  // optional .pb_im_t_msg_book f_msg_book = 17;
  if (has_f_msg_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->f_msg_book(), output);
  }

  // optional .pb_im_t_msg_card f_msg_card = 18;
  if (has_f_msg_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->f_msg_card(), output);
  }

  // optional .pb_im_t_msg_hotspot f_msg_hotspot = 19;
  if (has_f_msg_hotspot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->f_msg_hotspot(), output);
  }

  // optional .pb_im_t_msg_prj_record f_msg_prj_record = 20;
  if (has_f_msg_prj_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->f_msg_prj_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg_item)
}

::google::protobuf::uint8* pb_im_t_msg_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg_item)
  // optional string f_msg_id = 1;
  if (has_f_msg_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg_id().data(), this->f_msg_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_msg_id(), target);
  }

  // optional uint32 f_msg_type = 2;
  if (has_f_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->f_msg_type(), target);
  }

  // optional string f_msg_body = 3;
  if (has_f_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg_body().data(), this->f_msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_msg_body(), target);
  }

  // optional int32 f_sender_id = 4;
  if (has_f_sender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_sender_id(), target);
  }

  // optional string f_sender_name = 5;
  if (has_f_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_name().data(), this->f_sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_sender_name(), target);
  }

  // optional string f_sender_remark = 6;
  if (has_f_sender_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_remark().data(), this->f_sender_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_sender_remark(), target);
  }

  // optional string f_sender_avatar = 7;
  if (has_f_sender_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sender_avatar().data(), this->f_sender_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sender_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_sender_avatar(), target);
  }

  // optional string f_group_id = 8;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_group_id(), target);
  }

  // optional uint32 f_group_type = 9;
  if (has_f_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->f_group_type(), target);
  }

  // optional string f_group_name = 10;
  if (has_f_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_name().data(), this->f_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_group_name(), target);
  }

  // optional string f_group_desc = 11;
  if (has_f_group_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_desc().data(), this->f_group_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_group_desc(), target);
  }

  // optional int32 f_send_time = 12;
  if (has_f_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_send_time(), target);
  }

  // optional int32 f_msg_seq_id = 13;
  if (has_f_msg_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->f_msg_seq_id(), target);
  }

  // repeated .pb_im_t_msg_attach f_attch = 14;
  for (int i = 0; i < this->f_attch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->f_attch(i), target);
  }

  // optional .pb_im_t_msg_task f_msg_task = 15;
  if (has_f_msg_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->f_msg_task(), target);
  }

  // optional .pb_im_t_msg_weather f_msg_weather = 16;
  if (has_f_msg_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->f_msg_weather(), target);
  }

  // optional .pb_im_t_msg_book f_msg_book = 17;
  if (has_f_msg_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->f_msg_book(), target);
  }

  // optional .pb_im_t_msg_card f_msg_card = 18;
  if (has_f_msg_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->f_msg_card(), target);
  }

  // optional .pb_im_t_msg_hotspot f_msg_hotspot = 19;
  if (has_f_msg_hotspot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->f_msg_hotspot(), target);
  }

  // optional .pb_im_t_msg_prj_record f_msg_prj_record = 20;
  if (has_f_msg_prj_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->f_msg_prj_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg_item)
  return target;
}

int pb_im_t_msg_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_msg_id = 1;
    if (has_f_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_msg_id());
    }

    // optional uint32 f_msg_type = 2;
    if (has_f_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_msg_type());
    }

    // optional string f_msg_body = 3;
    if (has_f_msg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_msg_body());
    }

    // optional int32 f_sender_id = 4;
    if (has_f_sender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_sender_id());
    }

    // optional string f_sender_name = 5;
    if (has_f_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sender_name());
    }

    // optional string f_sender_remark = 6;
    if (has_f_sender_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sender_remark());
    }

    // optional string f_sender_avatar = 7;
    if (has_f_sender_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sender_avatar());
    }

    // optional string f_group_id = 8;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 f_group_type = 9;
    if (has_f_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_group_type());
    }

    // optional string f_group_name = 10;
    if (has_f_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_name());
    }

    // optional string f_group_desc = 11;
    if (has_f_group_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_desc());
    }

    // optional int32 f_send_time = 12;
    if (has_f_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_send_time());
    }

    // optional int32 f_msg_seq_id = 13;
    if (has_f_msg_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_msg_seq_id());
    }

    // optional .pb_im_t_msg_task f_msg_task = 15;
    if (has_f_msg_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_task());
    }

    // optional .pb_im_t_msg_weather f_msg_weather = 16;
    if (has_f_msg_weather()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_weather());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb_im_t_msg_book f_msg_book = 17;
    if (has_f_msg_book()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_book());
    }

    // optional .pb_im_t_msg_card f_msg_card = 18;
    if (has_f_msg_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_card());
    }

    // optional .pb_im_t_msg_hotspot f_msg_hotspot = 19;
    if (has_f_msg_hotspot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_hotspot());
    }

    // optional .pb_im_t_msg_prj_record f_msg_prj_record = 20;
    if (has_f_msg_prj_record()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg_prj_record());
    }

  }
  // repeated .pb_im_t_msg_attach f_attch = 14;
  total_size += 1 * this->f_attch_size();
  for (int i = 0; i < this->f_attch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg_item::MergeFrom(const pb_im_t_msg_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_attch_.MergeFrom(from.f_attch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_msg_id()) {
      set_f_msg_id(from.f_msg_id());
    }
    if (from.has_f_msg_type()) {
      set_f_msg_type(from.f_msg_type());
    }
    if (from.has_f_msg_body()) {
      set_f_msg_body(from.f_msg_body());
    }
    if (from.has_f_sender_id()) {
      set_f_sender_id(from.f_sender_id());
    }
    if (from.has_f_sender_name()) {
      set_f_sender_name(from.f_sender_name());
    }
    if (from.has_f_sender_remark()) {
      set_f_sender_remark(from.f_sender_remark());
    }
    if (from.has_f_sender_avatar()) {
      set_f_sender_avatar(from.f_sender_avatar());
    }
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_group_type()) {
      set_f_group_type(from.f_group_type());
    }
    if (from.has_f_group_name()) {
      set_f_group_name(from.f_group_name());
    }
    if (from.has_f_group_desc()) {
      set_f_group_desc(from.f_group_desc());
    }
    if (from.has_f_send_time()) {
      set_f_send_time(from.f_send_time());
    }
    if (from.has_f_msg_seq_id()) {
      set_f_msg_seq_id(from.f_msg_seq_id());
    }
    if (from.has_f_msg_task()) {
      mutable_f_msg_task()->::pb_im_t_msg_task::MergeFrom(from.f_msg_task());
    }
    if (from.has_f_msg_weather()) {
      mutable_f_msg_weather()->::pb_im_t_msg_weather::MergeFrom(from.f_msg_weather());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_msg_book()) {
      mutable_f_msg_book()->::pb_im_t_msg_book::MergeFrom(from.f_msg_book());
    }
    if (from.has_f_msg_card()) {
      mutable_f_msg_card()->::pb_im_t_msg_card::MergeFrom(from.f_msg_card());
    }
    if (from.has_f_msg_hotspot()) {
      mutable_f_msg_hotspot()->::pb_im_t_msg_hotspot::MergeFrom(from.f_msg_hotspot());
    }
    if (from.has_f_msg_prj_record()) {
      mutable_f_msg_prj_record()->::pb_im_t_msg_prj_record::MergeFrom(from.f_msg_prj_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg_item::CopyFrom(const pb_im_t_msg_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg_item::IsInitialized() const {

  return true;
}

void pb_im_t_msg_item::Swap(pb_im_t_msg_item* other) {
  if (other != this) {
    std::swap(f_msg_id_, other->f_msg_id_);
    std::swap(f_msg_type_, other->f_msg_type_);
    std::swap(f_msg_body_, other->f_msg_body_);
    std::swap(f_sender_id_, other->f_sender_id_);
    std::swap(f_sender_name_, other->f_sender_name_);
    std::swap(f_sender_remark_, other->f_sender_remark_);
    std::swap(f_sender_avatar_, other->f_sender_avatar_);
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(f_group_type_, other->f_group_type_);
    std::swap(f_group_name_, other->f_group_name_);
    std::swap(f_group_desc_, other->f_group_desc_);
    std::swap(f_send_time_, other->f_send_time_);
    std::swap(f_msg_seq_id_, other->f_msg_seq_id_);
    f_attch_.Swap(&other->f_attch_);
    std::swap(f_msg_task_, other->f_msg_task_);
    std::swap(f_msg_weather_, other->f_msg_weather_);
    std::swap(f_msg_book_, other->f_msg_book_);
    std::swap(f_msg_card_, other->f_msg_card_);
    std::swap(f_msg_hotspot_, other->f_msg_hotspot_);
    std::swap(f_msg_prj_record_, other->f_msg_prj_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_item_descriptor_;
  metadata.reflection = pb_im_t_msg_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_im_t_msg::kFUpdateTypeFieldNumber;
const int pb_im_t_msg::kFGroupIdFieldNumber;
const int pb_im_t_msg::kFMsgFieldNumber;
#endif  // !_MSC_VER

pb_im_t_msg::pb_im_t_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_im_t_msg)
}

void pb_im_t_msg::InitAsDefaultInstance() {
}

pb_im_t_msg::pb_im_t_msg(const pb_im_t_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_im_t_msg)
}

void pb_im_t_msg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_im_t_msg::~pb_im_t_msg() {
  // @@protoc_insertion_point(destructor:pb_im_t_msg)
  SharedDtor();
}

void pb_im_t_msg::SharedDtor() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_im_t_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_im_t_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_im_t_msg_descriptor_;
}

const pb_im_t_msg& pb_im_t_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_im_t_msg* pb_im_t_msg::default_instance_ = NULL;

pb_im_t_msg* pb_im_t_msg::New() const {
  return new pb_im_t_msg;
}

void pb_im_t_msg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_update_type_ = 0;
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
  }
  f_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_im_t_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_im_t_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_group_id;
        break;
      }

      // optional string f_group_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_msg;
        break;
      }

      // repeated .pb_im_t_msg_item f_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_f_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_msg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_im_t_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_im_t_msg)
  return false;
#undef DO_
}

void pb_im_t_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_im_t_msg)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // optional string f_group_id = 2;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_group_id(), output);
  }

  // repeated .pb_im_t_msg_item f_msg = 3;
  for (int i = 0; i < this->f_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_msg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_im_t_msg)
}

::google::protobuf::uint8* pb_im_t_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_im_t_msg)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // optional string f_group_id = 2;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_group_id(), target);
  }

  // repeated .pb_im_t_msg_item f_msg = 3;
  for (int i = 0; i < this->f_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_msg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_im_t_msg)
  return target;
}

int pb_im_t_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional string f_group_id = 2;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

  }
  // repeated .pb_im_t_msg_item f_msg = 3;
  total_size += 1 * this->f_msg_size();
  for (int i = 0; i < this->f_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_im_t_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_im_t_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_im_t_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_im_t_msg::MergeFrom(const pb_im_t_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_msg_.MergeFrom(from.f_msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_im_t_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_im_t_msg::CopyFrom(const pb_im_t_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_im_t_msg::IsInitialized() const {

  return true;
}

void pb_im_t_msg::Swap(pb_im_t_msg* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    std::swap(f_group_id_, other->f_group_id_);
    f_msg_.Swap(&other->f_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_im_t_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_im_t_msg_descriptor_;
  metadata.reflection = pb_im_t_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_user::kFUidFieldNumber;
const int pb_prj_t_user::kFNameFieldNumber;
const int pb_prj_t_user::kFPhoneFieldNumber;
const int pb_prj_t_user::kFJobTypeFieldNumber;
const int pb_prj_t_user::kFAddTimeFieldNumber;
const int pb_prj_t_user::kFTaskOperateStatusFieldNumber;
const int pb_prj_t_user::kFJoinContentFieldNumber;
const int pb_prj_t_user::kFNamePinyinFieldNumber;
const int pb_prj_t_user::kFDepIdFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_user::pb_prj_t_user()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_user)
}

void pb_prj_t_user::InitAsDefaultInstance() {
}

pb_prj_t_user::pb_prj_t_user(const pb_prj_t_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_user)
}

void pb_prj_t_user::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uid_ = 0;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_add_time_ = 0;
  f_task_operate_status_ = 0;
  f_join_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_dep_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_user::~pb_prj_t_user() {
  // @@protoc_insertion_point(destructor:pb_prj_t_user)
  SharedDtor();
}

void pb_prj_t_user::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_join_content_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_dep_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_dep_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_user_descriptor_;
}

const pb_prj_t_user& pb_prj_t_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_user* pb_prj_t_user::default_instance_ = NULL;

pb_prj_t_user* pb_prj_t_user::New() const {
  return new pb_prj_t_user;
}

void pb_prj_t_user::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_user*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_uid_, f_add_time_);
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    f_task_operate_status_ = 0;
    if (has_f_join_content()) {
      if (f_join_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_join_content_->clear();
      }
    }
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
  }
  if (has_f_dep_id()) {
    if (f_dep_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_dep_id_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_user)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_uid_)));
          set_has_f_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 3;
      case 3: {
        if (tag == 26) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 4;
      case 4: {
        if (tag == 34) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_add_time;
        break;
      }

      // optional int32 f_add_time = 5;
      case 5: {
        if (tag == 40) {
         parse_f_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_add_time_)));
          set_has_f_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_task_operate_status;
        break;
      }

      // optional int32 f_task_operate_status = 6;
      case 6: {
        if (tag == 48) {
         parse_f_task_operate_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_operate_status_)));
          set_has_f_task_operate_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_join_content;
        break;
      }

      // optional string f_join_content = 7;
      case 7: {
        if (tag == 58) {
         parse_f_join_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_join_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_join_content().data(), this->f_join_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_join_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 8;
      case 8: {
        if (tag == 66) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_dep_id;
        break;
      }

      // optional string f_dep_id = 9;
      case 9: {
        if (tag == 74) {
         parse_f_dep_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_dep_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_dep_id().data(), this->f_dep_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_dep_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_user)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_user)
  return false;
#undef DO_
}

void pb_prj_t_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_user)
  // optional int32 f_uid = 1;
  if (has_f_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_uid(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_phone(), output);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_job_type(), output);
  }

  // optional int32 f_add_time = 5;
  if (has_f_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_add_time(), output);
  }

  // optional int32 f_task_operate_status = 6;
  if (has_f_task_operate_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_task_operate_status(), output);
  }

  // optional string f_join_content = 7;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_join_content(), output);
  }

  // optional string f_name_pinyin = 8;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_name_pinyin(), output);
  }

  // optional string f_dep_id = 9;
  if (has_f_dep_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_dep_id().data(), this->f_dep_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_dep_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_dep_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_user)
}

::google::protobuf::uint8* pb_prj_t_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_user)
  // optional int32 f_uid = 1;
  if (has_f_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_uid(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_phone = 3;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_phone(), target);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_job_type(), target);
  }

  // optional int32 f_add_time = 5;
  if (has_f_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_add_time(), target);
  }

  // optional int32 f_task_operate_status = 6;
  if (has_f_task_operate_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_task_operate_status(), target);
  }

  // optional string f_join_content = 7;
  if (has_f_join_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_join_content().data(), this->f_join_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_join_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_join_content(), target);
  }

  // optional string f_name_pinyin = 8;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_name_pinyin(), target);
  }

  // optional string f_dep_id = 9;
  if (has_f_dep_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_dep_id().data(), this->f_dep_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_dep_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_dep_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_user)
  return target;
}

int pb_prj_t_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_uid = 1;
    if (has_f_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_uid());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_phone = 3;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional string f_job_type = 4;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional int32 f_add_time = 5;
    if (has_f_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_add_time());
    }

    // optional int32 f_task_operate_status = 6;
    if (has_f_task_operate_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_operate_status());
    }

    // optional string f_join_content = 7;
    if (has_f_join_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_join_content());
    }

    // optional string f_name_pinyin = 8;
    if (has_f_name_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_dep_id = 9;
    if (has_f_dep_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_dep_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_user::MergeFrom(const pb_prj_t_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uid()) {
      set_f_uid(from.f_uid());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_add_time()) {
      set_f_add_time(from.f_add_time());
    }
    if (from.has_f_task_operate_status()) {
      set_f_task_operate_status(from.f_task_operate_status());
    }
    if (from.has_f_join_content()) {
      set_f_join_content(from.f_join_content());
    }
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_dep_id()) {
      set_f_dep_id(from.f_dep_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_user::CopyFrom(const pb_prj_t_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_user::IsInitialized() const {

  return true;
}

void pb_prj_t_user::Swap(pb_prj_t_user* other) {
  if (other != this) {
    std::swap(f_uid_, other->f_uid_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_add_time_, other->f_add_time_);
    std::swap(f_task_operate_status_, other->f_task_operate_status_);
    std::swap(f_join_content_, other->f_join_content_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_dep_id_, other->f_dep_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_user_descriptor_;
  metadata.reflection = pb_prj_t_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_feed::kFTimeFieldNumber;
const int pb_prj_t_feed::kFMsgFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_feed::pb_prj_t_feed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_feed)
}

void pb_prj_t_feed::InitAsDefaultInstance() {
}

pb_prj_t_feed::pb_prj_t_feed(const pb_prj_t_feed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_feed)
}

void pb_prj_t_feed::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_time_ = 0;
  f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_feed::~pb_prj_t_feed() {
  // @@protoc_insertion_point(destructor:pb_prj_t_feed)
  SharedDtor();
}

void pb_prj_t_feed::SharedDtor() {
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_feed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_feed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_feed_descriptor_;
}

const pb_prj_t_feed& pb_prj_t_feed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_feed* pb_prj_t_feed::default_instance_ = NULL;

pb_prj_t_feed* pb_prj_t_feed::New() const {
  return new pb_prj_t_feed;
}

void pb_prj_t_feed::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_time_ = 0;
    if (has_f_msg()) {
      if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_feed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_feed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_msg;
        break;
      }

      // optional string f_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_f_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_msg().data(), this->f_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_feed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_feed)
  return false;
#undef DO_
}

void pb_prj_t_feed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_feed)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_time(), output);
  }

  // optional string f_msg = 2;
  if (has_f_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg().data(), this->f_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_feed)
}

::google::protobuf::uint8* pb_prj_t_feed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_feed)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_time(), target);
  }

  // optional string f_msg = 2;
  if (has_f_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg().data(), this->f_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_feed)
  return target;
}

int pb_prj_t_feed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_time = 1;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

    // optional string f_msg = 2;
    if (has_f_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_feed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_feed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_feed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_feed::MergeFrom(const pb_prj_t_feed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
    if (from.has_f_msg()) {
      set_f_msg(from.f_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_feed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_feed::CopyFrom(const pb_prj_t_feed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_feed::IsInitialized() const {

  return true;
}

void pb_prj_t_feed::Swap(pb_prj_t_feed* other) {
  if (other != this) {
    std::swap(f_time_, other->f_time_);
    std::swap(f_msg_, other->f_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_feed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_feed_descriptor_;
  metadata.reflection = pb_prj_t_feed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_milestore::kFTimeFieldNumber;
const int pb_prj_t_milestore::kFEventFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_milestore::pb_prj_t_milestore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_milestore)
}

void pb_prj_t_milestore::InitAsDefaultInstance() {
}

pb_prj_t_milestore::pb_prj_t_milestore(const pb_prj_t_milestore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_milestore)
}

void pb_prj_t_milestore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_time_ = 0;
  f_event_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_milestore::~pb_prj_t_milestore() {
  // @@protoc_insertion_point(destructor:pb_prj_t_milestore)
  SharedDtor();
}

void pb_prj_t_milestore::SharedDtor() {
  if (f_event_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_event_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_milestore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_milestore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_milestore_descriptor_;
}

const pb_prj_t_milestore& pb_prj_t_milestore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_milestore* pb_prj_t_milestore::default_instance_ = NULL;

pb_prj_t_milestore* pb_prj_t_milestore::New() const {
  return new pb_prj_t_milestore;
}

void pb_prj_t_milestore::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_time_ = 0;
    if (has_f_event()) {
      if (f_event_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_event_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_milestore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_milestore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_event;
        break;
      }

      // optional string f_event = 2;
      case 2: {
        if (tag == 18) {
         parse_f_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_event().data(), this->f_event().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_milestore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_milestore)
  return false;
#undef DO_
}

void pb_prj_t_milestore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_milestore)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_time(), output);
  }

  // optional string f_event = 2;
  if (has_f_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_event().data(), this->f_event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_milestore)
}

::google::protobuf::uint8* pb_prj_t_milestore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_milestore)
  // optional int32 f_time = 1;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_time(), target);
  }

  // optional string f_event = 2;
  if (has_f_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_event().data(), this->f_event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_milestore)
  return target;
}

int pb_prj_t_milestore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_time = 1;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

    // optional string f_event = 2;
    if (has_f_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_milestore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_milestore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_milestore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_milestore::MergeFrom(const pb_prj_t_milestore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
    if (from.has_f_event()) {
      set_f_event(from.f_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_milestore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_milestore::CopyFrom(const pb_prj_t_milestore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_milestore::IsInitialized() const {

  return true;
}

void pb_prj_t_milestore::Swap(pb_prj_t_milestore* other) {
  if (other != this) {
    std::swap(f_time_, other->f_time_);
    std::swap(f_event_, other->f_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_milestore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_milestore_descriptor_;
  metadata.reflection = pb_prj_t_milestore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_task::kFTaskIdFieldNumber;
const int pb_prj_t_task::kFPrjIdFieldNumber;
const int pb_prj_t_task::kFTaskTypeFieldNumber;
const int pb_prj_t_task::kFTaskDescFieldNumber;
const int pb_prj_t_task::kFTaskDescTypeFieldNumber;
const int pb_prj_t_task::kFPlaytimeFieldNumber;
const int pb_prj_t_task::kFSponsorFieldNumber;
const int pb_prj_t_task::kFMembersFieldNumber;
const int pb_prj_t_task::kFTaskStatusFieldNumber;
const int pb_prj_t_task::kFPositionFieldNumber;
const int pb_prj_t_task::kFAttachListFieldNumber;
const int pb_prj_t_task::kFTaskBeginFieldNumber;
const int pb_prj_t_task::kFTaskEndFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_task::pb_prj_t_task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_task)
}

void pb_prj_t_task::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_prj_t_user*>(&::pb_prj_t_user::default_instance());
}

pb_prj_t_task::pb_prj_t_task(const pb_prj_t_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_task)
}

void pb_prj_t_task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_type_ = 0;
  f_task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_desc_type_ = 0;
  f_playtime_ = 0;
  f_sponsor_ = NULL;
  f_task_status_ = 0;
  f_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_task_begin_ = 0;
  f_task_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_task::~pb_prj_t_task() {
  // @@protoc_insertion_point(destructor:pb_prj_t_task)
  SharedDtor();
}

void pb_prj_t_task::SharedDtor() {
  if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_id_;
  }
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_task_desc_;
  }
  if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_position_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
  }
}

void pb_prj_t_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_task_descriptor_;
}

const pb_prj_t_task& pb_prj_t_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_task* pb_prj_t_task::default_instance_ = NULL;

pb_prj_t_task* pb_prj_t_task::New() const {
  return new pb_prj_t_task;
}

void pb_prj_t_task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_task_type_, f_task_desc_type_);
    if (has_f_task_id()) {
      if (f_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_id_->clear();
      }
    }
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_task_desc()) {
      if (f_task_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_task_desc_->clear();
      }
    }
    f_playtime_ = 0;
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_prj_t_user::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 6912) {
    ZR_(f_task_begin_, f_task_end_);
    f_task_status_ = 0;
    if (has_f_position()) {
      if (f_position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_position_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_members_.Clear();
  f_attach_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_id().data(), this->f_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prj_id;
        break;
      }

      // optional string f_prj_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_task_type;
        break;
      }

      // optional int32 f_task_type = 3;
      case 3: {
        if (tag == 24) {
         parse_f_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_type_)));
          set_has_f_task_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_task_desc;
        break;
      }

      // optional string f_task_desc = 4;
      case 4: {
        if (tag == 34) {
         parse_f_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_task_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_task_desc().data(), this->f_task_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_task_desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_task_desc_type;
        break;
      }

      // optional int32 f_task_desc_type = 5;
      case 5: {
        if (tag == 40) {
         parse_f_task_desc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_desc_type_)));
          set_has_f_task_desc_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_playtime;
        break;
      }

      // optional int32 f_playtime = 6;
      case 6: {
        if (tag == 48) {
         parse_f_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_playtime_)));
          set_has_f_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_prj_t_user f_sponsor = 7;
      case 7: {
        if (tag == 58) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        break;
      }

      // repeated .pb_prj_t_user f_members = 8;
      case 8: {
        if (tag == 66) {
         parse_f_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_members;
        if (input->ExpectTag(72)) goto parse_f_task_status;
        break;
      }

      // optional int32 f_task_status = 9;
      case 9: {
        if (tag == 72) {
         parse_f_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_status_)));
          set_has_f_task_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_position;
        break;
      }

      // optional string f_position = 10;
      case 10: {
        if (tag == 82) {
         parse_f_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_position().data(), this->f_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_prj_t_base_file f_attach_list = 11;
      case 11: {
        if (tag == 90) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_attach_list;
        if (input->ExpectTag(96)) goto parse_f_task_begin;
        break;
      }

      // optional int32 f_task_begin = 12;
      case 12: {
        if (tag == 96) {
         parse_f_task_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_begin_)));
          set_has_f_task_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_f_task_end;
        break;
      }

      // optional int32 f_task_end = 13;
      case 13: {
        if (tag == 104) {
         parse_f_task_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_end_)));
          set_has_f_task_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_task)
  return false;
#undef DO_
}

void pb_prj_t_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_task_id(), output);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_prj_id(), output);
  }

  // optional int32 f_task_type = 3;
  if (has_f_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_task_type(), output);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_task_desc(), output);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_task_desc_type(), output);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_playtime(), output);
  }

  // optional .pb_prj_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_sponsor(), output);
  }

  // repeated .pb_prj_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_members(i), output);
  }

  // optional int32 f_task_status = 9;
  if (has_f_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_task_status(), output);
  }

  // optional string f_position = 10;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_position(), output);
  }

  // repeated .pb_prj_t_base_file f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_attach_list(i), output);
  }

  // optional int32 f_task_begin = 12;
  if (has_f_task_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_task_begin(), output);
  }

  // optional int32 f_task_end = 13;
  if (has_f_task_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->f_task_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_task)
}

::google::protobuf::uint8* pb_prj_t_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_task)
  // optional string f_task_id = 1;
  if (has_f_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_id().data(), this->f_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_task_id(), target);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_prj_id(), target);
  }

  // optional int32 f_task_type = 3;
  if (has_f_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_task_type(), target);
  }

  // optional string f_task_desc = 4;
  if (has_f_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_task_desc().data(), this->f_task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_task_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_task_desc(), target);
  }

  // optional int32 f_task_desc_type = 5;
  if (has_f_task_desc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_task_desc_type(), target);
  }

  // optional int32 f_playtime = 6;
  if (has_f_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_playtime(), target);
  }

  // optional .pb_prj_t_user f_sponsor = 7;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_sponsor(), target);
  }

  // repeated .pb_prj_t_user f_members = 8;
  for (int i = 0; i < this->f_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_members(i), target);
  }

  // optional int32 f_task_status = 9;
  if (has_f_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_task_status(), target);
  }

  // optional string f_position = 10;
  if (has_f_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position().data(), this->f_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_position(), target);
  }

  // repeated .pb_prj_t_base_file f_attach_list = 11;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_attach_list(i), target);
  }

  // optional int32 f_task_begin = 12;
  if (has_f_task_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_task_begin(), target);
  }

  // optional int32 f_task_end = 13;
  if (has_f_task_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->f_task_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_task)
  return target;
}

int pb_prj_t_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_task_id = 1;
    if (has_f_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_id());
    }

    // optional string f_prj_id = 2;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional int32 f_task_type = 3;
    if (has_f_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_type());
    }

    // optional string f_task_desc = 4;
    if (has_f_task_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_task_desc());
    }

    // optional int32 f_task_desc_type = 5;
    if (has_f_task_desc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_desc_type());
    }

    // optional int32 f_playtime = 6;
    if (has_f_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_playtime());
    }

    // optional .pb_prj_t_user f_sponsor = 7;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_task_status = 9;
    if (has_f_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_status());
    }

    // optional string f_position = 10;
    if (has_f_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_position());
    }

    // optional int32 f_task_begin = 12;
    if (has_f_task_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_begin());
    }

    // optional int32 f_task_end = 13;
    if (has_f_task_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_end());
    }

  }
  // repeated .pb_prj_t_user f_members = 8;
  total_size += 1 * this->f_members_size();
  for (int i = 0; i < this->f_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_members(i));
  }

  // repeated .pb_prj_t_base_file f_attach_list = 11;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_task::MergeFrom(const pb_prj_t_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_members_.MergeFrom(from.f_members_);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_task_id()) {
      set_f_task_id(from.f_task_id());
    }
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_task_type()) {
      set_f_task_type(from.f_task_type());
    }
    if (from.has_f_task_desc()) {
      set_f_task_desc(from.f_task_desc());
    }
    if (from.has_f_task_desc_type()) {
      set_f_task_desc_type(from.f_task_desc_type());
    }
    if (from.has_f_playtime()) {
      set_f_playtime(from.f_playtime());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_prj_t_user::MergeFrom(from.f_sponsor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_task_status()) {
      set_f_task_status(from.f_task_status());
    }
    if (from.has_f_position()) {
      set_f_position(from.f_position());
    }
    if (from.has_f_task_begin()) {
      set_f_task_begin(from.f_task_begin());
    }
    if (from.has_f_task_end()) {
      set_f_task_end(from.f_task_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_task::CopyFrom(const pb_prj_t_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_task::IsInitialized() const {

  return true;
}

void pb_prj_t_task::Swap(pb_prj_t_task* other) {
  if (other != this) {
    std::swap(f_task_id_, other->f_task_id_);
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_task_type_, other->f_task_type_);
    std::swap(f_task_desc_, other->f_task_desc_);
    std::swap(f_task_desc_type_, other->f_task_desc_type_);
    std::swap(f_playtime_, other->f_playtime_);
    std::swap(f_sponsor_, other->f_sponsor_);
    f_members_.Swap(&other->f_members_);
    std::swap(f_task_status_, other->f_task_status_);
    std::swap(f_position_, other->f_position_);
    f_attach_list_.Swap(&other->f_attach_list_);
    std::swap(f_task_begin_, other->f_task_begin_);
    std::swap(f_task_end_, other->f_task_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_task_descriptor_;
  metadata.reflection = pb_prj_t_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_task_report::kFReportIdFieldNumber;
const int pb_prj_t_task_report::kFSponsorFieldNumber;
const int pb_prj_t_task_report::kFReplyToFieldNumber;
const int pb_prj_t_task_report::kFTitleFieldNumber;
const int pb_prj_t_task_report::kFContentFieldNumber;
const int pb_prj_t_task_report::kFContentTypeFieldNumber;
const int pb_prj_t_task_report::kFPlaytimeFieldNumber;
const int pb_prj_t_task_report::kFAttachListFieldNumber;
const int pb_prj_t_task_report::kFReportTimeFieldNumber;
const int pb_prj_t_task_report::kFReportTypeFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_task_report::pb_prj_t_task_report()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_task_report)
}

void pb_prj_t_task_report::InitAsDefaultInstance() {
  f_sponsor_ = const_cast< ::pb_prj_t_user*>(&::pb_prj_t_user::default_instance());
  f_reply_to_ = const_cast< ::pb_prj_t_user*>(&::pb_prj_t_user::default_instance());
}

pb_prj_t_task_report::pb_prj_t_task_report(const pb_prj_t_task_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_task_report)
}

void pb_prj_t_task_report::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_report_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sponsor_ = NULL;
  f_reply_to_ = NULL;
  f_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_content_type_ = 0;
  f_playtime_ = 0;
  f_report_time_ = 0;
  f_report_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_task_report::~pb_prj_t_task_report() {
  // @@protoc_insertion_point(destructor:pb_prj_t_task_report)
  SharedDtor();
}

void pb_prj_t_task_report::SharedDtor() {
  if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_report_id_;
  }
  if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_title_;
  }
  if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_content_;
  }
  if (this != default_instance_) {
    delete f_sponsor_;
    delete f_reply_to_;
  }
}

void pb_prj_t_task_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_task_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_task_report_descriptor_;
}

const pb_prj_t_task_report& pb_prj_t_task_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_task_report* pb_prj_t_task_report::default_instance_ = NULL;

pb_prj_t_task_report* pb_prj_t_task_report::New() const {
  return new pb_prj_t_task_report;
}

void pb_prj_t_task_report::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_task_report*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_content_type_, f_playtime_);
    if (has_f_report_id()) {
      if (f_report_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_report_id_->clear();
      }
    }
    if (has_f_sponsor()) {
      if (f_sponsor_ != NULL) f_sponsor_->::pb_prj_t_user::Clear();
    }
    if (has_f_reply_to()) {
      if (f_reply_to_ != NULL) f_reply_to_->::pb_prj_t_user::Clear();
    }
    if (has_f_title()) {
      if (f_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_title_->clear();
      }
    }
    if (has_f_content()) {
      if (f_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_content_->clear();
      }
    }
  }
  ZR_(f_report_time_, f_report_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_attach_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_task_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_task_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_report_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_report_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_report_id().data(), this->f_report_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_report_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_sponsor;
        break;
      }

      // optional .pb_prj_t_user f_sponsor = 2;
      case 2: {
        if (tag == 18) {
         parse_f_sponsor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_sponsor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_reply_to;
        break;
      }

      // optional .pb_prj_t_user f_reply_to = 3;
      case 3: {
        if (tag == 26) {
         parse_f_reply_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_reply_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_title;
        break;
      }

      // optional string f_title = 4;
      case 4: {
        if (tag == 34) {
         parse_f_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_title().data(), this->f_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_content;
        break;
      }

      // optional string f_content = 5;
      case 5: {
        if (tag == 42) {
         parse_f_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_content().data(), this->f_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_content_type;
        break;
      }

      // optional int32 f_content_type = 6;
      case 6: {
        if (tag == 48) {
         parse_f_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_content_type_)));
          set_has_f_content_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_playtime;
        break;
      }

      // optional int32 f_playtime = 7;
      case 7: {
        if (tag == 56) {
         parse_f_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_playtime_)));
          set_has_f_playtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_attach_list;
        break;
      }

      // repeated .pb_prj_t_base_file f_attach_list = 8;
      case 8: {
        if (tag == 66) {
         parse_f_attach_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_attach_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_attach_list;
        if (input->ExpectTag(72)) goto parse_f_report_time;
        break;
      }

      // optional int32 f_report_time = 9;
      case 9: {
        if (tag == 72) {
         parse_f_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_report_time_)));
          set_has_f_report_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_report_type;
        break;
      }

      // optional int32 f_report_type = 10;
      case 10: {
        if (tag == 80) {
         parse_f_report_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_report_type_)));
          set_has_f_report_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_task_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_task_report)
  return false;
#undef DO_
}

void pb_prj_t_task_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_report_id(), output);
  }

  // optional .pb_prj_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_sponsor(), output);
  }

  // optional .pb_prj_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_reply_to(), output);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_title(), output);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_content(), output);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_content_type(), output);
  }

  // optional int32 f_playtime = 7;
  if (has_f_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_playtime(), output);
  }

  // repeated .pb_prj_t_base_file f_attach_list = 8;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_attach_list(i), output);
  }

  // optional int32 f_report_time = 9;
  if (has_f_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_report_time(), output);
  }

  // optional int32 f_report_type = 10;
  if (has_f_report_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->f_report_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_task_report)
}

::google::protobuf::uint8* pb_prj_t_task_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_task_report)
  // optional string f_report_id = 1;
  if (has_f_report_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_report_id().data(), this->f_report_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_report_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_report_id(), target);
  }

  // optional .pb_prj_t_user f_sponsor = 2;
  if (has_f_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_sponsor(), target);
  }

  // optional .pb_prj_t_user f_reply_to = 3;
  if (has_f_reply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_reply_to(), target);
  }

  // optional string f_title = 4;
  if (has_f_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_title().data(), this->f_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_title(), target);
  }

  // optional string f_content = 5;
  if (has_f_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_content().data(), this->f_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_content(), target);
  }

  // optional int32 f_content_type = 6;
  if (has_f_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_content_type(), target);
  }

  // optional int32 f_playtime = 7;
  if (has_f_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_playtime(), target);
  }

  // repeated .pb_prj_t_base_file f_attach_list = 8;
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_attach_list(i), target);
  }

  // optional int32 f_report_time = 9;
  if (has_f_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_report_time(), target);
  }

  // optional int32 f_report_type = 10;
  if (has_f_report_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->f_report_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_task_report)
  return target;
}

int pb_prj_t_task_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_report_id = 1;
    if (has_f_report_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_report_id());
    }

    // optional .pb_prj_t_user f_sponsor = 2;
    if (has_f_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_sponsor());
    }

    // optional .pb_prj_t_user f_reply_to = 3;
    if (has_f_reply_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_reply_to());
    }

    // optional string f_title = 4;
    if (has_f_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_title());
    }

    // optional string f_content = 5;
    if (has_f_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_content());
    }

    // optional int32 f_content_type = 6;
    if (has_f_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_content_type());
    }

    // optional int32 f_playtime = 7;
    if (has_f_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_playtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_report_time = 9;
    if (has_f_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_report_time());
    }

    // optional int32 f_report_type = 10;
    if (has_f_report_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_report_type());
    }

  }
  // repeated .pb_prj_t_base_file f_attach_list = 8;
  total_size += 1 * this->f_attach_list_size();
  for (int i = 0; i < this->f_attach_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_attach_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_task_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_task_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_task_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_task_report::MergeFrom(const pb_prj_t_task_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_attach_list_.MergeFrom(from.f_attach_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_report_id()) {
      set_f_report_id(from.f_report_id());
    }
    if (from.has_f_sponsor()) {
      mutable_f_sponsor()->::pb_prj_t_user::MergeFrom(from.f_sponsor());
    }
    if (from.has_f_reply_to()) {
      mutable_f_reply_to()->::pb_prj_t_user::MergeFrom(from.f_reply_to());
    }
    if (from.has_f_title()) {
      set_f_title(from.f_title());
    }
    if (from.has_f_content()) {
      set_f_content(from.f_content());
    }
    if (from.has_f_content_type()) {
      set_f_content_type(from.f_content_type());
    }
    if (from.has_f_playtime()) {
      set_f_playtime(from.f_playtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_report_time()) {
      set_f_report_time(from.f_report_time());
    }
    if (from.has_f_report_type()) {
      set_f_report_type(from.f_report_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_task_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_task_report::CopyFrom(const pb_prj_t_task_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_task_report::IsInitialized() const {

  return true;
}

void pb_prj_t_task_report::Swap(pb_prj_t_task_report* other) {
  if (other != this) {
    std::swap(f_report_id_, other->f_report_id_);
    std::swap(f_sponsor_, other->f_sponsor_);
    std::swap(f_reply_to_, other->f_reply_to_);
    std::swap(f_title_, other->f_title_);
    std::swap(f_content_, other->f_content_);
    std::swap(f_content_type_, other->f_content_type_);
    std::swap(f_playtime_, other->f_playtime_);
    f_attach_list_.Swap(&other->f_attach_list_);
    std::swap(f_report_time_, other->f_report_time_);
    std::swap(f_report_type_, other->f_report_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_task_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_task_report_descriptor_;
  metadata.reflection = pb_prj_t_task_report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_task_view::kFUinFieldNumber;
const int pb_prj_t_task_view::kFNameFieldNumber;
const int pb_prj_t_task_view::kFAvatarFieldNumber;
const int pb_prj_t_task_view::kFTimeFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_task_view::pb_prj_t_task_view()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_task_view)
}

void pb_prj_t_task_view::InitAsDefaultInstance() {
}

pb_prj_t_task_view::pb_prj_t_task_view(const pb_prj_t_task_view& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_task_view)
}

void pb_prj_t_task_view::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_task_view::~pb_prj_t_task_view() {
  // @@protoc_insertion_point(destructor:pb_prj_t_task_view)
  SharedDtor();
}

void pb_prj_t_task_view::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_avatar_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_task_view::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_task_view::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_task_view_descriptor_;
}

const pb_prj_t_task_view& pb_prj_t_task_view::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_task_view* pb_prj_t_task_view::default_instance_ = NULL;

pb_prj_t_task_view* pb_prj_t_task_view::New() const {
  return new pb_prj_t_task_view;
}

void pb_prj_t_task_view::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_task_view*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(f_uin_, f_time_);
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_avatar()) {
      if (f_avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_avatar_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_task_view::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_task_view)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_avatar;
        break;
      }

      // optional string f_avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_f_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_avatar().data(), this->f_avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_time;
        break;
      }

      // optional int32 f_time = 4;
      case 4: {
        if (tag == 32) {
         parse_f_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_task_view)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_task_view)
  return false;
#undef DO_
}

void pb_prj_t_task_view::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_task_view)
  // optional int32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_avatar = 3;
  if (has_f_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_avatar().data(), this->f_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_avatar(), output);
  }

  // optional int32 f_time = 4;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_task_view)
}

::google::protobuf::uint8* pb_prj_t_task_view::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_task_view)
  // optional int32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_avatar = 3;
  if (has_f_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_avatar().data(), this->f_avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_avatar(), target);
  }

  // optional int32 f_time = 4;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_task_view)
  return target;
}

int pb_prj_t_task_view::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_avatar = 3;
    if (has_f_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_avatar());
    }

    // optional int32 f_time = 4;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_task_view::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_task_view* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_task_view*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_task_view::MergeFrom(const pb_prj_t_task_view& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_avatar()) {
      set_f_avatar(from.f_avatar());
    }
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_task_view::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_task_view::CopyFrom(const pb_prj_t_task_view& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_task_view::IsInitialized() const {

  return true;
}

void pb_prj_t_task_view::Swap(pb_prj_t_task_view* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_avatar_, other->f_avatar_);
    std::swap(f_time_, other->f_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_task_view::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_task_view_descriptor_;
  metadata.reflection = pb_prj_t_task_view_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_task_details::kFTaskFieldNumber;
const int pb_prj_t_task_details::kFReportListFieldNumber;
const int pb_prj_t_task_details::kFReportCountFieldNumber;
const int pb_prj_t_task_details::kFViewListFieldNumber;
const int pb_prj_t_task_details::kFViewCountFieldNumber;
const int pb_prj_t_task_details::kFPositionListFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_task_details::pb_prj_t_task_details()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_task_details)
}

void pb_prj_t_task_details::InitAsDefaultInstance() {
  f_task_ = const_cast< ::pb_prj_t_task*>(&::pb_prj_t_task::default_instance());
}

pb_prj_t_task_details::pb_prj_t_task_details(const pb_prj_t_task_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_task_details)
}

void pb_prj_t_task_details::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_task_ = NULL;
  f_report_count_ = 0;
  f_view_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_task_details::~pb_prj_t_task_details() {
  // @@protoc_insertion_point(destructor:pb_prj_t_task_details)
  SharedDtor();
}

void pb_prj_t_task_details::SharedDtor() {
  if (this != default_instance_) {
    delete f_task_;
  }
}

void pb_prj_t_task_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_task_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_task_details_descriptor_;
}

const pb_prj_t_task_details& pb_prj_t_task_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_task_details* pb_prj_t_task_details::default_instance_ = NULL;

pb_prj_t_task_details* pb_prj_t_task_details::New() const {
  return new pb_prj_t_task_details;
}

void pb_prj_t_task_details::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_task_details*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 21) {
    ZR_(f_report_count_, f_view_count_);
    if (has_f_task()) {
      if (f_task_ != NULL) f_task_->::pb_prj_t_task::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_report_list_.Clear();
  f_view_list_.Clear();
  f_position_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_task_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_task_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_prj_t_task f_task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_report_list;
        break;
      }

      // repeated .pb_prj_t_task_report f_report_list = 2;
      case 2: {
        if (tag == 18) {
         parse_f_report_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_report_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_report_list;
        if (input->ExpectTag(24)) goto parse_f_report_count;
        break;
      }

      // optional int32 f_report_count = 3;
      case 3: {
        if (tag == 24) {
         parse_f_report_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_report_count_)));
          set_has_f_report_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_view_list;
        break;
      }

      // repeated .pb_prj_t_task_view f_view_list = 4;
      case 4: {
        if (tag == 34) {
         parse_f_view_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_view_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_view_list;
        if (input->ExpectTag(40)) goto parse_f_view_count;
        break;
      }

      // optional int32 f_view_count = 5;
      case 5: {
        if (tag == 40) {
         parse_f_view_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_view_count_)));
          set_has_f_view_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_position_list;
        break;
      }

      // repeated string f_position_list = 6;
      case 6: {
        if (tag == 50) {
         parse_f_position_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_position_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_position_list(this->f_position_list_size() - 1).data(),
            this->f_position_list(this->f_position_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_position_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_position_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_task_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_task_details)
  return false;
#undef DO_
}

void pb_prj_t_task_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_task_details)
  // optional .pb_prj_t_task f_task = 1;
  if (has_f_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_task(), output);
  }

  // repeated .pb_prj_t_task_report f_report_list = 2;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_report_list(i), output);
  }

  // optional int32 f_report_count = 3;
  if (has_f_report_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_report_count(), output);
  }

  // repeated .pb_prj_t_task_view f_view_list = 4;
  for (int i = 0; i < this->f_view_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->f_view_list(i), output);
  }

  // optional int32 f_view_count = 5;
  if (has_f_view_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_view_count(), output);
  }

  // repeated string f_position_list = 6;
  for (int i = 0; i < this->f_position_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_position_list(i).data(), this->f_position_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_position_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->f_position_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_task_details)
}

::google::protobuf::uint8* pb_prj_t_task_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_task_details)
  // optional .pb_prj_t_task f_task = 1;
  if (has_f_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_task(), target);
  }

  // repeated .pb_prj_t_task_report f_report_list = 2;
  for (int i = 0; i < this->f_report_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_report_list(i), target);
  }

  // optional int32 f_report_count = 3;
  if (has_f_report_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_report_count(), target);
  }

  // repeated .pb_prj_t_task_view f_view_list = 4;
  for (int i = 0; i < this->f_view_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->f_view_list(i), target);
  }

  // optional int32 f_view_count = 5;
  if (has_f_view_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_view_count(), target);
  }

  // repeated string f_position_list = 6;
  for (int i = 0; i < this->f_position_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_position_list(i).data(), this->f_position_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_position_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->f_position_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_task_details)
  return target;
}

int pb_prj_t_task_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_prj_t_task f_task = 1;
    if (has_f_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_task());
    }

    // optional int32 f_report_count = 3;
    if (has_f_report_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_report_count());
    }

    // optional int32 f_view_count = 5;
    if (has_f_view_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_view_count());
    }

  }
  // repeated .pb_prj_t_task_report f_report_list = 2;
  total_size += 1 * this->f_report_list_size();
  for (int i = 0; i < this->f_report_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_report_list(i));
  }

  // repeated .pb_prj_t_task_view f_view_list = 4;
  total_size += 1 * this->f_view_list_size();
  for (int i = 0; i < this->f_view_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_view_list(i));
  }

  // repeated string f_position_list = 6;
  total_size += 1 * this->f_position_list_size();
  for (int i = 0; i < this->f_position_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_position_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_task_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_task_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_task_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_task_details::MergeFrom(const pb_prj_t_task_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_report_list_.MergeFrom(from.f_report_list_);
  f_view_list_.MergeFrom(from.f_view_list_);
  f_position_list_.MergeFrom(from.f_position_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_task()) {
      mutable_f_task()->::pb_prj_t_task::MergeFrom(from.f_task());
    }
    if (from.has_f_report_count()) {
      set_f_report_count(from.f_report_count());
    }
    if (from.has_f_view_count()) {
      set_f_view_count(from.f_view_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_task_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_task_details::CopyFrom(const pb_prj_t_task_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_task_details::IsInitialized() const {

  return true;
}

void pb_prj_t_task_details::Swap(pb_prj_t_task_details* other) {
  if (other != this) {
    std::swap(f_task_, other->f_task_);
    f_report_list_.Swap(&other->f_report_list_);
    std::swap(f_report_count_, other->f_report_count_);
    f_view_list_.Swap(&other->f_view_list_);
    std::swap(f_view_count_, other->f_view_count_);
    f_position_list_.Swap(&other->f_position_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_task_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_task_details_descriptor_;
  metadata.reflection = pb_prj_t_task_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_task_list::kFPrjIdFieldNumber;
const int pb_prj_t_task_list::kFUpdateTypeFieldNumber;
const int pb_prj_t_task_list::kFListTypeFieldNumber;
const int pb_prj_t_task_list::kFLastUpdateTidFieldNumber;
const int pb_prj_t_task_list::kFTasksFieldNumber;
const int pb_prj_t_task_list::kFCountFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_task_list::pb_prj_t_task_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_task_list)
}

void pb_prj_t_task_list::InitAsDefaultInstance() {
}

pb_prj_t_task_list::pb_prj_t_task_list(const pb_prj_t_task_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_task_list)
}

void pb_prj_t_task_list::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_update_type_ = 0;
  f_list_type_ = 0;
  f_last_update_tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_task_list::~pb_prj_t_task_list() {
  // @@protoc_insertion_point(destructor:pb_prj_t_task_list)
  SharedDtor();
}

void pb_prj_t_task_list::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_last_update_tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_last_update_tid_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_task_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_task_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_task_list_descriptor_;
}

const pb_prj_t_task_list& pb_prj_t_task_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_task_list* pb_prj_t_task_list::default_instance_ = NULL;

pb_prj_t_task_list* pb_prj_t_task_list::New() const {
  return new pb_prj_t_task_list;
}

void pb_prj_t_task_list::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_task_list*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(f_update_type_, f_list_type_);
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_last_update_tid()) {
      if (f_last_update_tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_last_update_tid_->clear();
      }
    }
    f_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_task_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_task_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_update_type;
        break;
      }

      // optional int32 f_update_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_update_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_list_type;
        break;
      }

      // optional int32 f_list_type = 3;
      case 3: {
        if (tag == 24) {
         parse_f_list_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_list_type_)));
          set_has_f_list_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_last_update_tid;
        break;
      }

      // optional string f_last_update_tid = 4;
      case 4: {
        if (tag == 34) {
         parse_f_last_update_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_last_update_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_last_update_tid().data(), this->f_last_update_tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_last_update_tid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_tasks;
        break;
      }

      // repeated .pb_prj_t_task f_tasks = 5;
      case 5: {
        if (tag == 42) {
         parse_f_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_tasks;
        if (input->ExpectTag(48)) goto parse_f_count;
        break;
      }

      // optional int32 f_count = 6;
      case 6: {
        if (tag == 48) {
         parse_f_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_count_)));
          set_has_f_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_task_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_task_list)
  return false;
#undef DO_
}

void pb_prj_t_task_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_task_list)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // optional int32 f_update_type = 2;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_update_type(), output);
  }

  // optional int32 f_list_type = 3;
  if (has_f_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_list_type(), output);
  }

  // optional string f_last_update_tid = 4;
  if (has_f_last_update_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_update_tid().data(), this->f_last_update_tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_update_tid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_last_update_tid(), output);
  }

  // repeated .pb_prj_t_task f_tasks = 5;
  for (int i = 0; i < this->f_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_tasks(i), output);
  }

  // optional int32 f_count = 6;
  if (has_f_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_task_list)
}

::google::protobuf::uint8* pb_prj_t_task_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_task_list)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // optional int32 f_update_type = 2;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_update_type(), target);
  }

  // optional int32 f_list_type = 3;
  if (has_f_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_list_type(), target);
  }

  // optional string f_last_update_tid = 4;
  if (has_f_last_update_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_last_update_tid().data(), this->f_last_update_tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_last_update_tid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_last_update_tid(), target);
  }

  // repeated .pb_prj_t_task f_tasks = 5;
  for (int i = 0; i < this->f_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_tasks(i), target);
  }

  // optional int32 f_count = 6;
  if (has_f_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_task_list)
  return target;
}

int pb_prj_t_task_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional int32 f_update_type = 2;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional int32 f_list_type = 3;
    if (has_f_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_list_type());
    }

    // optional string f_last_update_tid = 4;
    if (has_f_last_update_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_last_update_tid());
    }

    // optional int32 f_count = 6;
    if (has_f_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_count());
    }

  }
  // repeated .pb_prj_t_task f_tasks = 5;
  total_size += 1 * this->f_tasks_size();
  for (int i = 0; i < this->f_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_task_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_task_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_task_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_task_list::MergeFrom(const pb_prj_t_task_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_tasks_.MergeFrom(from.f_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_list_type()) {
      set_f_list_type(from.f_list_type());
    }
    if (from.has_f_last_update_tid()) {
      set_f_last_update_tid(from.f_last_update_tid());
    }
    if (from.has_f_count()) {
      set_f_count(from.f_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_task_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_task_list::CopyFrom(const pb_prj_t_task_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_task_list::IsInitialized() const {

  return true;
}

void pb_prj_t_task_list::Swap(pb_prj_t_task_list* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_update_type_, other->f_update_type_);
    std::swap(f_list_type_, other->f_list_type_);
    std::swap(f_last_update_tid_, other->f_last_update_tid_);
    f_tasks_.Swap(&other->f_tasks_);
    std::swap(f_count_, other->f_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_task_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_task_list_descriptor_;
  metadata.reflection = pb_prj_t_task_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_weather_base::kFCurrentTemFieldNumber;
const int pb_prj_t_weather_base::kFWeatherInfoFieldNumber;
const int pb_prj_t_weather_base::kFDateFieldNumber;
const int pb_prj_t_weather_base::kFWeatherTypeFieldNumber;
const int pb_prj_t_weather_base::kFReminderFieldNumber;
const int pb_prj_t_weather_base::kFAirQualityFieldNumber;
const int pb_prj_t_weather_base::kFAirQualityDateFieldNumber;
const int pb_prj_t_weather_base::kFProvinceFieldNumber;
const int pb_prj_t_weather_base::kFCityFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_weather_base::pb_prj_t_weather_base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_weather_base)
}

void pb_prj_t_weather_base::InitAsDefaultInstance() {
}

pb_prj_t_weather_base::pb_prj_t_weather_base(const pb_prj_t_weather_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_weather_base)
}

void pb_prj_t_weather_base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_current_tem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weather_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weather_type_ = 0;
  f_reminder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_air_quality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_air_quality_date_ = 0;
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_weather_base::~pb_prj_t_weather_base() {
  // @@protoc_insertion_point(destructor:pb_prj_t_weather_base)
  SharedDtor();
}

void pb_prj_t_weather_base::SharedDtor() {
  if (f_current_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_current_tem_;
  }
  if (f_weather_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_weather_info_;
  }
  if (f_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_date_;
  }
  if (f_reminder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_reminder_;
  }
  if (f_air_quality_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_air_quality_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_weather_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_weather_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_weather_base_descriptor_;
}

const pb_prj_t_weather_base& pb_prj_t_weather_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_weather_base* pb_prj_t_weather_base::default_instance_ = NULL;

pb_prj_t_weather_base* pb_prj_t_weather_base::New() const {
  return new pb_prj_t_weather_base;
}

void pb_prj_t_weather_base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_weather_base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_weather_type_, f_air_quality_date_);
    if (has_f_current_tem()) {
      if (f_current_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_current_tem_->clear();
      }
    }
    if (has_f_weather_info()) {
      if (f_weather_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_weather_info_->clear();
      }
    }
    if (has_f_date()) {
      if (f_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_date_->clear();
      }
    }
    if (has_f_reminder()) {
      if (f_reminder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_reminder_->clear();
      }
    }
    if (has_f_air_quality()) {
      if (f_air_quality_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_air_quality_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
  }
  if (has_f_city()) {
    if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_city_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_weather_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_weather_base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_current_tem = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_current_tem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_current_tem().data(), this->f_current_tem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_current_tem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_weather_info;
        break;
      }

      // optional string f_weather_info = 2;
      case 2: {
        if (tag == 18) {
         parse_f_weather_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_weather_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_weather_info().data(), this->f_weather_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_weather_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_date;
        break;
      }

      // optional string f_date = 3;
      case 3: {
        if (tag == 26) {
         parse_f_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_date().data(), this->f_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_weather_type;
        break;
      }

      // optional int32 f_weather_type = 4;
      case 4: {
        if (tag == 32) {
         parse_f_weather_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weather_type_)));
          set_has_f_weather_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_reminder;
        break;
      }

      // optional string f_reminder = 5;
      case 5: {
        if (tag == 42) {
         parse_f_reminder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_reminder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_reminder().data(), this->f_reminder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_reminder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_air_quality;
        break;
      }

      // optional string f_air_quality = 6;
      case 6: {
        if (tag == 50) {
         parse_f_air_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_air_quality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_air_quality().data(), this->f_air_quality().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_air_quality");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_air_quality_date;
        break;
      }

      // optional int32 f_air_quality_date = 7;
      case 7: {
        if (tag == 56) {
         parse_f_air_quality_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_air_quality_date_)));
          set_has_f_air_quality_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_province;
        break;
      }

      // optional string f_province = 8;
      case 8: {
        if (tag == 66) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_city;
        break;
      }

      // optional string f_city = 9;
      case 9: {
        if (tag == 74) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_weather_base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_weather_base)
  return false;
#undef DO_
}

void pb_prj_t_weather_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_weather_base)
  // optional string f_current_tem = 1;
  if (has_f_current_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_current_tem().data(), this->f_current_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_current_tem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_current_tem(), output);
  }

  // optional string f_weather_info = 2;
  if (has_f_weather_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_weather_info().data(), this->f_weather_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_weather_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_weather_info(), output);
  }

  // optional string f_date = 3;
  if (has_f_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_date().data(), this->f_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_date(), output);
  }

  // optional int32 f_weather_type = 4;
  if (has_f_weather_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_weather_type(), output);
  }

  // optional string f_reminder = 5;
  if (has_f_reminder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_reminder().data(), this->f_reminder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_reminder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_reminder(), output);
  }

  // optional string f_air_quality = 6;
  if (has_f_air_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_air_quality().data(), this->f_air_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_air_quality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_air_quality(), output);
  }

  // optional int32 f_air_quality_date = 7;
  if (has_f_air_quality_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_air_quality_date(), output);
  }

  // optional string f_province = 8;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_province(), output);
  }

  // optional string f_city = 9;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_weather_base)
}

::google::protobuf::uint8* pb_prj_t_weather_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_weather_base)
  // optional string f_current_tem = 1;
  if (has_f_current_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_current_tem().data(), this->f_current_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_current_tem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_current_tem(), target);
  }

  // optional string f_weather_info = 2;
  if (has_f_weather_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_weather_info().data(), this->f_weather_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_weather_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_weather_info(), target);
  }

  // optional string f_date = 3;
  if (has_f_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_date().data(), this->f_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_date(), target);
  }

  // optional int32 f_weather_type = 4;
  if (has_f_weather_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_weather_type(), target);
  }

  // optional string f_reminder = 5;
  if (has_f_reminder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_reminder().data(), this->f_reminder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_reminder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_reminder(), target);
  }

  // optional string f_air_quality = 6;
  if (has_f_air_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_air_quality().data(), this->f_air_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_air_quality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_air_quality(), target);
  }

  // optional int32 f_air_quality_date = 7;
  if (has_f_air_quality_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_air_quality_date(), target);
  }

  // optional string f_province = 8;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_province(), target);
  }

  // optional string f_city = 9;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_weather_base)
  return target;
}

int pb_prj_t_weather_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_current_tem = 1;
    if (has_f_current_tem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_current_tem());
    }

    // optional string f_weather_info = 2;
    if (has_f_weather_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_weather_info());
    }

    // optional string f_date = 3;
    if (has_f_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_date());
    }

    // optional int32 f_weather_type = 4;
    if (has_f_weather_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weather_type());
    }

    // optional string f_reminder = 5;
    if (has_f_reminder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_reminder());
    }

    // optional string f_air_quality = 6;
    if (has_f_air_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_air_quality());
    }

    // optional int32 f_air_quality_date = 7;
    if (has_f_air_quality_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_air_quality_date());
    }

    // optional string f_province = 8;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_city = 9;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_weather_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_weather_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_weather_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_weather_base::MergeFrom(const pb_prj_t_weather_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_current_tem()) {
      set_f_current_tem(from.f_current_tem());
    }
    if (from.has_f_weather_info()) {
      set_f_weather_info(from.f_weather_info());
    }
    if (from.has_f_date()) {
      set_f_date(from.f_date());
    }
    if (from.has_f_weather_type()) {
      set_f_weather_type(from.f_weather_type());
    }
    if (from.has_f_reminder()) {
      set_f_reminder(from.f_reminder());
    }
    if (from.has_f_air_quality()) {
      set_f_air_quality(from.f_air_quality());
    }
    if (from.has_f_air_quality_date()) {
      set_f_air_quality_date(from.f_air_quality_date());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_weather_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_weather_base::CopyFrom(const pb_prj_t_weather_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_weather_base::IsInitialized() const {

  return true;
}

void pb_prj_t_weather_base::Swap(pb_prj_t_weather_base* other) {
  if (other != this) {
    std::swap(f_current_tem_, other->f_current_tem_);
    std::swap(f_weather_info_, other->f_weather_info_);
    std::swap(f_date_, other->f_date_);
    std::swap(f_weather_type_, other->f_weather_type_);
    std::swap(f_reminder_, other->f_reminder_);
    std::swap(f_air_quality_, other->f_air_quality_);
    std::swap(f_air_quality_date_, other->f_air_quality_date_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_weather_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_weather_base_descriptor_;
  metadata.reflection = pb_prj_t_weather_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_reminder::kFReminderTypeFieldNumber;
const int pb_prj_t_reminder::kFReminderTitleFieldNumber;
const int pb_prj_t_reminder::kFReminderInfosFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_reminder::pb_prj_t_reminder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_reminder)
}

void pb_prj_t_reminder::InitAsDefaultInstance() {
}

pb_prj_t_reminder::pb_prj_t_reminder(const pb_prj_t_reminder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_reminder)
}

void pb_prj_t_reminder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_reminder_type_ = 0;
  f_reminder_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_reminder::~pb_prj_t_reminder() {
  // @@protoc_insertion_point(destructor:pb_prj_t_reminder)
  SharedDtor();
}

void pb_prj_t_reminder::SharedDtor() {
  if (f_reminder_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_reminder_title_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_reminder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_reminder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_reminder_descriptor_;
}

const pb_prj_t_reminder& pb_prj_t_reminder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_reminder* pb_prj_t_reminder::default_instance_ = NULL;

pb_prj_t_reminder* pb_prj_t_reminder::New() const {
  return new pb_prj_t_reminder;
}

void pb_prj_t_reminder::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    f_reminder_type_ = 0;
    if (has_f_reminder_title()) {
      if (f_reminder_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_reminder_title_->clear();
      }
    }
  }
  f_reminder_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_reminder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_reminder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_reminder_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_reminder_type_)));
          set_has_f_reminder_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_reminder_title;
        break;
      }

      // optional string f_reminder_title = 2;
      case 2: {
        if (tag == 18) {
         parse_f_reminder_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_reminder_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_reminder_title().data(), this->f_reminder_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_reminder_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_reminder_infos;
        break;
      }

      // repeated string f_reminder_infos = 3;
      case 3: {
        if (tag == 26) {
         parse_f_reminder_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_f_reminder_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_reminder_infos(this->f_reminder_infos_size() - 1).data(),
            this->f_reminder_infos(this->f_reminder_infos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_reminder_infos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_reminder_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_reminder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_reminder)
  return false;
#undef DO_
}

void pb_prj_t_reminder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_reminder)
  // optional int32 f_reminder_type = 1;
  if (has_f_reminder_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_reminder_type(), output);
  }

  // optional string f_reminder_title = 2;
  if (has_f_reminder_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_reminder_title().data(), this->f_reminder_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_reminder_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_reminder_title(), output);
  }

  // repeated string f_reminder_infos = 3;
  for (int i = 0; i < this->f_reminder_infos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->f_reminder_infos(i).data(), this->f_reminder_infos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "f_reminder_infos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->f_reminder_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_reminder)
}

::google::protobuf::uint8* pb_prj_t_reminder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_reminder)
  // optional int32 f_reminder_type = 1;
  if (has_f_reminder_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_reminder_type(), target);
  }

  // optional string f_reminder_title = 2;
  if (has_f_reminder_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_reminder_title().data(), this->f_reminder_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_reminder_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_reminder_title(), target);
  }

  // repeated string f_reminder_infos = 3;
  for (int i = 0; i < this->f_reminder_infos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_reminder_infos(i).data(), this->f_reminder_infos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_reminder_infos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->f_reminder_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_reminder)
  return target;
}

int pb_prj_t_reminder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_reminder_type = 1;
    if (has_f_reminder_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_reminder_type());
    }

    // optional string f_reminder_title = 2;
    if (has_f_reminder_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_reminder_title());
    }

  }
  // repeated string f_reminder_infos = 3;
  total_size += 1 * this->f_reminder_infos_size();
  for (int i = 0; i < this->f_reminder_infos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->f_reminder_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_reminder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_reminder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_reminder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_reminder::MergeFrom(const pb_prj_t_reminder& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_reminder_infos_.MergeFrom(from.f_reminder_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_reminder_type()) {
      set_f_reminder_type(from.f_reminder_type());
    }
    if (from.has_f_reminder_title()) {
      set_f_reminder_title(from.f_reminder_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_reminder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_reminder::CopyFrom(const pb_prj_t_reminder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_reminder::IsInitialized() const {

  return true;
}

void pb_prj_t_reminder::Swap(pb_prj_t_reminder* other) {
  if (other != this) {
    std::swap(f_reminder_type_, other->f_reminder_type_);
    std::swap(f_reminder_title_, other->f_reminder_title_);
    f_reminder_infos_.Swap(&other->f_reminder_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_reminder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_reminder_descriptor_;
  metadata.reflection = pb_prj_t_reminder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_weather_details::kFHightTemFieldNumber;
const int pb_prj_t_weather_details::kFLowTemFieldNumber;
const int pb_prj_t_weather_details::kFCurrentTemFieldNumber;
const int pb_prj_t_weather_details::kFWeatherInfoFieldNumber;
const int pb_prj_t_weather_details::kFWindDirectionFieldNumber;
const int pb_prj_t_weather_details::kFWindPowerFieldNumber;
const int pb_prj_t_weather_details::kFDateFieldNumber;
const int pb_prj_t_weather_details::kFModifyTimeFieldNumber;
const int pb_prj_t_weather_details::kFWeatherTypeFieldNumber;
const int pb_prj_t_weather_details::kFRemindersFieldNumber;
const int pb_prj_t_weather_details::kFAirQualityFieldNumber;
const int pb_prj_t_weather_details::kFAirQualityDateFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_weather_details::pb_prj_t_weather_details()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_weather_details)
}

void pb_prj_t_weather_details::InitAsDefaultInstance() {
}

pb_prj_t_weather_details::pb_prj_t_weather_details(const pb_prj_t_weather_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_weather_details)
}

void pb_prj_t_weather_details::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_hight_tem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_low_tem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_current_tem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weather_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_wind_direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_wind_power_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_modify_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weather_type_ = 0;
  f_air_quality_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_air_quality_date_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_weather_details::~pb_prj_t_weather_details() {
  // @@protoc_insertion_point(destructor:pb_prj_t_weather_details)
  SharedDtor();
}

void pb_prj_t_weather_details::SharedDtor() {
  if (f_hight_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_hight_tem_;
  }
  if (f_low_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_low_tem_;
  }
  if (f_current_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_current_tem_;
  }
  if (f_weather_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_weather_info_;
  }
  if (f_wind_direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_wind_direction_;
  }
  if (f_wind_power_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_wind_power_;
  }
  if (f_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_date_;
  }
  if (f_modify_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_modify_time_;
  }
  if (f_air_quality_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_air_quality_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_weather_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_weather_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_weather_details_descriptor_;
}

const pb_prj_t_weather_details& pb_prj_t_weather_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_weather_details* pb_prj_t_weather_details::default_instance_ = NULL;

pb_prj_t_weather_details* pb_prj_t_weather_details::New() const {
  return new pb_prj_t_weather_details;
}

void pb_prj_t_weather_details::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_weather_details*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_f_hight_tem()) {
      if (f_hight_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_hight_tem_->clear();
      }
    }
    if (has_f_low_tem()) {
      if (f_low_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_low_tem_->clear();
      }
    }
    if (has_f_current_tem()) {
      if (f_current_tem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_current_tem_->clear();
      }
    }
    if (has_f_weather_info()) {
      if (f_weather_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_weather_info_->clear();
      }
    }
    if (has_f_wind_direction()) {
      if (f_wind_direction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_wind_direction_->clear();
      }
    }
    if (has_f_wind_power()) {
      if (f_wind_power_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_wind_power_->clear();
      }
    }
    if (has_f_date()) {
      if (f_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_date_->clear();
      }
    }
    if (has_f_modify_time()) {
      if (f_modify_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_modify_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(f_weather_type_, f_air_quality_date_);
    if (has_f_air_quality()) {
      if (f_air_quality_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_air_quality_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_reminders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_weather_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_weather_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_hight_tem = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_hight_tem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_hight_tem().data(), this->f_hight_tem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_hight_tem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_low_tem;
        break;
      }

      // optional string f_low_tem = 2;
      case 2: {
        if (tag == 18) {
         parse_f_low_tem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_low_tem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_low_tem().data(), this->f_low_tem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_low_tem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_current_tem;
        break;
      }

      // optional string f_current_tem = 3;
      case 3: {
        if (tag == 26) {
         parse_f_current_tem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_current_tem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_current_tem().data(), this->f_current_tem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_current_tem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_weather_info;
        break;
      }

      // optional string f_weather_info = 4;
      case 4: {
        if (tag == 34) {
         parse_f_weather_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_weather_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_weather_info().data(), this->f_weather_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_weather_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_wind_direction;
        break;
      }

      // optional string f_wind_direction = 5;
      case 5: {
        if (tag == 42) {
         parse_f_wind_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_wind_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_wind_direction().data(), this->f_wind_direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_wind_direction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_wind_power;
        break;
      }

      // optional string f_wind_power = 6;
      case 6: {
        if (tag == 50) {
         parse_f_wind_power:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_wind_power()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_wind_power().data(), this->f_wind_power().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_wind_power");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_date;
        break;
      }

      // optional string f_date = 7;
      case 7: {
        if (tag == 58) {
         parse_f_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_date().data(), this->f_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_modify_time;
        break;
      }

      // optional string f_modify_time = 8;
      case 8: {
        if (tag == 66) {
         parse_f_modify_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_modify_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_modify_time().data(), this->f_modify_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_modify_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_weather_type;
        break;
      }

      // optional int32 f_weather_type = 9;
      case 9: {
        if (tag == 72) {
         parse_f_weather_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weather_type_)));
          set_has_f_weather_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_reminders;
        break;
      }

      // repeated .pb_prj_t_reminder f_reminders = 10;
      case 10: {
        if (tag == 82) {
         parse_f_reminders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_reminders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_reminders;
        if (input->ExpectTag(90)) goto parse_f_air_quality;
        break;
      }

      // optional string f_air_quality = 11;
      case 11: {
        if (tag == 90) {
         parse_f_air_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_air_quality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_air_quality().data(), this->f_air_quality().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_air_quality");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_f_air_quality_date;
        break;
      }

      // optional int32 f_air_quality_date = 12;
      case 12: {
        if (tag == 96) {
         parse_f_air_quality_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_air_quality_date_)));
          set_has_f_air_quality_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_weather_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_weather_details)
  return false;
#undef DO_
}

void pb_prj_t_weather_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_weather_details)
  // optional string f_hight_tem = 1;
  if (has_f_hight_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hight_tem().data(), this->f_hight_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hight_tem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_hight_tem(), output);
  }

  // optional string f_low_tem = 2;
  if (has_f_low_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_low_tem().data(), this->f_low_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_low_tem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_low_tem(), output);
  }

  // optional string f_current_tem = 3;
  if (has_f_current_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_current_tem().data(), this->f_current_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_current_tem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_current_tem(), output);
  }

  // optional string f_weather_info = 4;
  if (has_f_weather_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_weather_info().data(), this->f_weather_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_weather_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_weather_info(), output);
  }

  // optional string f_wind_direction = 5;
  if (has_f_wind_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_wind_direction().data(), this->f_wind_direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_wind_direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_wind_direction(), output);
  }

  // optional string f_wind_power = 6;
  if (has_f_wind_power()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_wind_power().data(), this->f_wind_power().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_wind_power");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_wind_power(), output);
  }

  // optional string f_date = 7;
  if (has_f_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_date().data(), this->f_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_date(), output);
  }

  // optional string f_modify_time = 8;
  if (has_f_modify_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_modify_time().data(), this->f_modify_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_modify_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_modify_time(), output);
  }

  // optional int32 f_weather_type = 9;
  if (has_f_weather_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_weather_type(), output);
  }

  // repeated .pb_prj_t_reminder f_reminders = 10;
  for (int i = 0; i < this->f_reminders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f_reminders(i), output);
  }

  // optional string f_air_quality = 11;
  if (has_f_air_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_air_quality().data(), this->f_air_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_air_quality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_air_quality(), output);
  }

  // optional int32 f_air_quality_date = 12;
  if (has_f_air_quality_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_air_quality_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_weather_details)
}

::google::protobuf::uint8* pb_prj_t_weather_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_weather_details)
  // optional string f_hight_tem = 1;
  if (has_f_hight_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_hight_tem().data(), this->f_hight_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_hight_tem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_hight_tem(), target);
  }

  // optional string f_low_tem = 2;
  if (has_f_low_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_low_tem().data(), this->f_low_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_low_tem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_low_tem(), target);
  }

  // optional string f_current_tem = 3;
  if (has_f_current_tem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_current_tem().data(), this->f_current_tem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_current_tem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_current_tem(), target);
  }

  // optional string f_weather_info = 4;
  if (has_f_weather_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_weather_info().data(), this->f_weather_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_weather_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_weather_info(), target);
  }

  // optional string f_wind_direction = 5;
  if (has_f_wind_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_wind_direction().data(), this->f_wind_direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_wind_direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_wind_direction(), target);
  }

  // optional string f_wind_power = 6;
  if (has_f_wind_power()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_wind_power().data(), this->f_wind_power().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_wind_power");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_wind_power(), target);
  }

  // optional string f_date = 7;
  if (has_f_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_date().data(), this->f_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_date(), target);
  }

  // optional string f_modify_time = 8;
  if (has_f_modify_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_modify_time().data(), this->f_modify_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_modify_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_modify_time(), target);
  }

  // optional int32 f_weather_type = 9;
  if (has_f_weather_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_weather_type(), target);
  }

  // repeated .pb_prj_t_reminder f_reminders = 10;
  for (int i = 0; i < this->f_reminders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f_reminders(i), target);
  }

  // optional string f_air_quality = 11;
  if (has_f_air_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_air_quality().data(), this->f_air_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_air_quality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_air_quality(), target);
  }

  // optional int32 f_air_quality_date = 12;
  if (has_f_air_quality_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_air_quality_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_weather_details)
  return target;
}

int pb_prj_t_weather_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_hight_tem = 1;
    if (has_f_hight_tem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_hight_tem());
    }

    // optional string f_low_tem = 2;
    if (has_f_low_tem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_low_tem());
    }

    // optional string f_current_tem = 3;
    if (has_f_current_tem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_current_tem());
    }

    // optional string f_weather_info = 4;
    if (has_f_weather_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_weather_info());
    }

    // optional string f_wind_direction = 5;
    if (has_f_wind_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_wind_direction());
    }

    // optional string f_wind_power = 6;
    if (has_f_wind_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_wind_power());
    }

    // optional string f_date = 7;
    if (has_f_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_date());
    }

    // optional string f_modify_time = 8;
    if (has_f_modify_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_modify_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_weather_type = 9;
    if (has_f_weather_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weather_type());
    }

    // optional string f_air_quality = 11;
    if (has_f_air_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_air_quality());
    }

    // optional int32 f_air_quality_date = 12;
    if (has_f_air_quality_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_air_quality_date());
    }

  }
  // repeated .pb_prj_t_reminder f_reminders = 10;
  total_size += 1 * this->f_reminders_size();
  for (int i = 0; i < this->f_reminders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_reminders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_weather_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_weather_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_weather_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_weather_details::MergeFrom(const pb_prj_t_weather_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_reminders_.MergeFrom(from.f_reminders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_hight_tem()) {
      set_f_hight_tem(from.f_hight_tem());
    }
    if (from.has_f_low_tem()) {
      set_f_low_tem(from.f_low_tem());
    }
    if (from.has_f_current_tem()) {
      set_f_current_tem(from.f_current_tem());
    }
    if (from.has_f_weather_info()) {
      set_f_weather_info(from.f_weather_info());
    }
    if (from.has_f_wind_direction()) {
      set_f_wind_direction(from.f_wind_direction());
    }
    if (from.has_f_wind_power()) {
      set_f_wind_power(from.f_wind_power());
    }
    if (from.has_f_date()) {
      set_f_date(from.f_date());
    }
    if (from.has_f_modify_time()) {
      set_f_modify_time(from.f_modify_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_weather_type()) {
      set_f_weather_type(from.f_weather_type());
    }
    if (from.has_f_air_quality()) {
      set_f_air_quality(from.f_air_quality());
    }
    if (from.has_f_air_quality_date()) {
      set_f_air_quality_date(from.f_air_quality_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_weather_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_weather_details::CopyFrom(const pb_prj_t_weather_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_weather_details::IsInitialized() const {

  return true;
}

void pb_prj_t_weather_details::Swap(pb_prj_t_weather_details* other) {
  if (other != this) {
    std::swap(f_hight_tem_, other->f_hight_tem_);
    std::swap(f_low_tem_, other->f_low_tem_);
    std::swap(f_current_tem_, other->f_current_tem_);
    std::swap(f_weather_info_, other->f_weather_info_);
    std::swap(f_wind_direction_, other->f_wind_direction_);
    std::swap(f_wind_power_, other->f_wind_power_);
    std::swap(f_date_, other->f_date_);
    std::swap(f_modify_time_, other->f_modify_time_);
    std::swap(f_weather_type_, other->f_weather_type_);
    f_reminders_.Swap(&other->f_reminders_);
    std::swap(f_air_quality_, other->f_air_quality_);
    std::swap(f_air_quality_date_, other->f_air_quality_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_weather_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_weather_details_descriptor_;
  metadata.reflection = pb_prj_t_weather_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_prj_weather::kFPrjIdFieldNumber;
const int pb_prj_t_prj_weather::kFWeatherInfoFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_prj_weather::pb_prj_t_prj_weather()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_prj_weather)
}

void pb_prj_t_prj_weather::InitAsDefaultInstance() {
}

pb_prj_t_prj_weather::pb_prj_t_prj_weather(const pb_prj_t_prj_weather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_prj_weather)
}

void pb_prj_t_prj_weather::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_prj_weather::~pb_prj_t_prj_weather() {
  // @@protoc_insertion_point(destructor:pb_prj_t_prj_weather)
  SharedDtor();
}

void pb_prj_t_prj_weather::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_prj_weather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_prj_weather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_prj_weather_descriptor_;
}

const pb_prj_t_prj_weather& pb_prj_t_prj_weather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_prj_weather* pb_prj_t_prj_weather::default_instance_ = NULL;

pb_prj_t_prj_weather* pb_prj_t_prj_weather::New() const {
  return new pb_prj_t_prj_weather;
}

void pb_prj_t_prj_weather::Clear() {
  if (has_f_prj_id()) {
    if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_prj_id_->clear();
    }
  }
  f_weather_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_prj_weather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_prj_weather)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_weather_info;
        break;
      }

      // repeated .pb_prj_t_weather_details f_weather_info = 2;
      case 2: {
        if (tag == 18) {
         parse_f_weather_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_weather_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_weather_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_prj_weather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_prj_weather)
  return false;
#undef DO_
}

void pb_prj_t_prj_weather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_prj_weather)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // repeated .pb_prj_t_weather_details f_weather_info = 2;
  for (int i = 0; i < this->f_weather_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_weather_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_prj_weather)
}

::google::protobuf::uint8* pb_prj_t_prj_weather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_prj_weather)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // repeated .pb_prj_t_weather_details f_weather_info = 2;
  for (int i = 0; i < this->f_weather_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_weather_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_prj_weather)
  return target;
}

int pb_prj_t_prj_weather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

  }
  // repeated .pb_prj_t_weather_details f_weather_info = 2;
  total_size += 1 * this->f_weather_info_size();
  for (int i = 0; i < this->f_weather_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_weather_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_prj_weather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_prj_weather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_prj_weather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_prj_weather::MergeFrom(const pb_prj_t_prj_weather& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_weather_info_.MergeFrom(from.f_weather_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_prj_weather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_prj_weather::CopyFrom(const pb_prj_t_prj_weather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_prj_weather::IsInitialized() const {

  return true;
}

void pb_prj_t_prj_weather::Swap(pb_prj_t_prj_weather* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    f_weather_info_.Swap(&other->f_weather_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_prj_weather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_prj_weather_descriptor_;
  metadata.reflection = pb_prj_t_prj_weather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_info::kFPrjIdFieldNumber;
const int pb_prj_t_info::kFPrjNameFieldNumber;
const int pb_prj_t_info::kFPrjTypeFieldNumber;
const int pb_prj_t_info::kFPrjImageFieldNumber;
const int pb_prj_t_info::kFGroupIdFieldNumber;
const int pb_prj_t_info::kFProvinceFieldNumber;
const int pb_prj_t_info::kFCityFieldNumber;
const int pb_prj_t_info::kFPrjAddressFieldNumber;
const int pb_prj_t_info::kFMemberCountFieldNumber;
const int pb_prj_t_info::kFFloorAreaFieldNumber;
const int pb_prj_t_info::kFPrjBeginFieldNumber;
const int pb_prj_t_info::kFPrjEndFieldNumber;
const int pb_prj_t_info::kFJianzhuDanweiFieldNumber;
const int pb_prj_t_info::kFShigongDanweiFieldNumber;
const int pb_prj_t_info::kFJianliDanweiFieldNumber;
const int pb_prj_t_info::kFFenbaoDanweiFieldNumber;
const int pb_prj_t_info::kFLatFieldNumber;
const int pb_prj_t_info::kFLonFieldNumber;
const int pb_prj_t_info::kFJobTypeFieldNumber;
const int pb_prj_t_info::kFOtherInfoFieldNumber;
const int pb_prj_t_info::kFSmsMsgFieldNumber;
const int pb_prj_t_info::kFOwnerTasksFieldNumber;
const int pb_prj_t_info::kFOwnerTasksCntFieldNumber;
const int pb_prj_t_info::kFAddTimeFieldNumber;
const int pb_prj_t_info::kFCreaterUinFieldNumber;
const int pb_prj_t_info::kFWeatherFieldNumber;
const int pb_prj_t_info::kFPrjMyJobFieldNumber;
const int pb_prj_t_info::kFOwnerAddTimeFieldNumber;
const int pb_prj_t_info::kFFloatFloorAreaFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_info::pb_prj_t_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_info)
}

void pb_prj_t_info::InitAsDefaultInstance() {
  f_weather_ = const_cast< ::pb_prj_t_weather_base*>(&::pb_prj_t_weather_base::default_instance());
}

pb_prj_t_info::pb_prj_t_info(const pb_prj_t_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_info)
}

void pb_prj_t_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_type_ = 0;
  f_prj_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_prj_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_member_count_ = 0;
  f_floor_area_ = 0;
  f_prj_begin_ = 0;
  f_prj_end_ = 0;
  f_jianzhu_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_shigong_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_jianli_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fenbao_danwei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_lat_ = 0;
  f_lon_ = 0;
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_sms_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_owner_tasks_cnt_ = 0;
  f_add_time_ = 0;
  f_creater_uin_ = 0;
  f_weather_ = NULL;
  f_prj_my_job_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_owner_add_time_ = 0;
  f_float_floor_area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_info::~pb_prj_t_info() {
  // @@protoc_insertion_point(destructor:pb_prj_t_info)
  SharedDtor();
}

void pb_prj_t_info::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_name_;
  }
  if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_image_;
  }
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_address_;
  }
  if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianzhu_danwei_;
  }
  if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_shigong_danwei_;
  }
  if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_jianli_danwei_;
  }
  if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fenbao_danwei_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (f_sms_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_sms_msg_;
  }
  if (f_prj_my_job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_my_job_;
  }
  if (this != default_instance_) {
    delete f_weather_;
  }
}

void pb_prj_t_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_info_descriptor_;
}

const pb_prj_t_info& pb_prj_t_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_info* pb_prj_t_info::default_instance_ = NULL;

pb_prj_t_info* pb_prj_t_info::New() const {
  return new pb_prj_t_info;
}

void pb_prj_t_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_prj_name()) {
      if (f_prj_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_name_->clear();
      }
    }
    f_prj_type_ = 0;
    if (has_f_prj_image()) {
      if (f_prj_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_image_->clear();
      }
    }
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
    if (has_f_prj_address()) {
      if (f_prj_address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_address_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(f_floor_area_, f_prj_begin_);
    f_member_count_ = 0;
    f_prj_end_ = 0;
    if (has_f_jianzhu_danwei()) {
      if (f_jianzhu_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianzhu_danwei_->clear();
      }
    }
    if (has_f_shigong_danwei()) {
      if (f_shigong_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_shigong_danwei_->clear();
      }
    }
    if (has_f_jianli_danwei()) {
      if (f_jianli_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_jianli_danwei_->clear();
      }
    }
    if (has_f_fenbao_danwei()) {
      if (f_fenbao_danwei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fenbao_danwei_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 14614528) {
    ZR_(f_owner_tasks_cnt_, f_lon_);
    f_lat_ = 0;
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_other_info()) {
      if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_other_info_->clear();
      }
    }
    if (has_f_sms_msg()) {
      if (f_sms_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_sms_msg_->clear();
      }
    }
    f_add_time_ = 0;
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(f_owner_add_time_, f_float_floor_area_);
    f_creater_uin_ = 0;
    if (has_f_weather()) {
      if (f_weather_ != NULL) f_weather_->::pb_prj_t_weather_base::Clear();
    }
    if (has_f_prj_my_job()) {
      if (f_prj_my_job_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_my_job_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_owner_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prj_name;
        break;
      }

      // optional string f_prj_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prj_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_name().data(), this->f_prj_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_prj_type;
        break;
      }

      // optional int32 f_prj_type = 3;
      case 3: {
        if (tag == 24) {
         parse_f_prj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_type_)));
          set_has_f_prj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_prj_image;
        break;
      }

      // optional string f_prj_image = 4;
      case 4: {
        if (tag == 34) {
         parse_f_prj_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_image().data(), this->f_prj_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_group_id;
        break;
      }

      // optional string f_group_id = 5;
      case 5: {
        if (tag == 42) {
         parse_f_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_province;
        break;
      }

      // optional string f_province = 6;
      case 6: {
        if (tag == 50) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_city;
        break;
      }

      // optional string f_city = 7;
      case 7: {
        if (tag == 58) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_prj_address;
        break;
      }

      // optional string f_prj_address = 8;
      case 8: {
        if (tag == 66) {
         parse_f_prj_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_address().data(), this->f_prj_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_member_count;
        break;
      }

      // optional int32 f_member_count = 9;
      case 9: {
        if (tag == 72) {
         parse_f_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_member_count_)));
          set_has_f_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_floor_area;
        break;
      }

      // optional int32 f_floor_area = 10;
      case 10: {
        if (tag == 80) {
         parse_f_floor_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_floor_area_)));
          set_has_f_floor_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_f_prj_begin;
        break;
      }

      // optional int32 f_prj_begin = 11;
      case 11: {
        if (tag == 88) {
         parse_f_prj_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_begin_)));
          set_has_f_prj_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_f_prj_end;
        break;
      }

      // optional int32 f_prj_end = 12;
      case 12: {
        if (tag == 96) {
         parse_f_prj_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_end_)));
          set_has_f_prj_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_jianzhu_danwei;
        break;
      }

      // optional string f_jianzhu_danwei = 13;
      case 13: {
        if (tag == 106) {
         parse_f_jianzhu_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianzhu_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianzhu_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_shigong_danwei;
        break;
      }

      // optional string f_shigong_danwei = 14;
      case 14: {
        if (tag == 114) {
         parse_f_shigong_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_shigong_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_shigong_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_f_jianli_danwei;
        break;
      }

      // optional string f_jianli_danwei = 15;
      case 15: {
        if (tag == 122) {
         parse_f_jianli_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_jianli_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_jianli_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_f_fenbao_danwei;
        break;
      }

      // optional string f_fenbao_danwei = 16;
      case 16: {
        if (tag == 130) {
         parse_f_fenbao_danwei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fenbao_danwei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fenbao_danwei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_f_lat;
        break;
      }

      // optional double f_lat = 17;
      case 17: {
        if (tag == 137) {
         parse_f_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lat_)));
          set_has_f_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_f_lon;
        break;
      }

      // optional double f_lon = 18;
      case 18: {
        if (tag == 145) {
         parse_f_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_lon_)));
          set_has_f_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 19;
      case 19: {
        if (tag == 154) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_f_other_info;
        break;
      }

      // optional string f_other_info = 20;
      case 20: {
        if (tag == 162) {
         parse_f_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_other_info().data(), this->f_other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_other_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_f_sms_msg;
        break;
      }

      // optional string f_sms_msg = 21;
      case 21: {
        if (tag == 170) {
         parse_f_sms_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_sms_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_sms_msg().data(), this->f_sms_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_sms_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_f_owner_tasks;
        break;
      }

      // repeated .pb_prj_t_task f_owner_tasks = 22;
      case 22: {
        if (tag == 178) {
         parse_f_owner_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_owner_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_f_owner_tasks;
        if (input->ExpectTag(184)) goto parse_f_owner_tasks_cnt;
        break;
      }

      // optional int32 f_owner_tasks_cnt = 23;
      case 23: {
        if (tag == 184) {
         parse_f_owner_tasks_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_owner_tasks_cnt_)));
          set_has_f_owner_tasks_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_f_add_time;
        break;
      }

      // optional int32 f_add_time = 24;
      case 24: {
        if (tag == 192) {
         parse_f_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_add_time_)));
          set_has_f_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_f_creater_uin;
        break;
      }

      // optional int32 f_creater_uin = 25;
      case 25: {
        if (tag == 200) {
         parse_f_creater_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_creater_uin_)));
          set_has_f_creater_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_f_weather;
        break;
      }

      // optional .pb_prj_t_weather_base f_weather = 26;
      case 26: {
        if (tag == 210) {
         parse_f_weather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_weather()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_f_prj_my_job;
        break;
      }

      // optional string f_prj_my_job = 27;
      case 27: {
        if (tag == 218) {
         parse_f_prj_my_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_my_job()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_my_job().data(), this->f_prj_my_job().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_my_job");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_f_owner_add_time;
        break;
      }

      // optional int32 f_owner_add_time = 28;
      case 28: {
        if (tag == 224) {
         parse_f_owner_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_owner_add_time_)));
          set_has_f_owner_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_f_float_floor_area;
        break;
      }

      // optional float f_float_floor_area = 29;
      case 29: {
        if (tag == 237) {
         parse_f_float_floor_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_float_floor_area_)));
          set_has_f_float_floor_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_info)
  return false;
#undef DO_
}

void pb_prj_t_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_info)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // optional string f_prj_name = 2;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_prj_name(), output);
  }

  // optional int32 f_prj_type = 3;
  if (has_f_prj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_prj_type(), output);
  }

  // optional string f_prj_image = 4;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_prj_image(), output);
  }

  // optional string f_group_id = 5;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_group_id(), output);
  }

  // optional string f_province = 6;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_province(), output);
  }

  // optional string f_city = 7;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_city(), output);
  }

  // optional string f_prj_address = 8;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_prj_address(), output);
  }

  // optional int32 f_member_count = 9;
  if (has_f_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_member_count(), output);
  }

  // optional int32 f_floor_area = 10;
  if (has_f_floor_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->f_floor_area(), output);
  }

  // optional int32 f_prj_begin = 11;
  if (has_f_prj_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->f_prj_begin(), output);
  }

  // optional int32 f_prj_end = 12;
  if (has_f_prj_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_prj_end(), output);
  }

  // optional string f_jianzhu_danwei = 13;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->f_jianzhu_danwei(), output);
  }

  // optional string f_shigong_danwei = 14;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->f_shigong_danwei(), output);
  }

  // optional string f_jianli_danwei = 15;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->f_jianli_danwei(), output);
  }

  // optional string f_fenbao_danwei = 16;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->f_fenbao_danwei(), output);
  }

  // optional double f_lat = 17;
  if (has_f_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->f_lat(), output);
  }

  // optional double f_lon = 18;
  if (has_f_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->f_lon(), output);
  }

  // optional string f_job_type = 19;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->f_job_type(), output);
  }

  // optional string f_other_info = 20;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->f_other_info(), output);
  }

  // optional string f_sms_msg = 21;
  if (has_f_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sms_msg().data(), this->f_sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sms_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->f_sms_msg(), output);
  }

  // repeated .pb_prj_t_task f_owner_tasks = 22;
  for (int i = 0; i < this->f_owner_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->f_owner_tasks(i), output);
  }

  // optional int32 f_owner_tasks_cnt = 23;
  if (has_f_owner_tasks_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->f_owner_tasks_cnt(), output);
  }

  // optional int32 f_add_time = 24;
  if (has_f_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->f_add_time(), output);
  }

  // optional int32 f_creater_uin = 25;
  if (has_f_creater_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->f_creater_uin(), output);
  }

  // optional .pb_prj_t_weather_base f_weather = 26;
  if (has_f_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->f_weather(), output);
  }

  // optional string f_prj_my_job = 27;
  if (has_f_prj_my_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_my_job().data(), this->f_prj_my_job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_my_job");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->f_prj_my_job(), output);
  }

  // optional int32 f_owner_add_time = 28;
  if (has_f_owner_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->f_owner_add_time(), output);
  }

  // optional float f_float_floor_area = 29;
  if (has_f_float_floor_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->f_float_floor_area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_info)
}

::google::protobuf::uint8* pb_prj_t_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_info)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // optional string f_prj_name = 2;
  if (has_f_prj_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_name().data(), this->f_prj_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_prj_name(), target);
  }

  // optional int32 f_prj_type = 3;
  if (has_f_prj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_prj_type(), target);
  }

  // optional string f_prj_image = 4;
  if (has_f_prj_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_image().data(), this->f_prj_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_prj_image(), target);
  }

  // optional string f_group_id = 5;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_group_id(), target);
  }

  // optional string f_province = 6;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_province(), target);
  }

  // optional string f_city = 7;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_city(), target);
  }

  // optional string f_prj_address = 8;
  if (has_f_prj_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_address().data(), this->f_prj_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_prj_address(), target);
  }

  // optional int32 f_member_count = 9;
  if (has_f_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_member_count(), target);
  }

  // optional int32 f_floor_area = 10;
  if (has_f_floor_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->f_floor_area(), target);
  }

  // optional int32 f_prj_begin = 11;
  if (has_f_prj_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->f_prj_begin(), target);
  }

  // optional int32 f_prj_end = 12;
  if (has_f_prj_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_prj_end(), target);
  }

  // optional string f_jianzhu_danwei = 13;
  if (has_f_jianzhu_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianzhu_danwei().data(), this->f_jianzhu_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianzhu_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->f_jianzhu_danwei(), target);
  }

  // optional string f_shigong_danwei = 14;
  if (has_f_shigong_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_shigong_danwei().data(), this->f_shigong_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_shigong_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->f_shigong_danwei(), target);
  }

  // optional string f_jianli_danwei = 15;
  if (has_f_jianli_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_jianli_danwei().data(), this->f_jianli_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_jianli_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->f_jianli_danwei(), target);
  }

  // optional string f_fenbao_danwei = 16;
  if (has_f_fenbao_danwei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fenbao_danwei().data(), this->f_fenbao_danwei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fenbao_danwei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->f_fenbao_danwei(), target);
  }

  // optional double f_lat = 17;
  if (has_f_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->f_lat(), target);
  }

  // optional double f_lon = 18;
  if (has_f_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->f_lon(), target);
  }

  // optional string f_job_type = 19;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->f_job_type(), target);
  }

  // optional string f_other_info = 20;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->f_other_info(), target);
  }

  // optional string f_sms_msg = 21;
  if (has_f_sms_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_sms_msg().data(), this->f_sms_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_sms_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->f_sms_msg(), target);
  }

  // repeated .pb_prj_t_task f_owner_tasks = 22;
  for (int i = 0; i < this->f_owner_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->f_owner_tasks(i), target);
  }

  // optional int32 f_owner_tasks_cnt = 23;
  if (has_f_owner_tasks_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->f_owner_tasks_cnt(), target);
  }

  // optional int32 f_add_time = 24;
  if (has_f_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->f_add_time(), target);
  }

  // optional int32 f_creater_uin = 25;
  if (has_f_creater_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->f_creater_uin(), target);
  }

  // optional .pb_prj_t_weather_base f_weather = 26;
  if (has_f_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->f_weather(), target);
  }

  // optional string f_prj_my_job = 27;
  if (has_f_prj_my_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_my_job().data(), this->f_prj_my_job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_my_job");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->f_prj_my_job(), target);
  }

  // optional int32 f_owner_add_time = 28;
  if (has_f_owner_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->f_owner_add_time(), target);
  }

  // optional float f_float_floor_area = 29;
  if (has_f_float_floor_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->f_float_floor_area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_info)
  return target;
}

int pb_prj_t_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional string f_prj_name = 2;
    if (has_f_prj_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_name());
    }

    // optional int32 f_prj_type = 3;
    if (has_f_prj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_type());
    }

    // optional string f_prj_image = 4;
    if (has_f_prj_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_image());
    }

    // optional string f_group_id = 5;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

    // optional string f_province = 6;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 7;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

    // optional string f_prj_address = 8;
    if (has_f_prj_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_address());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_member_count = 9;
    if (has_f_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_member_count());
    }

    // optional int32 f_floor_area = 10;
    if (has_f_floor_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_floor_area());
    }

    // optional int32 f_prj_begin = 11;
    if (has_f_prj_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_begin());
    }

    // optional int32 f_prj_end = 12;
    if (has_f_prj_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_end());
    }

    // optional string f_jianzhu_danwei = 13;
    if (has_f_jianzhu_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianzhu_danwei());
    }

    // optional string f_shigong_danwei = 14;
    if (has_f_shigong_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_shigong_danwei());
    }

    // optional string f_jianli_danwei = 15;
    if (has_f_jianli_danwei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_jianli_danwei());
    }

    // optional string f_fenbao_danwei = 16;
    if (has_f_fenbao_danwei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fenbao_danwei());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double f_lat = 17;
    if (has_f_lat()) {
      total_size += 2 + 8;
    }

    // optional double f_lon = 18;
    if (has_f_lon()) {
      total_size += 2 + 8;
    }

    // optional string f_job_type = 19;
    if (has_f_job_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_other_info = 20;
    if (has_f_other_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_other_info());
    }

    // optional string f_sms_msg = 21;
    if (has_f_sms_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_sms_msg());
    }

    // optional int32 f_owner_tasks_cnt = 23;
    if (has_f_owner_tasks_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_owner_tasks_cnt());
    }

    // optional int32 f_add_time = 24;
    if (has_f_add_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_add_time());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 f_creater_uin = 25;
    if (has_f_creater_uin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_creater_uin());
    }

    // optional .pb_prj_t_weather_base f_weather = 26;
    if (has_f_weather()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_weather());
    }

    // optional string f_prj_my_job = 27;
    if (has_f_prj_my_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_my_job());
    }

    // optional int32 f_owner_add_time = 28;
    if (has_f_owner_add_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_owner_add_time());
    }

    // optional float f_float_floor_area = 29;
    if (has_f_float_floor_area()) {
      total_size += 2 + 4;
    }

  }
  // repeated .pb_prj_t_task f_owner_tasks = 22;
  total_size += 2 * this->f_owner_tasks_size();
  for (int i = 0; i < this->f_owner_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_owner_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_info::MergeFrom(const pb_prj_t_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_owner_tasks_.MergeFrom(from.f_owner_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_prj_name()) {
      set_f_prj_name(from.f_prj_name());
    }
    if (from.has_f_prj_type()) {
      set_f_prj_type(from.f_prj_type());
    }
    if (from.has_f_prj_image()) {
      set_f_prj_image(from.f_prj_image());
    }
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
    if (from.has_f_prj_address()) {
      set_f_prj_address(from.f_prj_address());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_member_count()) {
      set_f_member_count(from.f_member_count());
    }
    if (from.has_f_floor_area()) {
      set_f_floor_area(from.f_floor_area());
    }
    if (from.has_f_prj_begin()) {
      set_f_prj_begin(from.f_prj_begin());
    }
    if (from.has_f_prj_end()) {
      set_f_prj_end(from.f_prj_end());
    }
    if (from.has_f_jianzhu_danwei()) {
      set_f_jianzhu_danwei(from.f_jianzhu_danwei());
    }
    if (from.has_f_shigong_danwei()) {
      set_f_shigong_danwei(from.f_shigong_danwei());
    }
    if (from.has_f_jianli_danwei()) {
      set_f_jianli_danwei(from.f_jianli_danwei());
    }
    if (from.has_f_fenbao_danwei()) {
      set_f_fenbao_danwei(from.f_fenbao_danwei());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_lat()) {
      set_f_lat(from.f_lat());
    }
    if (from.has_f_lon()) {
      set_f_lon(from.f_lon());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_other_info()) {
      set_f_other_info(from.f_other_info());
    }
    if (from.has_f_sms_msg()) {
      set_f_sms_msg(from.f_sms_msg());
    }
    if (from.has_f_owner_tasks_cnt()) {
      set_f_owner_tasks_cnt(from.f_owner_tasks_cnt());
    }
    if (from.has_f_add_time()) {
      set_f_add_time(from.f_add_time());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_f_creater_uin()) {
      set_f_creater_uin(from.f_creater_uin());
    }
    if (from.has_f_weather()) {
      mutable_f_weather()->::pb_prj_t_weather_base::MergeFrom(from.f_weather());
    }
    if (from.has_f_prj_my_job()) {
      set_f_prj_my_job(from.f_prj_my_job());
    }
    if (from.has_f_owner_add_time()) {
      set_f_owner_add_time(from.f_owner_add_time());
    }
    if (from.has_f_float_floor_area()) {
      set_f_float_floor_area(from.f_float_floor_area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_info::CopyFrom(const pb_prj_t_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_info::IsInitialized() const {

  return true;
}

void pb_prj_t_info::Swap(pb_prj_t_info* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_prj_name_, other->f_prj_name_);
    std::swap(f_prj_type_, other->f_prj_type_);
    std::swap(f_prj_image_, other->f_prj_image_);
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_prj_address_, other->f_prj_address_);
    std::swap(f_member_count_, other->f_member_count_);
    std::swap(f_floor_area_, other->f_floor_area_);
    std::swap(f_prj_begin_, other->f_prj_begin_);
    std::swap(f_prj_end_, other->f_prj_end_);
    std::swap(f_jianzhu_danwei_, other->f_jianzhu_danwei_);
    std::swap(f_shigong_danwei_, other->f_shigong_danwei_);
    std::swap(f_jianli_danwei_, other->f_jianli_danwei_);
    std::swap(f_fenbao_danwei_, other->f_fenbao_danwei_);
    std::swap(f_lat_, other->f_lat_);
    std::swap(f_lon_, other->f_lon_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_other_info_, other->f_other_info_);
    std::swap(f_sms_msg_, other->f_sms_msg_);
    f_owner_tasks_.Swap(&other->f_owner_tasks_);
    std::swap(f_owner_tasks_cnt_, other->f_owner_tasks_cnt_);
    std::swap(f_add_time_, other->f_add_time_);
    std::swap(f_creater_uin_, other->f_creater_uin_);
    std::swap(f_weather_, other->f_weather_);
    std::swap(f_prj_my_job_, other->f_prj_my_job_);
    std::swap(f_owner_add_time_, other->f_owner_add_time_);
    std::swap(f_float_floor_area_, other->f_float_floor_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_info_descriptor_;
  metadata.reflection = pb_prj_t_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_log::kFLogContentFieldNumber;
const int pb_prj_t_log::kFAddTimeFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_log::pb_prj_t_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_log)
}

void pb_prj_t_log::InitAsDefaultInstance() {
}

pb_prj_t_log::pb_prj_t_log(const pb_prj_t_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_log)
}

void pb_prj_t_log::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_log_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_add_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_log::~pb_prj_t_log() {
  // @@protoc_insertion_point(destructor:pb_prj_t_log)
  SharedDtor();
}

void pb_prj_t_log::SharedDtor() {
  if (f_log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_log_content_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_log_descriptor_;
}

const pb_prj_t_log& pb_prj_t_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_log* pb_prj_t_log::default_instance_ = NULL;

pb_prj_t_log* pb_prj_t_log::New() const {
  return new pb_prj_t_log;
}

void pb_prj_t_log::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_log_content()) {
      if (f_log_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_log_content_->clear();
      }
    }
    f_add_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_log_content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_log_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_log_content().data(), this->f_log_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_log_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_add_time;
        break;
      }

      // optional int32 f_add_time = 2;
      case 2: {
        if (tag == 16) {
         parse_f_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_add_time_)));
          set_has_f_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_log)
  return false;
#undef DO_
}

void pb_prj_t_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_log)
  // optional string f_log_content = 1;
  if (has_f_log_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_log_content().data(), this->f_log_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_log_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_log_content(), output);
  }

  // optional int32 f_add_time = 2;
  if (has_f_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_add_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_log)
}

::google::protobuf::uint8* pb_prj_t_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_log)
  // optional string f_log_content = 1;
  if (has_f_log_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_log_content().data(), this->f_log_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_log_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_log_content(), target);
  }

  // optional int32 f_add_time = 2;
  if (has_f_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_add_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_log)
  return target;
}

int pb_prj_t_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_log_content = 1;
    if (has_f_log_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_log_content());
    }

    // optional int32 f_add_time = 2;
    if (has_f_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_add_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_log::MergeFrom(const pb_prj_t_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_log_content()) {
      set_f_log_content(from.f_log_content());
    }
    if (from.has_f_add_time()) {
      set_f_add_time(from.f_add_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_log::CopyFrom(const pb_prj_t_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_log::IsInitialized() const {

  return true;
}

void pb_prj_t_log::Swap(pb_prj_t_log* other) {
  if (other != this) {
    std::swap(f_log_content_, other->f_log_content_);
    std::swap(f_add_time_, other->f_add_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_log_descriptor_;
  metadata.reflection = pb_prj_t_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_prj::kFUpdateTypeFieldNumber;
const int pb_prj_t_prj::kFPrjsFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_prj::pb_prj_t_prj()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_prj)
}

void pb_prj_t_prj::InitAsDefaultInstance() {
}

pb_prj_t_prj::pb_prj_t_prj(const pb_prj_t_prj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_prj)
}

void pb_prj_t_prj::SharedCtor() {
  _cached_size_ = 0;
  f_update_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_prj::~pb_prj_t_prj() {
  // @@protoc_insertion_point(destructor:pb_prj_t_prj)
  SharedDtor();
}

void pb_prj_t_prj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_prj_t_prj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_prj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_prj_descriptor_;
}

const pb_prj_t_prj& pb_prj_t_prj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_prj* pb_prj_t_prj::default_instance_ = NULL;

pb_prj_t_prj* pb_prj_t_prj::New() const {
  return new pb_prj_t_prj;
}

void pb_prj_t_prj::Clear() {
  f_update_type_ = 0;
  f_prjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_prj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_prj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prjs;
        break;
      }

      // repeated .pb_prj_t_info f_prjs = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prjs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_prj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_prj)
  return false;
#undef DO_
}

void pb_prj_t_prj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_prj)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // repeated .pb_prj_t_info f_prjs = 2;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_prjs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_prj)
}

::google::protobuf::uint8* pb_prj_t_prj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_prj)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // repeated .pb_prj_t_info f_prjs = 2;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_prjs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_prj)
  return target;
}

int pb_prj_t_prj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

  }
  // repeated .pb_prj_t_info f_prjs = 2;
  total_size += 1 * this->f_prjs_size();
  for (int i = 0; i < this->f_prjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_prj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_prj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_prj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_prj::MergeFrom(const pb_prj_t_prj& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_prjs_.MergeFrom(from.f_prjs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_prj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_prj::CopyFrom(const pb_prj_t_prj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_prj::IsInitialized() const {

  return true;
}

void pb_prj_t_prj::Swap(pb_prj_t_prj* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    f_prjs_.Swap(&other->f_prjs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_prj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_prj_descriptor_;
  metadata.reflection = pb_prj_t_prj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_recommend_info::kFInfoFieldNumber;
const int pb_prj_t_recommend_info::kFTypeFieldNumber;
const int pb_prj_t_recommend_info::kFWeightFieldNumber;
const int pb_prj_t_recommend_info::kFOtherInfoFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_recommend_info::pb_prj_t_recommend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_recommend_info)
}

void pb_prj_t_recommend_info::InitAsDefaultInstance() {
  f_info_ = const_cast< ::pb_prj_t_info*>(&::pb_prj_t_info::default_instance());
}

pb_prj_t_recommend_info::pb_prj_t_recommend_info(const pb_prj_t_recommend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_recommend_info)
}

void pb_prj_t_recommend_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_info_ = NULL;
  f_type_ = 0u;
  f_weight_ = 0;
  f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_recommend_info::~pb_prj_t_recommend_info() {
  // @@protoc_insertion_point(destructor:pb_prj_t_recommend_info)
  SharedDtor();
}

void pb_prj_t_recommend_info::SharedDtor() {
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (this != default_instance_) {
    delete f_info_;
  }
}

void pb_prj_t_recommend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_recommend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_recommend_info_descriptor_;
}

const pb_prj_t_recommend_info& pb_prj_t_recommend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_recommend_info* pb_prj_t_recommend_info::default_instance_ = NULL;

pb_prj_t_recommend_info* pb_prj_t_recommend_info::New() const {
  return new pb_prj_t_recommend_info;
}

void pb_prj_t_recommend_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_recommend_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(f_type_, f_weight_);
    if (has_f_info()) {
      if (f_info_ != NULL) f_info_->::pb_prj_t_info::Clear();
    }
    if (has_f_other_info()) {
      if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_other_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_recommend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_recommend_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_prj_t_info f_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_type;
        break;
      }

      // optional uint32 f_type = 2;
      case 2: {
        if (tag == 16) {
         parse_f_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_type_)));
          set_has_f_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_weight;
        break;
      }

      // optional int32 f_weight = 3;
      case 3: {
        if (tag == 24) {
         parse_f_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weight_)));
          set_has_f_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_other_info;
        break;
      }

      // optional string f_other_info = 4;
      case 4: {
        if (tag == 34) {
         parse_f_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_other_info().data(), this->f_other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_other_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_recommend_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_recommend_info)
  return false;
#undef DO_
}

void pb_prj_t_recommend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_recommend_info)
  // optional .pb_prj_t_info f_info = 1;
  if (has_f_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_info(), output);
  }

  // optional uint32 f_type = 2;
  if (has_f_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->f_type(), output);
  }

  // optional int32 f_weight = 3;
  if (has_f_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_weight(), output);
  }

  // optional string f_other_info = 4;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_other_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_recommend_info)
}

::google::protobuf::uint8* pb_prj_t_recommend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_recommend_info)
  // optional .pb_prj_t_info f_info = 1;
  if (has_f_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_info(), target);
  }

  // optional uint32 f_type = 2;
  if (has_f_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->f_type(), target);
  }

  // optional int32 f_weight = 3;
  if (has_f_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_weight(), target);
  }

  // optional string f_other_info = 4;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_other_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_recommend_info)
  return target;
}

int pb_prj_t_recommend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_prj_t_info f_info = 1;
    if (has_f_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_info());
    }

    // optional uint32 f_type = 2;
    if (has_f_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_type());
    }

    // optional int32 f_weight = 3;
    if (has_f_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weight());
    }

    // optional string f_other_info = 4;
    if (has_f_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_other_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_recommend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_recommend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_recommend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_recommend_info::MergeFrom(const pb_prj_t_recommend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_info()) {
      mutable_f_info()->::pb_prj_t_info::MergeFrom(from.f_info());
    }
    if (from.has_f_type()) {
      set_f_type(from.f_type());
    }
    if (from.has_f_weight()) {
      set_f_weight(from.f_weight());
    }
    if (from.has_f_other_info()) {
      set_f_other_info(from.f_other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_recommend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_recommend_info::CopyFrom(const pb_prj_t_recommend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_recommend_info::IsInitialized() const {

  return true;
}

void pb_prj_t_recommend_info::Swap(pb_prj_t_recommend_info* other) {
  if (other != this) {
    std::swap(f_info_, other->f_info_);
    std::swap(f_type_, other->f_type_);
    std::swap(f_weight_, other->f_weight_);
    std::swap(f_other_info_, other->f_other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_recommend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_recommend_info_descriptor_;
  metadata.reflection = pb_prj_t_recommend_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_recommend_prj::kFUpdateTypeFieldNumber;
const int pb_prj_t_recommend_prj::kFPrjsFieldNumber;
const int pb_prj_t_recommend_prj::kFPrjsCntFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_recommend_prj::pb_prj_t_recommend_prj()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_recommend_prj)
}

void pb_prj_t_recommend_prj::InitAsDefaultInstance() {
}

pb_prj_t_recommend_prj::pb_prj_t_recommend_prj(const pb_prj_t_recommend_prj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_recommend_prj)
}

void pb_prj_t_recommend_prj::SharedCtor() {
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_prjs_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_recommend_prj::~pb_prj_t_recommend_prj() {
  // @@protoc_insertion_point(destructor:pb_prj_t_recommend_prj)
  SharedDtor();
}

void pb_prj_t_recommend_prj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_prj_t_recommend_prj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_recommend_prj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_recommend_prj_descriptor_;
}

const pb_prj_t_recommend_prj& pb_prj_t_recommend_prj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_recommend_prj* pb_prj_t_recommend_prj::default_instance_ = NULL;

pb_prj_t_recommend_prj* pb_prj_t_recommend_prj::New() const {
  return new pb_prj_t_recommend_prj;
}

void pb_prj_t_recommend_prj::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_recommend_prj*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(f_update_type_, f_prjs_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_prjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_recommend_prj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_recommend_prj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prjs;
        break;
      }

      // repeated .pb_prj_t_recommend_info f_prjs = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prjs;
        if (input->ExpectTag(24)) goto parse_f_prjs_cnt;
        break;
      }

      // optional int32 f_prjs_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_f_prjs_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prjs_cnt_)));
          set_has_f_prjs_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_recommend_prj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_recommend_prj)
  return false;
#undef DO_
}

void pb_prj_t_recommend_prj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_recommend_prj)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // repeated .pb_prj_t_recommend_info f_prjs = 2;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_prjs(i), output);
  }

  // optional int32 f_prjs_cnt = 3;
  if (has_f_prjs_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_prjs_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_recommend_prj)
}

::google::protobuf::uint8* pb_prj_t_recommend_prj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_recommend_prj)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // repeated .pb_prj_t_recommend_info f_prjs = 2;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_prjs(i), target);
  }

  // optional int32 f_prjs_cnt = 3;
  if (has_f_prjs_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_prjs_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_recommend_prj)
  return target;
}

int pb_prj_t_recommend_prj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional int32 f_prjs_cnt = 3;
    if (has_f_prjs_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prjs_cnt());
    }

  }
  // repeated .pb_prj_t_recommend_info f_prjs = 2;
  total_size += 1 * this->f_prjs_size();
  for (int i = 0; i < this->f_prjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_recommend_prj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_recommend_prj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_recommend_prj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_recommend_prj::MergeFrom(const pb_prj_t_recommend_prj& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_prjs_.MergeFrom(from.f_prjs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_prjs_cnt()) {
      set_f_prjs_cnt(from.f_prjs_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_recommend_prj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_recommend_prj::CopyFrom(const pb_prj_t_recommend_prj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_recommend_prj::IsInitialized() const {

  return true;
}

void pb_prj_t_recommend_prj::Swap(pb_prj_t_recommend_prj* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    f_prjs_.Swap(&other->f_prjs_);
    std::swap(f_prjs_cnt_, other->f_prjs_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_recommend_prj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_recommend_prj_descriptor_;
  metadata.reflection = pb_prj_t_recommend_prj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_base_file::kFBaseinfoFieldNumber;
const int pb_prj_t_base_file::kFCreUinFieldNumber;
const int pb_prj_t_base_file::kFCreNameFieldNumber;
const int pb_prj_t_base_file::kFJobTypeFieldNumber;
const int pb_prj_t_base_file::kFTagFieldNumber;
const int pb_prj_t_base_file::kFFidFieldNumber;
const int pb_prj_t_base_file::kFFpidFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_base_file::pb_prj_t_base_file()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_base_file)
}

void pb_prj_t_base_file::InitAsDefaultInstance() {
  f_baseinfo_ = const_cast< ::pb_im_t_msg_attach*>(&::pb_im_t_msg_attach::default_instance());
}

pb_prj_t_base_file::pb_prj_t_base_file(const pb_prj_t_base_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_base_file)
}

void pb_prj_t_base_file::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_baseinfo_ = NULL;
  f_cre_uin_ = 0;
  f_cre_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_fpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_base_file::~pb_prj_t_base_file() {
  // @@protoc_insertion_point(destructor:pb_prj_t_base_file)
  SharedDtor();
}

void pb_prj_t_base_file::SharedDtor() {
  if (f_cre_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_cre_name_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_tag_;
  }
  if (f_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fid_;
  }
  if (f_fpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_fpid_;
  }
  if (this != default_instance_) {
    delete f_baseinfo_;
  }
}

void pb_prj_t_base_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_base_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_base_file_descriptor_;
}

const pb_prj_t_base_file& pb_prj_t_base_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_base_file* pb_prj_t_base_file::default_instance_ = NULL;

pb_prj_t_base_file* pb_prj_t_base_file::New() const {
  return new pb_prj_t_base_file;
}

void pb_prj_t_base_file::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_f_baseinfo()) {
      if (f_baseinfo_ != NULL) f_baseinfo_->::pb_im_t_msg_attach::Clear();
    }
    f_cre_uin_ = 0;
    if (has_f_cre_name()) {
      if (f_cre_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_cre_name_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_tag()) {
      if (f_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_tag_->clear();
      }
    }
    if (has_f_fid()) {
      if (f_fid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fid_->clear();
      }
    }
    if (has_f_fpid()) {
      if (f_fpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_fpid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_base_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_base_file)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_im_t_msg_attach f_baseinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_cre_uin;
        break;
      }

      // optional int32 f_cre_uin = 2;
      case 2: {
        if (tag == 16) {
         parse_f_cre_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_cre_uin_)));
          set_has_f_cre_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_cre_name;
        break;
      }

      // optional string f_cre_name = 3;
      case 3: {
        if (tag == 26) {
         parse_f_cre_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_cre_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_cre_name().data(), this->f_cre_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_cre_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 4;
      case 4: {
        if (tag == 34) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_tag;
        break;
      }

      // optional string f_tag = 5;
      case 5: {
        if (tag == 42) {
         parse_f_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_tag().data(), this->f_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_fid;
        break;
      }

      // optional string f_fid = 6;
      case 6: {
        if (tag == 50) {
         parse_f_fid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fid().data(), this->f_fid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_fpid;
        break;
      }

      // optional string f_fpid = 7;
      case 7: {
        if (tag == 58) {
         parse_f_fpid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_fpid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_fpid().data(), this->f_fpid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_fpid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_base_file)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_base_file)
  return false;
#undef DO_
}

void pb_prj_t_base_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_base_file)
  // optional .pb_im_t_msg_attach f_baseinfo = 1;
  if (has_f_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_baseinfo(), output);
  }

  // optional int32 f_cre_uin = 2;
  if (has_f_cre_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_cre_uin(), output);
  }

  // optional string f_cre_name = 3;
  if (has_f_cre_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_cre_name().data(), this->f_cre_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_cre_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_cre_name(), output);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_job_type(), output);
  }

  // optional string f_tag = 5;
  if (has_f_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tag().data(), this->f_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_tag(), output);
  }

  // optional string f_fid = 6;
  if (has_f_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fid().data(), this->f_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_fid(), output);
  }

  // optional string f_fpid = 7;
  if (has_f_fpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fpid().data(), this->f_fpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fpid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_fpid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_base_file)
}

::google::protobuf::uint8* pb_prj_t_base_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_base_file)
  // optional .pb_im_t_msg_attach f_baseinfo = 1;
  if (has_f_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_baseinfo(), target);
  }

  // optional int32 f_cre_uin = 2;
  if (has_f_cre_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_cre_uin(), target);
  }

  // optional string f_cre_name = 3;
  if (has_f_cre_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_cre_name().data(), this->f_cre_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_cre_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_cre_name(), target);
  }

  // optional string f_job_type = 4;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_job_type(), target);
  }

  // optional string f_tag = 5;
  if (has_f_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tag().data(), this->f_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_tag(), target);
  }

  // optional string f_fid = 6;
  if (has_f_fid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fid().data(), this->f_fid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_fid(), target);
  }

  // optional string f_fpid = 7;
  if (has_f_fpid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_fpid().data(), this->f_fpid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_fpid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_fpid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_base_file)
  return target;
}

int pb_prj_t_base_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_im_t_msg_attach f_baseinfo = 1;
    if (has_f_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_baseinfo());
    }

    // optional int32 f_cre_uin = 2;
    if (has_f_cre_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_cre_uin());
    }

    // optional string f_cre_name = 3;
    if (has_f_cre_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_cre_name());
    }

    // optional string f_job_type = 4;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_tag = 5;
    if (has_f_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_tag());
    }

    // optional string f_fid = 6;
    if (has_f_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fid());
    }

    // optional string f_fpid = 7;
    if (has_f_fpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_fpid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_base_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_base_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_base_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_base_file::MergeFrom(const pb_prj_t_base_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_baseinfo()) {
      mutable_f_baseinfo()->::pb_im_t_msg_attach::MergeFrom(from.f_baseinfo());
    }
    if (from.has_f_cre_uin()) {
      set_f_cre_uin(from.f_cre_uin());
    }
    if (from.has_f_cre_name()) {
      set_f_cre_name(from.f_cre_name());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_tag()) {
      set_f_tag(from.f_tag());
    }
    if (from.has_f_fid()) {
      set_f_fid(from.f_fid());
    }
    if (from.has_f_fpid()) {
      set_f_fpid(from.f_fpid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_base_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_base_file::CopyFrom(const pb_prj_t_base_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_base_file::IsInitialized() const {

  return true;
}

void pb_prj_t_base_file::Swap(pb_prj_t_base_file* other) {
  if (other != this) {
    std::swap(f_baseinfo_, other->f_baseinfo_);
    std::swap(f_cre_uin_, other->f_cre_uin_);
    std::swap(f_cre_name_, other->f_cre_name_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_tag_, other->f_tag_);
    std::swap(f_fid_, other->f_fid_);
    std::swap(f_fpid_, other->f_fpid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_base_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_base_file_descriptor_;
  metadata.reflection = pb_prj_t_base_file_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_file::kFUpdateTypeFieldNumber;
const int pb_prj_t_file::kFPrjIdFieldNumber;
const int pb_prj_t_file::kFFilesFieldNumber;
const int pb_prj_t_file::kFFilesCntFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_file::pb_prj_t_file()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_file)
}

void pb_prj_t_file::InitAsDefaultInstance() {
}

pb_prj_t_file::pb_prj_t_file(const pb_prj_t_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_file)
}

void pb_prj_t_file::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_files_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_file::~pb_prj_t_file() {
  // @@protoc_insertion_point(destructor:pb_prj_t_file)
  SharedDtor();
}

void pb_prj_t_file::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_file_descriptor_;
}

const pb_prj_t_file& pb_prj_t_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_file* pb_prj_t_file::default_instance_ = NULL;

pb_prj_t_file* pb_prj_t_file::New() const {
  return new pb_prj_t_file;
}

void pb_prj_t_file::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_file*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(f_update_type_, f_files_cnt_);
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_file)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_prj_id;
        break;
      }

      // optional string f_prj_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_prj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_files;
        break;
      }

      // repeated .pb_prj_t_base_file f_files = 3;
      case 3: {
        if (tag == 26) {
         parse_f_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_files;
        if (input->ExpectTag(32)) goto parse_f_files_cnt;
        break;
      }

      // optional int32 f_files_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_f_files_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_files_cnt_)));
          set_has_f_files_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_file)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_file)
  return false;
#undef DO_
}

void pb_prj_t_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_file)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_prj_id(), output);
  }

  // repeated .pb_prj_t_base_file f_files = 3;
  for (int i = 0; i < this->f_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_files(i), output);
  }

  // optional int32 f_files_cnt = 4;
  if (has_f_files_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_files_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_file)
}

::google::protobuf::uint8* pb_prj_t_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_file)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // optional string f_prj_id = 2;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_prj_id(), target);
  }

  // repeated .pb_prj_t_base_file f_files = 3;
  for (int i = 0; i < this->f_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_files(i), target);
  }

  // optional int32 f_files_cnt = 4;
  if (has_f_files_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_files_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_file)
  return target;
}

int pb_prj_t_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional string f_prj_id = 2;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional int32 f_files_cnt = 4;
    if (has_f_files_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_files_cnt());
    }

  }
  // repeated .pb_prj_t_base_file f_files = 3;
  total_size += 1 * this->f_files_size();
  for (int i = 0; i < this->f_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_file::MergeFrom(const pb_prj_t_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_files_.MergeFrom(from.f_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_files_cnt()) {
      set_f_files_cnt(from.f_files_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_file::CopyFrom(const pb_prj_t_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_file::IsInitialized() const {

  return true;
}

void pb_prj_t_file::Swap(pb_prj_t_file* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    std::swap(f_prj_id_, other->f_prj_id_);
    f_files_.Swap(&other->f_files_);
    std::swap(f_files_cnt_, other->f_files_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_file_descriptor_;
  metadata.reflection = pb_prj_t_file_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_department::kFIdFieldNumber;
const int pb_prj_t_department::kFNameFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_department::pb_prj_t_department()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_department)
}

void pb_prj_t_department::InitAsDefaultInstance() {
}

pb_prj_t_department::pb_prj_t_department(const pb_prj_t_department& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_department)
}

void pb_prj_t_department::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_department::~pb_prj_t_department() {
  // @@protoc_insertion_point(destructor:pb_prj_t_department)
  SharedDtor();
}

void pb_prj_t_department::SharedDtor() {
  if (f_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_id_;
  }
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (this != default_instance_) {
  }
}

void pb_prj_t_department::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_department::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_department_descriptor_;
}

const pb_prj_t_department& pb_prj_t_department::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_department* pb_prj_t_department::default_instance_ = NULL;

pb_prj_t_department* pb_prj_t_department::New() const {
  return new pb_prj_t_department;
}

void pb_prj_t_department::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_id()) {
      if (f_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_id_->clear();
      }
    }
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_department::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_department)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_id().data(), this->f_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_department)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_department)
  return false;
#undef DO_
}

void pb_prj_t_department::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_department)
  // optional string f_id = 1;
  if (has_f_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_id(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_department)
}

::google::protobuf::uint8* pb_prj_t_department::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_department)
  // optional string f_id = 1;
  if (has_f_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_id().data(), this->f_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_id(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_department)
  return target;
}

int pb_prj_t_department::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_id = 1;
    if (has_f_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_id());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_department::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_department* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_department*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_department::MergeFrom(const pb_prj_t_department& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_id()) {
      set_f_id(from.f_id());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_department::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_department::CopyFrom(const pb_prj_t_department& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_department::IsInitialized() const {

  return true;
}

void pb_prj_t_department::Swap(pb_prj_t_department* other) {
  if (other != this) {
    std::swap(f_id_, other->f_id_);
    std::swap(f_name_, other->f_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_department::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_department_descriptor_;
  metadata.reflection = pb_prj_t_department_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_prj_t_details::kFInfoFieldNumber;
const int pb_prj_t_details::kFImGroupFieldNumber;
const int pb_prj_t_details::kFTaskTotalCountFieldNumber;
const int pb_prj_t_details::kFTaskUnfinishedCountFieldNumber;
const int pb_prj_t_details::kFTaskDelayCountFieldNumber;
const int pb_prj_t_details::kFPrjAllDayCountFieldNumber;
const int pb_prj_t_details::kFPrjRemainDayCountFieldNumber;
const int pb_prj_t_details::kFUsersFieldNumber;
const int pb_prj_t_details::kFAppUsersFieldNumber;
const int pb_prj_t_details::kFFrdFieldNumber;
const int pb_prj_t_details::kFFeedsFieldNumber;
const int pb_prj_t_details::kFPrjLogFieldNumber;
const int pb_prj_t_details::kFMilestoreFieldNumber;
const int pb_prj_t_details::kFDepartmentFieldNumber;
#endif  // !_MSC_VER

pb_prj_t_details::pb_prj_t_details()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_prj_t_details)
}

void pb_prj_t_details::InitAsDefaultInstance() {
  f_info_ = const_cast< ::pb_prj_t_info*>(&::pb_prj_t_info::default_instance());
  f_im_group_ = const_cast< ::pb_clt_t_group*>(&::pb_clt_t_group::default_instance());
  f_frd_ = const_cast< ::pb_clt_t_friend*>(&::pb_clt_t_friend::default_instance());
}

pb_prj_t_details::pb_prj_t_details(const pb_prj_t_details& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_prj_t_details)
}

void pb_prj_t_details::SharedCtor() {
  _cached_size_ = 0;
  f_info_ = NULL;
  f_im_group_ = NULL;
  f_task_total_count_ = 0;
  f_task_unfinished_count_ = 0;
  f_task_delay_count_ = 0;
  f_prj_all_day_count_ = 0;
  f_prj_remain_day_count_ = 0;
  f_frd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_prj_t_details::~pb_prj_t_details() {
  // @@protoc_insertion_point(destructor:pb_prj_t_details)
  SharedDtor();
}

void pb_prj_t_details::SharedDtor() {
  if (this != default_instance_) {
    delete f_info_;
    delete f_im_group_;
    delete f_frd_;
  }
}

void pb_prj_t_details::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_prj_t_details::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_prj_t_details_descriptor_;
}

const pb_prj_t_details& pb_prj_t_details::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_prj_t_details* pb_prj_t_details::default_instance_ = NULL;

pb_prj_t_details* pb_prj_t_details::New() const {
  return new pb_prj_t_details;
}

void pb_prj_t_details::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_prj_t_details*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(f_task_total_count_, f_prj_all_day_count_);
    if (has_f_info()) {
      if (f_info_ != NULL) f_info_->::pb_prj_t_info::Clear();
    }
    if (has_f_im_group()) {
      if (f_im_group_ != NULL) f_im_group_->::pb_clt_t_group::Clear();
    }
    f_prj_remain_day_count_ = 0;
  }
  if (has_f_frd()) {
    if (f_frd_ != NULL) f_frd_->::pb_clt_t_friend::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_users_.Clear();
  f_app_users_.Clear();
  f_feeds_.Clear();
  f_prj_log_.Clear();
  f_milestore_.Clear();
  f_department_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_prj_t_details::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_prj_t_details)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_prj_t_info f_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_im_group;
        break;
      }

      // optional .pb_clt_t_group f_im_group = 2;
      case 2: {
        if (tag == 18) {
         parse_f_im_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_im_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_task_total_count;
        break;
      }

      // optional int32 f_task_total_count = 3;
      case 3: {
        if (tag == 24) {
         parse_f_task_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_total_count_)));
          set_has_f_task_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_task_unfinished_count;
        break;
      }

      // optional int32 f_task_unfinished_count = 4;
      case 4: {
        if (tag == 32) {
         parse_f_task_unfinished_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_unfinished_count_)));
          set_has_f_task_unfinished_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_task_delay_count;
        break;
      }

      // optional int32 f_task_delay_count = 5;
      case 5: {
        if (tag == 40) {
         parse_f_task_delay_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_task_delay_count_)));
          set_has_f_task_delay_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_prj_all_day_count;
        break;
      }

      // optional int32 f_prj_all_day_count = 6;
      case 6: {
        if (tag == 48) {
         parse_f_prj_all_day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_all_day_count_)));
          set_has_f_prj_all_day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_prj_remain_day_count;
        break;
      }

      // optional int32 f_prj_remain_day_count = 7;
      case 7: {
        if (tag == 56) {
         parse_f_prj_remain_day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_prj_remain_day_count_)));
          set_has_f_prj_remain_day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_users;
        break;
      }

      // repeated .pb_prj_t_user f_users = 8;
      case 8: {
        if (tag == 66) {
         parse_f_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_users;
        if (input->ExpectTag(74)) goto parse_f_app_users;
        break;
      }

      // repeated .pb_prj_t_user f_app_users = 9;
      case 9: {
        if (tag == 74) {
         parse_f_app_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_app_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_app_users;
        if (input->ExpectTag(82)) goto parse_f_frd;
        break;
      }

      // optional .pb_clt_t_friend f_frd = 10;
      case 10: {
        if (tag == 82) {
         parse_f_frd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_frd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_feeds;
        break;
      }

      // repeated .pb_prj_t_feed f_feeds = 11;
      case 11: {
        if (tag == 90) {
         parse_f_feeds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_feeds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_feeds;
        if (input->ExpectTag(98)) goto parse_f_prj_log;
        break;
      }

      // repeated .pb_prj_t_log f_prj_log = 12;
      case 12: {
        if (tag == 98) {
         parse_f_prj_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_prj_log;
        if (input->ExpectTag(106)) goto parse_f_milestore;
        break;
      }

      // repeated .pb_prj_t_milestore f_milestore = 13;
      case 13: {
        if (tag == 106) {
         parse_f_milestore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_milestore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_milestore;
        if (input->ExpectTag(114)) goto parse_f_department;
        break;
      }

      // repeated .pb_prj_t_department f_department = 14;
      case 14: {
        if (tag == 114) {
         parse_f_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_department()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_department;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_prj_t_details)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_prj_t_details)
  return false;
#undef DO_
}

void pb_prj_t_details::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_prj_t_details)
  // optional .pb_prj_t_info f_info = 1;
  if (has_f_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_info(), output);
  }

  // optional .pb_clt_t_group f_im_group = 2;
  if (has_f_im_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_im_group(), output);
  }

  // optional int32 f_task_total_count = 3;
  if (has_f_task_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_task_total_count(), output);
  }

  // optional int32 f_task_unfinished_count = 4;
  if (has_f_task_unfinished_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_task_unfinished_count(), output);
  }

  // optional int32 f_task_delay_count = 5;
  if (has_f_task_delay_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->f_task_delay_count(), output);
  }

  // optional int32 f_prj_all_day_count = 6;
  if (has_f_prj_all_day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_prj_all_day_count(), output);
  }

  // optional int32 f_prj_remain_day_count = 7;
  if (has_f_prj_remain_day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->f_prj_remain_day_count(), output);
  }

  // repeated .pb_prj_t_user f_users = 8;
  for (int i = 0; i < this->f_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_users(i), output);
  }

  // repeated .pb_prj_t_user f_app_users = 9;
  for (int i = 0; i < this->f_app_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->f_app_users(i), output);
  }

  // optional .pb_clt_t_friend f_frd = 10;
  if (has_f_frd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f_frd(), output);
  }

  // repeated .pb_prj_t_feed f_feeds = 11;
  for (int i = 0; i < this->f_feeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->f_feeds(i), output);
  }

  // repeated .pb_prj_t_log f_prj_log = 12;
  for (int i = 0; i < this->f_prj_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->f_prj_log(i), output);
  }

  // repeated .pb_prj_t_milestore f_milestore = 13;
  for (int i = 0; i < this->f_milestore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->f_milestore(i), output);
  }

  // repeated .pb_prj_t_department f_department = 14;
  for (int i = 0; i < this->f_department_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->f_department(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_prj_t_details)
}

::google::protobuf::uint8* pb_prj_t_details::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_prj_t_details)
  // optional .pb_prj_t_info f_info = 1;
  if (has_f_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_info(), target);
  }

  // optional .pb_clt_t_group f_im_group = 2;
  if (has_f_im_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_im_group(), target);
  }

  // optional int32 f_task_total_count = 3;
  if (has_f_task_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_task_total_count(), target);
  }

  // optional int32 f_task_unfinished_count = 4;
  if (has_f_task_unfinished_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_task_unfinished_count(), target);
  }

  // optional int32 f_task_delay_count = 5;
  if (has_f_task_delay_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->f_task_delay_count(), target);
  }

  // optional int32 f_prj_all_day_count = 6;
  if (has_f_prj_all_day_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_prj_all_day_count(), target);
  }

  // optional int32 f_prj_remain_day_count = 7;
  if (has_f_prj_remain_day_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->f_prj_remain_day_count(), target);
  }

  // repeated .pb_prj_t_user f_users = 8;
  for (int i = 0; i < this->f_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_users(i), target);
  }

  // repeated .pb_prj_t_user f_app_users = 9;
  for (int i = 0; i < this->f_app_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->f_app_users(i), target);
  }

  // optional .pb_clt_t_friend f_frd = 10;
  if (has_f_frd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f_frd(), target);
  }

  // repeated .pb_prj_t_feed f_feeds = 11;
  for (int i = 0; i < this->f_feeds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->f_feeds(i), target);
  }

  // repeated .pb_prj_t_log f_prj_log = 12;
  for (int i = 0; i < this->f_prj_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->f_prj_log(i), target);
  }

  // repeated .pb_prj_t_milestore f_milestore = 13;
  for (int i = 0; i < this->f_milestore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->f_milestore(i), target);
  }

  // repeated .pb_prj_t_department f_department = 14;
  for (int i = 0; i < this->f_department_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->f_department(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_prj_t_details)
  return target;
}

int pb_prj_t_details::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_prj_t_info f_info = 1;
    if (has_f_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_info());
    }

    // optional .pb_clt_t_group f_im_group = 2;
    if (has_f_im_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_im_group());
    }

    // optional int32 f_task_total_count = 3;
    if (has_f_task_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_total_count());
    }

    // optional int32 f_task_unfinished_count = 4;
    if (has_f_task_unfinished_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_unfinished_count());
    }

    // optional int32 f_task_delay_count = 5;
    if (has_f_task_delay_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_task_delay_count());
    }

    // optional int32 f_prj_all_day_count = 6;
    if (has_f_prj_all_day_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_all_day_count());
    }

    // optional int32 f_prj_remain_day_count = 7;
    if (has_f_prj_remain_day_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_prj_remain_day_count());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .pb_clt_t_friend f_frd = 10;
    if (has_f_frd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_frd());
    }

  }
  // repeated .pb_prj_t_user f_users = 8;
  total_size += 1 * this->f_users_size();
  for (int i = 0; i < this->f_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_users(i));
  }

  // repeated .pb_prj_t_user f_app_users = 9;
  total_size += 1 * this->f_app_users_size();
  for (int i = 0; i < this->f_app_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_app_users(i));
  }

  // repeated .pb_prj_t_feed f_feeds = 11;
  total_size += 1 * this->f_feeds_size();
  for (int i = 0; i < this->f_feeds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_feeds(i));
  }

  // repeated .pb_prj_t_log f_prj_log = 12;
  total_size += 1 * this->f_prj_log_size();
  for (int i = 0; i < this->f_prj_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_log(i));
  }

  // repeated .pb_prj_t_milestore f_milestore = 13;
  total_size += 1 * this->f_milestore_size();
  for (int i = 0; i < this->f_milestore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_milestore(i));
  }

  // repeated .pb_prj_t_department f_department = 14;
  total_size += 1 * this->f_department_size();
  for (int i = 0; i < this->f_department_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_department(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_prj_t_details::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_prj_t_details* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_prj_t_details*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_prj_t_details::MergeFrom(const pb_prj_t_details& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_users_.MergeFrom(from.f_users_);
  f_app_users_.MergeFrom(from.f_app_users_);
  f_feeds_.MergeFrom(from.f_feeds_);
  f_prj_log_.MergeFrom(from.f_prj_log_);
  f_milestore_.MergeFrom(from.f_milestore_);
  f_department_.MergeFrom(from.f_department_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_info()) {
      mutable_f_info()->::pb_prj_t_info::MergeFrom(from.f_info());
    }
    if (from.has_f_im_group()) {
      mutable_f_im_group()->::pb_clt_t_group::MergeFrom(from.f_im_group());
    }
    if (from.has_f_task_total_count()) {
      set_f_task_total_count(from.f_task_total_count());
    }
    if (from.has_f_task_unfinished_count()) {
      set_f_task_unfinished_count(from.f_task_unfinished_count());
    }
    if (from.has_f_task_delay_count()) {
      set_f_task_delay_count(from.f_task_delay_count());
    }
    if (from.has_f_prj_all_day_count()) {
      set_f_prj_all_day_count(from.f_prj_all_day_count());
    }
    if (from.has_f_prj_remain_day_count()) {
      set_f_prj_remain_day_count(from.f_prj_remain_day_count());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_f_frd()) {
      mutable_f_frd()->::pb_clt_t_friend::MergeFrom(from.f_frd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_prj_t_details::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_prj_t_details::CopyFrom(const pb_prj_t_details& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_prj_t_details::IsInitialized() const {

  return true;
}

void pb_prj_t_details::Swap(pb_prj_t_details* other) {
  if (other != this) {
    std::swap(f_info_, other->f_info_);
    std::swap(f_im_group_, other->f_im_group_);
    std::swap(f_task_total_count_, other->f_task_total_count_);
    std::swap(f_task_unfinished_count_, other->f_task_unfinished_count_);
    std::swap(f_task_delay_count_, other->f_task_delay_count_);
    std::swap(f_prj_all_day_count_, other->f_prj_all_day_count_);
    std::swap(f_prj_remain_day_count_, other->f_prj_remain_day_count_);
    f_users_.Swap(&other->f_users_);
    f_app_users_.Swap(&other->f_app_users_);
    std::swap(f_frd_, other->f_frd_);
    f_feeds_.Swap(&other->f_feeds_);
    f_prj_log_.Swap(&other->f_prj_log_);
    f_milestore_.Swap(&other->f_milestore_);
    f_department_.Swap(&other->f_department_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_prj_t_details::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_prj_t_details_descriptor_;
  metadata.reflection = pb_prj_t_details_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_info::kFUinFieldNumber;
const int pb_user_t_info::kFProvinceFieldNumber;
const int pb_user_t_info::kFCityFieldNumber;
const int pb_user_t_info::kFPhoneFieldNumber;
const int pb_user_t_info::kFNameFieldNumber;
const int pb_user_t_info::kFCompanyTypeFieldNumber;
const int pb_user_t_info::kFCompanyFieldNumber;
const int pb_user_t_info::kFYearsOfWorkingFieldNumber;
const int pb_user_t_info::kFJobTypeFieldNumber;
const int pb_user_t_info::kFJobTitleFieldNumber;
const int pb_user_t_info::kFInfluenceFieldNumber;
const int pb_user_t_info::kFSettingFieldNumber;
const int pb_user_t_info::kFNamePinyinFieldNumber;
const int pb_user_t_info::kFNamePinyinJFieldNumber;
const int pb_user_t_info::kFTypeFieldNumber;
const int pb_user_t_info::kFTeaKeyFieldNumber;
const int pb_user_t_info::kFGoOnDayFieldNumber;
const int pb_user_t_info::kFDegreeFieldNumber;
const int pb_user_t_info::kFCodeIdFieldNumber;
const int pb_user_t_info::kFAvatarVersionFieldNumber;
#endif  // !_MSC_VER

pb_user_t_info::pb_user_t_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_info)
}

void pb_user_t_info::InitAsDefaultInstance() {
}

pb_user_t_info::pb_user_t_info(const pb_user_t_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_info)
}

void pb_user_t_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_influence_ = 0;
  f_setting_ = 0;
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_type_ = 0;
  f_tea_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_go_on_day_ = 0;
  f_degree_ = 0;
  f_code_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_avatar_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_info::~pb_user_t_info() {
  // @@protoc_insertion_point(destructor:pb_user_t_info)
  SharedDtor();
}

void pb_user_t_info::SharedDtor() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_;
  }
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_years_of_working_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_title_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_tea_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_tea_key_;
  }
  if (f_code_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_code_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_info_descriptor_;
}

const pb_user_t_info& pb_user_t_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_info* pb_user_t_info::default_instance_ = NULL;

pb_user_t_info* pb_user_t_info::New() const {
  return new pb_user_t_info;
}

void pb_user_t_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    f_uin_ = 0u;
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_company_type()) {
      if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_type_->clear();
      }
    }
    if (has_f_company()) {
      if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_->clear();
      }
    }
    if (has_f_years_of_working()) {
      if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_years_of_working_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(f_setting_, f_type_);
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    if (has_f_job_title()) {
      if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_title_->clear();
      }
    }
    f_influence_ = 0;
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
    if (has_f_name_pinyin_j()) {
      if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_j_->clear();
      }
    }
    if (has_f_tea_key()) {
      if (f_tea_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_tea_key_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(f_go_on_day_, f_degree_);
    if (has_f_code_id()) {
      if (f_code_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_code_id_->clear();
      }
    }
    f_avatar_version_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_province;
        break;
      }

      // optional string f_province = 2;
      case 2: {
        if (tag == 18) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_city;
        break;
      }

      // optional string f_city = 3;
      case 3: {
        if (tag == 26) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_name;
        break;
      }

      // optional string f_name = 5;
      case 5: {
        if (tag == 42) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_company_type;
        break;
      }

      // optional string f_company_type = 6;
      case 6: {
        if (tag == 50) {
         parse_f_company_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company_type().data(), this->f_company_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_company;
        break;
      }

      // optional string f_company = 7;
      case 7: {
        if (tag == 58) {
         parse_f_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company().data(), this->f_company().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_years_of_working;
        break;
      }

      // optional string f_years_of_working = 8;
      case 8: {
        if (tag == 66) {
         parse_f_years_of_working:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_years_of_working()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_years_of_working().data(), this->f_years_of_working().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_years_of_working");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 9;
      case 9: {
        if (tag == 74) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_job_title;
        break;
      }

      // optional string f_job_title = 10;
      case 10: {
        if (tag == 82) {
         parse_f_job_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_title().data(), this->f_job_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_f_influence;
        break;
      }

      // optional int32 f_influence = 11;
      case 11: {
        if (tag == 88) {
         parse_f_influence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_influence_)));
          set_has_f_influence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_f_setting;
        break;
      }

      // optional int32 f_setting = 12;
      case 12: {
        if (tag == 96) {
         parse_f_setting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_setting_)));
          set_has_f_setting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 13;
      case 13: {
        if (tag == 106) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_f_name_pinyin_j;
        break;
      }

      // optional string f_name_pinyin_j = 14;
      case 14: {
        if (tag == 114) {
         parse_f_name_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_f_type;
        break;
      }

      // optional int32 f_type = 15;
      case 15: {
        if (tag == 120) {
         parse_f_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_type_)));
          set_has_f_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_f_tea_key;
        break;
      }

      // optional string f_tea_key = 16;
      case 16: {
        if (tag == 130) {
         parse_f_tea_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_tea_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_tea_key().data(), this->f_tea_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_tea_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_f_go_on_day;
        break;
      }

      // optional int32 f_go_on_day = 17;
      case 17: {
        if (tag == 136) {
         parse_f_go_on_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_go_on_day_)));
          set_has_f_go_on_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_f_degree;
        break;
      }

      // optional int32 f_degree = 18;
      case 18: {
        if (tag == 144) {
         parse_f_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_degree_)));
          set_has_f_degree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_f_code_id;
        break;
      }

      // optional string f_code_id = 19;
      case 19: {
        if (tag == 154) {
         parse_f_code_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_code_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_code_id().data(), this->f_code_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_code_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_f_avatar_version;
        break;
      }

      // optional int32 f_avatar_version = 20;
      case 20: {
        if (tag == 160) {
         parse_f_avatar_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_avatar_version_)));
          set_has_f_avatar_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_info)
  return false;
#undef DO_
}

void pb_user_t_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_info)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_province = 2;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_province(), output);
  }

  // optional string f_city = 3;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_city(), output);
  }

  // optional string f_phone = 4;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_phone(), output);
  }

  // optional string f_name = 5;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_name(), output);
  }

  // optional string f_company_type = 6;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_company_type(), output);
  }

  // optional string f_company = 7;
  if (has_f_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company().data(), this->f_company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_company(), output);
  }

  // optional string f_years_of_working = 8;
  if (has_f_years_of_working()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_years_of_working().data(), this->f_years_of_working().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_years_of_working");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_years_of_working(), output);
  }

  // optional string f_job_type = 9;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_job_type(), output);
  }

  // optional string f_job_title = 10;
  if (has_f_job_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_title().data(), this->f_job_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_job_title(), output);
  }

  // optional int32 f_influence = 11;
  if (has_f_influence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->f_influence(), output);
  }

  // optional int32 f_setting = 12;
  if (has_f_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->f_setting(), output);
  }

  // optional string f_name_pinyin = 13;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->f_name_pinyin(), output);
  }

  // optional string f_name_pinyin_j = 14;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->f_name_pinyin_j(), output);
  }

  // optional int32 f_type = 15;
  if (has_f_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->f_type(), output);
  }

  // optional string f_tea_key = 16;
  if (has_f_tea_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tea_key().data(), this->f_tea_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tea_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->f_tea_key(), output);
  }

  // optional int32 f_go_on_day = 17;
  if (has_f_go_on_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->f_go_on_day(), output);
  }

  // optional int32 f_degree = 18;
  if (has_f_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->f_degree(), output);
  }

  // optional string f_code_id = 19;
  if (has_f_code_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_code_id().data(), this->f_code_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_code_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->f_code_id(), output);
  }

  // optional int32 f_avatar_version = 20;
  if (has_f_avatar_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->f_avatar_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_info)
}

::google::protobuf::uint8* pb_user_t_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_info)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_province = 2;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_province(), target);
  }

  // optional string f_city = 3;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_city(), target);
  }

  // optional string f_phone = 4;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_phone(), target);
  }

  // optional string f_name = 5;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_name(), target);
  }

  // optional string f_company_type = 6;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_company_type(), target);
  }

  // optional string f_company = 7;
  if (has_f_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company().data(), this->f_company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_company(), target);
  }

  // optional string f_years_of_working = 8;
  if (has_f_years_of_working()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_years_of_working().data(), this->f_years_of_working().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_years_of_working");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_years_of_working(), target);
  }

  // optional string f_job_type = 9;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_job_type(), target);
  }

  // optional string f_job_title = 10;
  if (has_f_job_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_title().data(), this->f_job_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_job_title(), target);
  }

  // optional int32 f_influence = 11;
  if (has_f_influence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->f_influence(), target);
  }

  // optional int32 f_setting = 12;
  if (has_f_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->f_setting(), target);
  }

  // optional string f_name_pinyin = 13;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->f_name_pinyin(), target);
  }

  // optional string f_name_pinyin_j = 14;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->f_name_pinyin_j(), target);
  }

  // optional int32 f_type = 15;
  if (has_f_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->f_type(), target);
  }

  // optional string f_tea_key = 16;
  if (has_f_tea_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_tea_key().data(), this->f_tea_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_tea_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->f_tea_key(), target);
  }

  // optional int32 f_go_on_day = 17;
  if (has_f_go_on_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->f_go_on_day(), target);
  }

  // optional int32 f_degree = 18;
  if (has_f_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->f_degree(), target);
  }

  // optional string f_code_id = 19;
  if (has_f_code_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_code_id().data(), this->f_code_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_code_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->f_code_id(), target);
  }

  // optional int32 f_avatar_version = 20;
  if (has_f_avatar_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->f_avatar_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_info)
  return target;
}

int pb_user_t_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_province = 2;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 3;
    if (has_f_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

    // optional string f_phone = 4;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional string f_name = 5;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_company_type = 6;
    if (has_f_company_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company_type());
    }

    // optional string f_company = 7;
    if (has_f_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company());
    }

    // optional string f_years_of_working = 8;
    if (has_f_years_of_working()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_years_of_working());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_job_type = 9;
    if (has_f_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional string f_job_title = 10;
    if (has_f_job_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_title());
    }

    // optional int32 f_influence = 11;
    if (has_f_influence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_influence());
    }

    // optional int32 f_setting = 12;
    if (has_f_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_setting());
    }

    // optional string f_name_pinyin = 13;
    if (has_f_name_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

    // optional string f_name_pinyin_j = 14;
    if (has_f_name_pinyin_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin_j());
    }

    // optional int32 f_type = 15;
    if (has_f_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_type());
    }

    // optional string f_tea_key = 16;
    if (has_f_tea_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_tea_key());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 f_go_on_day = 17;
    if (has_f_go_on_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_go_on_day());
    }

    // optional int32 f_degree = 18;
    if (has_f_degree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_degree());
    }

    // optional string f_code_id = 19;
    if (has_f_code_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_code_id());
    }

    // optional int32 f_avatar_version = 20;
    if (has_f_avatar_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_avatar_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_info::MergeFrom(const pb_user_t_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_company_type()) {
      set_f_company_type(from.f_company_type());
    }
    if (from.has_f_company()) {
      set_f_company(from.f_company());
    }
    if (from.has_f_years_of_working()) {
      set_f_years_of_working(from.f_years_of_working());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_job_title()) {
      set_f_job_title(from.f_job_title());
    }
    if (from.has_f_influence()) {
      set_f_influence(from.f_influence());
    }
    if (from.has_f_setting()) {
      set_f_setting(from.f_setting());
    }
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
    if (from.has_f_name_pinyin_j()) {
      set_f_name_pinyin_j(from.f_name_pinyin_j());
    }
    if (from.has_f_type()) {
      set_f_type(from.f_type());
    }
    if (from.has_f_tea_key()) {
      set_f_tea_key(from.f_tea_key());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_go_on_day()) {
      set_f_go_on_day(from.f_go_on_day());
    }
    if (from.has_f_degree()) {
      set_f_degree(from.f_degree());
    }
    if (from.has_f_code_id()) {
      set_f_code_id(from.f_code_id());
    }
    if (from.has_f_avatar_version()) {
      set_f_avatar_version(from.f_avatar_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_info::CopyFrom(const pb_user_t_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_info::IsInitialized() const {

  return true;
}

void pb_user_t_info::Swap(pb_user_t_info* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_company_type_, other->f_company_type_);
    std::swap(f_company_, other->f_company_);
    std::swap(f_years_of_working_, other->f_years_of_working_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_job_title_, other->f_job_title_);
    std::swap(f_influence_, other->f_influence_);
    std::swap(f_setting_, other->f_setting_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_name_pinyin_j_, other->f_name_pinyin_j_);
    std::swap(f_type_, other->f_type_);
    std::swap(f_tea_key_, other->f_tea_key_);
    std::swap(f_go_on_day_, other->f_go_on_day_);
    std::swap(f_degree_, other->f_degree_);
    std::swap(f_code_id_, other->f_code_id_);
    std::swap(f_avatar_version_, other->f_avatar_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_info_descriptor_;
  metadata.reflection = pb_user_t_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_extra::kFAutoIncIdFieldNumber;
const int pb_user_t_extra::kFLastReqTimeFieldNumber;
#endif  // !_MSC_VER

pb_user_t_extra::pb_user_t_extra()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_extra)
}

void pb_user_t_extra::InitAsDefaultInstance() {
}

pb_user_t_extra::pb_user_t_extra(const pb_user_t_extra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_extra)
}

void pb_user_t_extra::SharedCtor() {
  _cached_size_ = 0;
  f_auto_inc_id_ = 0;
  f_last_req_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_extra::~pb_user_t_extra() {
  // @@protoc_insertion_point(destructor:pb_user_t_extra)
  SharedDtor();
}

void pb_user_t_extra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_user_t_extra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_extra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_extra_descriptor_;
}

const pb_user_t_extra& pb_user_t_extra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_extra* pb_user_t_extra::default_instance_ = NULL;

pb_user_t_extra* pb_user_t_extra::New() const {
  return new pb_user_t_extra;
}

void pb_user_t_extra::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_extra*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(f_auto_inc_id_, f_last_req_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_extra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_extra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_auto_inc_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_auto_inc_id_)));
          set_has_f_auto_inc_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_last_req_time;
        break;
      }

      // optional int32 f_last_req_time = 2;
      case 2: {
        if (tag == 16) {
         parse_f_last_req_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_last_req_time_)));
          set_has_f_last_req_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_extra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_extra)
  return false;
#undef DO_
}

void pb_user_t_extra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_extra)
  // optional int32 f_auto_inc_id = 1;
  if (has_f_auto_inc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_auto_inc_id(), output);
  }

  // optional int32 f_last_req_time = 2;
  if (has_f_last_req_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_last_req_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_extra)
}

::google::protobuf::uint8* pb_user_t_extra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_extra)
  // optional int32 f_auto_inc_id = 1;
  if (has_f_auto_inc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_auto_inc_id(), target);
  }

  // optional int32 f_last_req_time = 2;
  if (has_f_last_req_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_last_req_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_extra)
  return target;
}

int pb_user_t_extra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_auto_inc_id = 1;
    if (has_f_auto_inc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_auto_inc_id());
    }

    // optional int32 f_last_req_time = 2;
    if (has_f_last_req_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_last_req_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_extra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_extra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_extra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_extra::MergeFrom(const pb_user_t_extra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_auto_inc_id()) {
      set_f_auto_inc_id(from.f_auto_inc_id());
    }
    if (from.has_f_last_req_time()) {
      set_f_last_req_time(from.f_last_req_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_extra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_extra::CopyFrom(const pb_user_t_extra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_extra::IsInitialized() const {

  return true;
}

void pb_user_t_extra::Swap(pb_user_t_extra* other) {
  if (other != this) {
    std::swap(f_auto_inc_id_, other->f_auto_inc_id_);
    std::swap(f_last_req_time_, other->f_last_req_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_extra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_extra_descriptor_;
  metadata.reflection = pb_user_t_extra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_friend::kFUinFieldNumber;
const int pb_user_t_friend::kFNameFieldNumber;
const int pb_user_t_friend::kFRemarkFieldNumber;
const int pb_user_t_friend::kFPhoneFieldNumber;
const int pb_user_t_friend::kFMsgFieldNumber;
const int pb_user_t_friend::kFFlagFieldNumber;
const int pb_user_t_friend::kFGroupIdFieldNumber;
const int pb_user_t_friend::kFInitialFieldNumber;
const int pb_user_t_friend::kFWeightFieldNumber;
const int pb_user_t_friend::kFNamePinyinFieldNumber;
const int pb_user_t_friend::kFNamePinyinJFieldNumber;
const int pb_user_t_friend::kFRemarkPinyinFieldNumber;
const int pb_user_t_friend::kFRemarkPinyinJFieldNumber;
const int pb_user_t_friend::kFAddTimeFieldNumber;
const int pb_user_t_friend::kFProvinceFieldNumber;
const int pb_user_t_friend::kFCityFieldNumber;
const int pb_user_t_friend::kFCompanyTypeFieldNumber;
const int pb_user_t_friend::kFJobTypeFieldNumber;
const int pb_user_t_friend::kFValidationAddTimeFieldNumber;
#endif  // !_MSC_VER

pb_user_t_friend::pb_user_t_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_friend)
}

void pb_user_t_friend::InitAsDefaultInstance() {
}

pb_user_t_friend::pb_user_t_friend(const pb_user_t_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_friend)
}

void pb_user_t_friend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_flag_ = 0;
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_initial_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_weight_ = 0;
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_remark_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_remark_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_add_time_ = 0;
  f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_validation_add_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_friend::~pb_user_t_friend() {
  // @@protoc_insertion_point(destructor:pb_user_t_friend)
  SharedDtor();
}

void pb_user_t_friend::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_msg_;
  }
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_initial_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_remark_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_pinyin_;
  }
  if (f_remark_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_remark_pinyin_j_;
  }
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_friend_descriptor_;
}

const pb_user_t_friend& pb_user_t_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_friend* pb_user_t_friend::default_instance_ = NULL;

pb_user_t_friend* pb_user_t_friend::New() const {
  return new pb_user_t_friend;
}

void pb_user_t_friend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_friend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_uin_, f_flag_);
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_remark()) {
      if (f_remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_remark_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
    if (has_f_msg()) {
      if (f_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_msg_->clear();
      }
    }
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
    if (has_f_initial()) {
      if (f_initial_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_initial_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(f_weight_, f_add_time_);
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
    if (has_f_name_pinyin_j()) {
      if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_j_->clear();
      }
    }
    if (has_f_remark_pinyin()) {
      if (f_remark_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_remark_pinyin_->clear();
      }
    }
    if (has_f_remark_pinyin_j()) {
      if (f_remark_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_remark_pinyin_j_->clear();
      }
    }
    if (has_f_province()) {
      if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_province_->clear();
      }
    }
    if (has_f_city()) {
      if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_city_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_f_company_type()) {
      if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_type_->clear();
      }
    }
    if (has_f_job_type()) {
      if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_job_type_->clear();
      }
    }
    f_validation_add_time_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_remark;
        break;
      }

      // optional string f_remark = 3;
      case 3: {
        if (tag == 26) {
         parse_f_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_remark().data(), this->f_remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_msg;
        break;
      }

      // optional string f_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_f_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_msg().data(), this->f_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_flag;
        break;
      }

      // optional int32 f_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_f_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_flag_)));
          set_has_f_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_group_id;
        break;
      }

      // optional string f_group_id = 7;
      case 7: {
        if (tag == 58) {
         parse_f_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_initial;
        break;
      }

      // optional string f_initial = 8;
      case 8: {
        if (tag == 66) {
         parse_f_initial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_initial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_initial().data(), this->f_initial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_initial");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_weight;
        break;
      }

      // optional int32 f_weight = 9;
      case 9: {
        if (tag == 72) {
         parse_f_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weight_)));
          set_has_f_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 10;
      case 10: {
        if (tag == 82) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_f_name_pinyin_j;
        break;
      }

      // optional string f_name_pinyin_j = 11;
      case 11: {
        if (tag == 90) {
         parse_f_name_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_f_remark_pinyin;
        break;
      }

      // optional string f_remark_pinyin = 12;
      case 12: {
        if (tag == 98) {
         parse_f_remark_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_remark_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_remark_pinyin().data(), this->f_remark_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_remark_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_f_remark_pinyin_j;
        break;
      }

      // optional string f_remark_pinyin_j = 13;
      case 13: {
        if (tag == 106) {
         parse_f_remark_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_remark_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_remark_pinyin_j().data(), this->f_remark_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_remark_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_f_add_time;
        break;
      }

      // optional int32 f_add_time = 14;
      case 14: {
        if (tag == 112) {
         parse_f_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_add_time_)));
          set_has_f_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_f_province;
        break;
      }

      // optional string f_province = 15;
      case 15: {
        if (tag == 122) {
         parse_f_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_province().data(), this->f_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_f_city;
        break;
      }

      // optional string f_city = 16;
      case 16: {
        if (tag == 130) {
         parse_f_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_city().data(), this->f_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_f_company_type;
        break;
      }

      // optional string f_company_type = 17;
      case 17: {
        if (tag == 138) {
         parse_f_company_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company_type().data(), this->f_company_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_f_job_type;
        break;
      }

      // optional string f_job_type = 18;
      case 18: {
        if (tag == 146) {
         parse_f_job_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_job_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_job_type().data(), this->f_job_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_job_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_f_validation_add_time;
        break;
      }

      // optional int32 f_validation_add_time = 19;
      case 19: {
        if (tag == 152) {
         parse_f_validation_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_validation_add_time_)));
          set_has_f_validation_add_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_friend)
  return false;
#undef DO_
}

void pb_user_t_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_friend)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional string f_remark = 3;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->f_remark(), output);
  }

  // optional string f_phone = 4;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->f_phone(), output);
  }

  // optional string f_msg = 5;
  if (has_f_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg().data(), this->f_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_msg(), output);
  }

  // optional int32 f_flag = 6;
  if (has_f_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->f_flag(), output);
  }

  // optional string f_group_id = 7;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_group_id(), output);
  }

  // optional string f_initial = 8;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_initial(), output);
  }

  // optional int32 f_weight = 9;
  if (has_f_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->f_weight(), output);
  }

  // optional string f_name_pinyin = 10;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->f_name_pinyin(), output);
  }

  // optional string f_name_pinyin_j = 11;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->f_name_pinyin_j(), output);
  }

  // optional string f_remark_pinyin = 12;
  if (has_f_remark_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark_pinyin().data(), this->f_remark_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->f_remark_pinyin(), output);
  }

  // optional string f_remark_pinyin_j = 13;
  if (has_f_remark_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark_pinyin_j().data(), this->f_remark_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->f_remark_pinyin_j(), output);
  }

  // optional int32 f_add_time = 14;
  if (has_f_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->f_add_time(), output);
  }

  // optional string f_province = 15;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->f_province(), output);
  }

  // optional string f_city = 16;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->f_city(), output);
  }

  // optional string f_company_type = 17;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->f_company_type(), output);
  }

  // optional string f_job_type = 18;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->f_job_type(), output);
  }

  // optional int32 f_validation_add_time = 19;
  if (has_f_validation_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->f_validation_add_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_friend)
}

::google::protobuf::uint8* pb_user_t_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_friend)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional string f_remark = 3;
  if (has_f_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark().data(), this->f_remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->f_remark(), target);
  }

  // optional string f_phone = 4;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->f_phone(), target);
  }

  // optional string f_msg = 5;
  if (has_f_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_msg().data(), this->f_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_msg(), target);
  }

  // optional int32 f_flag = 6;
  if (has_f_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->f_flag(), target);
  }

  // optional string f_group_id = 7;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_group_id(), target);
  }

  // optional string f_initial = 8;
  if (has_f_initial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_initial().data(), this->f_initial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_initial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_initial(), target);
  }

  // optional int32 f_weight = 9;
  if (has_f_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->f_weight(), target);
  }

  // optional string f_name_pinyin = 10;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->f_name_pinyin(), target);
  }

  // optional string f_name_pinyin_j = 11;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->f_name_pinyin_j(), target);
  }

  // optional string f_remark_pinyin = 12;
  if (has_f_remark_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark_pinyin().data(), this->f_remark_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->f_remark_pinyin(), target);
  }

  // optional string f_remark_pinyin_j = 13;
  if (has_f_remark_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_remark_pinyin_j().data(), this->f_remark_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_remark_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->f_remark_pinyin_j(), target);
  }

  // optional int32 f_add_time = 14;
  if (has_f_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->f_add_time(), target);
  }

  // optional string f_province = 15;
  if (has_f_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_province().data(), this->f_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->f_province(), target);
  }

  // optional string f_city = 16;
  if (has_f_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_city().data(), this->f_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->f_city(), target);
  }

  // optional string f_company_type = 17;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->f_company_type(), target);
  }

  // optional string f_job_type = 18;
  if (has_f_job_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_job_type().data(), this->f_job_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_job_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->f_job_type(), target);
  }

  // optional int32 f_validation_add_time = 19;
  if (has_f_validation_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->f_validation_add_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_friend)
  return target;
}

int pb_user_t_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_remark = 3;
    if (has_f_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_remark());
    }

    // optional string f_phone = 4;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

    // optional string f_msg = 5;
    if (has_f_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_msg());
    }

    // optional int32 f_flag = 6;
    if (has_f_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_flag());
    }

    // optional string f_group_id = 7;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

    // optional string f_initial = 8;
    if (has_f_initial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_initial());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 f_weight = 9;
    if (has_f_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weight());
    }

    // optional string f_name_pinyin = 10;
    if (has_f_name_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

    // optional string f_name_pinyin_j = 11;
    if (has_f_name_pinyin_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin_j());
    }

    // optional string f_remark_pinyin = 12;
    if (has_f_remark_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_remark_pinyin());
    }

    // optional string f_remark_pinyin_j = 13;
    if (has_f_remark_pinyin_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_remark_pinyin_j());
    }

    // optional int32 f_add_time = 14;
    if (has_f_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_add_time());
    }

    // optional string f_province = 15;
    if (has_f_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_province());
    }

    // optional string f_city = 16;
    if (has_f_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_city());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string f_company_type = 17;
    if (has_f_company_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company_type());
    }

    // optional string f_job_type = 18;
    if (has_f_job_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_job_type());
    }

    // optional int32 f_validation_add_time = 19;
    if (has_f_validation_add_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_validation_add_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_friend::MergeFrom(const pb_user_t_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_remark()) {
      set_f_remark(from.f_remark());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
    if (from.has_f_msg()) {
      set_f_msg(from.f_msg());
    }
    if (from.has_f_flag()) {
      set_f_flag(from.f_flag());
    }
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
    if (from.has_f_initial()) {
      set_f_initial(from.f_initial());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_weight()) {
      set_f_weight(from.f_weight());
    }
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
    if (from.has_f_name_pinyin_j()) {
      set_f_name_pinyin_j(from.f_name_pinyin_j());
    }
    if (from.has_f_remark_pinyin()) {
      set_f_remark_pinyin(from.f_remark_pinyin());
    }
    if (from.has_f_remark_pinyin_j()) {
      set_f_remark_pinyin_j(from.f_remark_pinyin_j());
    }
    if (from.has_f_add_time()) {
      set_f_add_time(from.f_add_time());
    }
    if (from.has_f_province()) {
      set_f_province(from.f_province());
    }
    if (from.has_f_city()) {
      set_f_city(from.f_city());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_f_company_type()) {
      set_f_company_type(from.f_company_type());
    }
    if (from.has_f_job_type()) {
      set_f_job_type(from.f_job_type());
    }
    if (from.has_f_validation_add_time()) {
      set_f_validation_add_time(from.f_validation_add_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_friend::CopyFrom(const pb_user_t_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_friend::IsInitialized() const {

  return true;
}

void pb_user_t_friend::Swap(pb_user_t_friend* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_remark_, other->f_remark_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(f_msg_, other->f_msg_);
    std::swap(f_flag_, other->f_flag_);
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(f_initial_, other->f_initial_);
    std::swap(f_weight_, other->f_weight_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_name_pinyin_j_, other->f_name_pinyin_j_);
    std::swap(f_remark_pinyin_, other->f_remark_pinyin_);
    std::swap(f_remark_pinyin_j_, other->f_remark_pinyin_j_);
    std::swap(f_add_time_, other->f_add_time_);
    std::swap(f_province_, other->f_province_);
    std::swap(f_city_, other->f_city_);
    std::swap(f_company_type_, other->f_company_type_);
    std::swap(f_job_type_, other->f_job_type_);
    std::swap(f_validation_add_time_, other->f_validation_add_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_friend_descriptor_;
  metadata.reflection = pb_user_t_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_recommend_friend::kFUinFieldNumber;
const int pb_user_t_recommend_friend::kFNameFieldNumber;
const int pb_user_t_recommend_friend::kFTypeFieldNumber;
const int pb_user_t_recommend_friend::kFWeightFieldNumber;
const int pb_user_t_recommend_friend::kFNamePinyinFieldNumber;
const int pb_user_t_recommend_friend::kFNamePinyinJFieldNumber;
const int pb_user_t_recommend_friend::kFCompanyTypeFieldNumber;
const int pb_user_t_recommend_friend::kFCompanyFieldNumber;
const int pb_user_t_recommend_friend::kFOtherInfoFieldNumber;
#endif  // !_MSC_VER

pb_user_t_recommend_friend::pb_user_t_recommend_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_recommend_friend)
}

void pb_user_t_recommend_friend::InitAsDefaultInstance() {
}

pb_user_t_recommend_friend::pb_user_t_recommend_friend(const pb_user_t_recommend_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_recommend_friend)
}

void pb_user_t_recommend_friend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_uin_ = 0u;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_type_ = 0u;
  f_weight_ = 0;
  f_name_pinyin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_pinyin_j_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_company_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_recommend_friend::~pb_user_t_recommend_friend() {
  // @@protoc_insertion_point(destructor:pb_user_t_recommend_friend)
  SharedDtor();
}

void pb_user_t_recommend_friend::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_;
  }
  if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_pinyin_j_;
  }
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_;
  }
  if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_other_info_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_recommend_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_recommend_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_recommend_friend_descriptor_;
}

const pb_user_t_recommend_friend& pb_user_t_recommend_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_recommend_friend* pb_user_t_recommend_friend::default_instance_ = NULL;

pb_user_t_recommend_friend* pb_user_t_recommend_friend::New() const {
  return new pb_user_t_recommend_friend;
}

void pb_user_t_recommend_friend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_recommend_friend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(f_uin_, f_type_);
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    f_weight_ = 0;
    if (has_f_name_pinyin()) {
      if (f_name_pinyin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_->clear();
      }
    }
    if (has_f_name_pinyin_j()) {
      if (f_name_pinyin_j_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_pinyin_j_->clear();
      }
    }
    if (has_f_company_type()) {
      if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_type_->clear();
      }
    }
    if (has_f_company()) {
      if (f_company_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_company_->clear();
      }
    }
  }
  if (has_f_other_info()) {
    if (f_other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      f_other_info_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_recommend_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_recommend_friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 f_uin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uin_)));
          set_has_f_uin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_name;
        break;
      }

      // optional string f_name = 2;
      case 2: {
        if (tag == 18) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_type;
        break;
      }

      // optional uint32 f_type = 3;
      case 3: {
        if (tag == 24) {
         parse_f_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_type_)));
          set_has_f_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_weight;
        break;
      }

      // optional int32 f_weight = 4;
      case 4: {
        if (tag == 32) {
         parse_f_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_weight_)));
          set_has_f_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_name_pinyin;
        break;
      }

      // optional string f_name_pinyin = 5;
      case 5: {
        if (tag == 42) {
         parse_f_name_pinyin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin().data(), this->f_name_pinyin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_name_pinyin_j;
        break;
      }

      // optional string f_name_pinyin_j = 6;
      case 6: {
        if (tag == 50) {
         parse_f_name_pinyin_j:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name_pinyin_j()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name_pinyin_j");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_f_company_type;
        break;
      }

      // optional string f_company_type = 7;
      case 7: {
        if (tag == 58) {
         parse_f_company_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company_type().data(), this->f_company_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_company;
        break;
      }

      // optional string f_company = 8;
      case 8: {
        if (tag == 66) {
         parse_f_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_company().data(), this->f_company().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_company");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_other_info;
        break;
      }

      // optional string f_other_info = 9;
      case 9: {
        if (tag == 74) {
         parse_f_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_other_info().data(), this->f_other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_other_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_recommend_friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_recommend_friend)
  return false;
#undef DO_
}

void pb_user_t_recommend_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_recommend_friend)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->f_uin(), output);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_name(), output);
  }

  // optional uint32 f_type = 3;
  if (has_f_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->f_type(), output);
  }

  // optional int32 f_weight = 4;
  if (has_f_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_weight(), output);
  }

  // optional string f_name_pinyin = 5;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->f_name_pinyin(), output);
  }

  // optional string f_name_pinyin_j = 6;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->f_name_pinyin_j(), output);
  }

  // optional string f_company_type = 7;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->f_company_type(), output);
  }

  // optional string f_company = 8;
  if (has_f_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company().data(), this->f_company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_company(), output);
  }

  // optional string f_other_info = 9;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->f_other_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_recommend_friend)
}

::google::protobuf::uint8* pb_user_t_recommend_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_recommend_friend)
  // optional uint32 f_uin = 1;
  if (has_f_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->f_uin(), target);
  }

  // optional string f_name = 2;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_name(), target);
  }

  // optional uint32 f_type = 3;
  if (has_f_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->f_type(), target);
  }

  // optional int32 f_weight = 4;
  if (has_f_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_weight(), target);
  }

  // optional string f_name_pinyin = 5;
  if (has_f_name_pinyin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin().data(), this->f_name_pinyin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->f_name_pinyin(), target);
  }

  // optional string f_name_pinyin_j = 6;
  if (has_f_name_pinyin_j()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name_pinyin_j().data(), this->f_name_pinyin_j().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name_pinyin_j");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->f_name_pinyin_j(), target);
  }

  // optional string f_company_type = 7;
  if (has_f_company_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company_type().data(), this->f_company_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->f_company_type(), target);
  }

  // optional string f_company = 8;
  if (has_f_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_company().data(), this->f_company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_company(), target);
  }

  // optional string f_other_info = 9;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_other_info().data(), this->f_other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_other_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->f_other_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_recommend_friend)
  return target;
}

int pb_user_t_recommend_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 f_uin = 1;
    if (has_f_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uin());
    }

    // optional string f_name = 2;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional uint32 f_type = 3;
    if (has_f_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_type());
    }

    // optional int32 f_weight = 4;
    if (has_f_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_weight());
    }

    // optional string f_name_pinyin = 5;
    if (has_f_name_pinyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin());
    }

    // optional string f_name_pinyin_j = 6;
    if (has_f_name_pinyin_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name_pinyin_j());
    }

    // optional string f_company_type = 7;
    if (has_f_company_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company_type());
    }

    // optional string f_company = 8;
    if (has_f_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_company());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string f_other_info = 9;
    if (has_f_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_other_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_recommend_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_recommend_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_recommend_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_recommend_friend::MergeFrom(const pb_user_t_recommend_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_uin()) {
      set_f_uin(from.f_uin());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_type()) {
      set_f_type(from.f_type());
    }
    if (from.has_f_weight()) {
      set_f_weight(from.f_weight());
    }
    if (from.has_f_name_pinyin()) {
      set_f_name_pinyin(from.f_name_pinyin());
    }
    if (from.has_f_name_pinyin_j()) {
      set_f_name_pinyin_j(from.f_name_pinyin_j());
    }
    if (from.has_f_company_type()) {
      set_f_company_type(from.f_company_type());
    }
    if (from.has_f_company()) {
      set_f_company(from.f_company());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f_other_info()) {
      set_f_other_info(from.f_other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_recommend_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_recommend_friend::CopyFrom(const pb_user_t_recommend_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_recommend_friend::IsInitialized() const {

  return true;
}

void pb_user_t_recommend_friend::Swap(pb_user_t_recommend_friend* other) {
  if (other != this) {
    std::swap(f_uin_, other->f_uin_);
    std::swap(f_name_, other->f_name_);
    std::swap(f_type_, other->f_type_);
    std::swap(f_weight_, other->f_weight_);
    std::swap(f_name_pinyin_, other->f_name_pinyin_);
    std::swap(f_name_pinyin_j_, other->f_name_pinyin_j_);
    std::swap(f_company_type_, other->f_company_type_);
    std::swap(f_company_, other->f_company_);
    std::swap(f_other_info_, other->f_other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_recommend_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_recommend_friend_descriptor_;
  metadata.reflection = pb_user_t_recommend_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_phone_address::kFNameFieldNumber;
const int pb_user_t_phone_address::kFPhoneFieldNumber;
#endif  // !_MSC_VER

pb_user_t_phone_address::pb_user_t_phone_address()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_phone_address)
}

void pb_user_t_phone_address::InitAsDefaultInstance() {
}

pb_user_t_phone_address::pb_user_t_phone_address(const pb_user_t_phone_address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_phone_address)
}

void pb_user_t_phone_address::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_phone_address::~pb_user_t_phone_address() {
  // @@protoc_insertion_point(destructor:pb_user_t_phone_address)
  SharedDtor();
}

void pb_user_t_phone_address::SharedDtor() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_phone_address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_phone_address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_phone_address_descriptor_;
}

const pb_user_t_phone_address& pb_user_t_phone_address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_phone_address* pb_user_t_phone_address::default_instance_ = NULL;

pb_user_t_phone_address* pb_user_t_phone_address::New() const {
  return new pb_user_t_phone_address;
}

void pb_user_t_phone_address::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
    if (has_f_phone()) {
      if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_phone_address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_phone_address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_phone;
        break;
      }

      // optional string f_phone = 2;
      case 2: {
        if (tag == 18) {
         parse_f_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_phone().data(), this->f_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_phone_address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_phone_address)
  return false;
#undef DO_
}

void pb_user_t_phone_address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_phone_address)
  // optional string f_name = 1;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_name(), output);
  }

  // optional string f_phone = 2;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_phone_address)
}

::google::protobuf::uint8* pb_user_t_phone_address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_phone_address)
  // optional string f_name = 1;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_name(), target);
  }

  // optional string f_phone = 2;
  if (has_f_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_phone().data(), this->f_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_phone_address)
  return target;
}

int pb_user_t_phone_address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_name = 1;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

    // optional string f_phone = 2;
    if (has_f_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_phone_address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_phone_address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_phone_address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_phone_address::MergeFrom(const pb_user_t_phone_address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
    if (from.has_f_phone()) {
      set_f_phone(from.f_phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_phone_address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_phone_address::CopyFrom(const pb_user_t_phone_address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_phone_address::IsInitialized() const {

  return true;
}

void pb_user_t_phone_address::Swap(pb_user_t_phone_address* other) {
  if (other != this) {
    std::swap(f_name_, other->f_name_);
    std::swap(f_phone_, other->f_phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_phone_address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_phone_address_descriptor_;
  metadata.reflection = pb_user_t_phone_address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_im_group::kFGroupIdFieldNumber;
const int pb_user_t_im_group::kFGroupFlagFieldNumber;
#endif  // !_MSC_VER

pb_user_t_im_group::pb_user_t_im_group()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_im_group)
}

void pb_user_t_im_group::InitAsDefaultInstance() {
}

pb_user_t_im_group::pb_user_t_im_group(const pb_user_t_im_group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_im_group)
}

void pb_user_t_im_group::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_im_group::~pb_user_t_im_group() {
  // @@protoc_insertion_point(destructor:pb_user_t_im_group)
  SharedDtor();
}

void pb_user_t_im_group::SharedDtor() {
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_im_group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_im_group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_im_group_descriptor_;
}

const pb_user_t_im_group& pb_user_t_im_group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_im_group* pb_user_t_im_group::default_instance_ = NULL;

pb_user_t_im_group* pb_user_t_im_group::New() const {
  return new pb_user_t_im_group;
}

void pb_user_t_im_group::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
    f_group_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_im_group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_im_group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_group_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_group_flag;
        break;
      }

      // optional int32 f_group_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_f_group_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_group_flag_)));
          set_has_f_group_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_im_group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_im_group)
  return false;
#undef DO_
}

void pb_user_t_im_group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_im_group)
  // optional string f_group_id = 1;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_group_id(), output);
  }

  // optional int32 f_group_flag = 2;
  if (has_f_group_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->f_group_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_im_group)
}

::google::protobuf::uint8* pb_user_t_im_group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_im_group)
  // optional string f_group_id = 1;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_group_id(), target);
  }

  // optional int32 f_group_flag = 2;
  if (has_f_group_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->f_group_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_im_group)
  return target;
}

int pb_user_t_im_group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_group_id = 1;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

    // optional int32 f_group_flag = 2;
    if (has_f_group_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_group_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_im_group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_im_group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_im_group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_im_group::MergeFrom(const pb_user_t_im_group& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
    if (from.has_f_group_flag()) {
      set_f_group_flag(from.f_group_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_im_group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_im_group::CopyFrom(const pb_user_t_im_group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_im_group::IsInitialized() const {

  return true;
}

void pb_user_t_im_group::Swap(pb_user_t_im_group* other) {
  if (other != this) {
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(f_group_flag_, other->f_group_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_im_group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_im_group_descriptor_;
  metadata.reflection = pb_user_t_im_group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_prj::kFPrjIdFieldNumber;
const int pb_user_t_prj::kFGroupIdFieldNumber;
#endif  // !_MSC_VER

pb_user_t_prj::pb_user_t_prj()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_prj)
}

void pb_user_t_prj::InitAsDefaultInstance() {
}

pb_user_t_prj::pb_user_t_prj(const pb_user_t_prj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_prj)
}

void pb_user_t_prj::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_prj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_prj::~pb_user_t_prj() {
  // @@protoc_insertion_point(destructor:pb_user_t_prj)
  SharedDtor();
}

void pb_user_t_prj::SharedDtor() {
  if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_prj_id_;
  }
  if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_group_id_;
  }
  if (this != default_instance_) {
  }
}

void pb_user_t_prj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_prj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_prj_descriptor_;
}

const pb_user_t_prj& pb_user_t_prj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_prj* pb_user_t_prj::default_instance_ = NULL;

pb_user_t_prj* pb_user_t_prj::New() const {
  return new pb_user_t_prj;
}

void pb_user_t_prj::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_f_prj_id()) {
      if (f_prj_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_prj_id_->clear();
      }
    }
    if (has_f_group_id()) {
      if (f_group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_group_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_prj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_prj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_prj_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_prj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_prj_id().data(), this->f_prj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_prj_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_group_id;
        break;
      }

      // optional string f_group_id = 2;
      case 2: {
        if (tag == 18) {
         parse_f_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_group_id().data(), this->f_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_prj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_prj)
  return false;
#undef DO_
}

void pb_user_t_prj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_prj)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_prj_id(), output);
  }

  // optional string f_group_id = 2;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->f_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_prj)
}

::google::protobuf::uint8* pb_user_t_prj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_prj)
  // optional string f_prj_id = 1;
  if (has_f_prj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_prj_id().data(), this->f_prj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_prj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_prj_id(), target);
  }

  // optional string f_group_id = 2;
  if (has_f_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_group_id().data(), this->f_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->f_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_prj)
  return target;
}

int pb_user_t_prj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_prj_id = 1;
    if (has_f_prj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_prj_id());
    }

    // optional string f_group_id = 2;
    if (has_f_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_prj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_prj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_prj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_prj::MergeFrom(const pb_user_t_prj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_prj_id()) {
      set_f_prj_id(from.f_prj_id());
    }
    if (from.has_f_group_id()) {
      set_f_group_id(from.f_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_prj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_prj::CopyFrom(const pb_user_t_prj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_prj::IsInitialized() const {

  return true;
}

void pb_user_t_prj::Swap(pb_user_t_prj* other) {
  if (other != this) {
    std::swap(f_prj_id_, other->f_prj_id_);
    std::swap(f_group_id_, other->f_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_prj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_prj_descriptor_;
  metadata.reflection = pb_user_t_prj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_collection::kFCollectionIdFieldNumber;
const int pb_user_t_collection::kFMsgFieldNumber;
const int pb_user_t_collection::kFTimeFieldNumber;
const int pb_user_t_collection::kFTypeFieldNumber;
#endif  // !_MSC_VER

pb_user_t_collection::pb_user_t_collection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_collection)
}

void pb_user_t_collection::InitAsDefaultInstance() {
  f_msg_ = const_cast< ::pb_im_t_msg_item*>(&::pb_im_t_msg_item::default_instance());
}

pb_user_t_collection::pb_user_t_collection(const pb_user_t_collection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_collection)
}

void pb_user_t_collection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  f_collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_msg_ = NULL;
  f_time_ = 0;
  f_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_collection::~pb_user_t_collection() {
  // @@protoc_insertion_point(destructor:pb_user_t_collection)
  SharedDtor();
}

void pb_user_t_collection::SharedDtor() {
  if (f_collection_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_collection_id_;
  }
  if (this != default_instance_) {
    delete f_msg_;
  }
}

void pb_user_t_collection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_collection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_collection_descriptor_;
}

const pb_user_t_collection& pb_user_t_collection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_collection* pb_user_t_collection::default_instance_ = NULL;

pb_user_t_collection* pb_user_t_collection::New() const {
  return new pb_user_t_collection;
}

void pb_user_t_collection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_collection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(f_time_, f_type_);
    if (has_f_collection_id()) {
      if (f_collection_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_collection_id_->clear();
      }
    }
    if (has_f_msg()) {
      if (f_msg_ != NULL) f_msg_->::pb_im_t_msg_item::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_collection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_collection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string f_collection_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_collection_id().data(), this->f_collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_collection_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_msg;
        break;
      }

      // optional .pb_im_t_msg_item f_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_f_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_time;
        break;
      }

      // optional int32 f_time = 3;
      case 3: {
        if (tag == 24) {
         parse_f_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_time_)));
          set_has_f_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_type;
        break;
      }

      // optional int32 f_type = 4;
      case 4: {
        if (tag == 32) {
         parse_f_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_type_)));
          set_has_f_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_collection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_collection)
  return false;
#undef DO_
}

void pb_user_t_collection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_collection)
  // optional string f_collection_id = 1;
  if (has_f_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_collection_id().data(), this->f_collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_collection_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->f_collection_id(), output);
  }

  // optional .pb_im_t_msg_item f_msg = 2;
  if (has_f_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_msg(), output);
  }

  // optional int32 f_time = 3;
  if (has_f_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_time(), output);
  }

  // optional int32 f_type = 4;
  if (has_f_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->f_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_collection)
}

::google::protobuf::uint8* pb_user_t_collection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_collection)
  // optional string f_collection_id = 1;
  if (has_f_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_collection_id().data(), this->f_collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_collection_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->f_collection_id(), target);
  }

  // optional .pb_im_t_msg_item f_msg = 2;
  if (has_f_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_msg(), target);
  }

  // optional int32 f_time = 3;
  if (has_f_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_time(), target);
  }

  // optional int32 f_type = 4;
  if (has_f_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->f_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_collection)
  return target;
}

int pb_user_t_collection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string f_collection_id = 1;
    if (has_f_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_collection_id());
    }

    // optional .pb_im_t_msg_item f_msg = 2;
    if (has_f_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_msg());
    }

    // optional int32 f_time = 3;
    if (has_f_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_time());
    }

    // optional int32 f_type = 4;
    if (has_f_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_collection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_collection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_collection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_collection::MergeFrom(const pb_user_t_collection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_collection_id()) {
      set_f_collection_id(from.f_collection_id());
    }
    if (from.has_f_msg()) {
      mutable_f_msg()->::pb_im_t_msg_item::MergeFrom(from.f_msg());
    }
    if (from.has_f_time()) {
      set_f_time(from.f_time());
    }
    if (from.has_f_type()) {
      set_f_type(from.f_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_collection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_collection::CopyFrom(const pb_user_t_collection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_collection::IsInitialized() const {

  return true;
}

void pb_user_t_collection::Swap(pb_user_t_collection* other) {
  if (other != this) {
    std::swap(f_collection_id_, other->f_collection_id_);
    std::swap(f_msg_, other->f_msg_);
    std::swap(f_time_, other->f_time_);
    std::swap(f_type_, other->f_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_collection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_collection_descriptor_;
  metadata.reflection = pb_user_t_collection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_collection_list::kFUpdateTypeFieldNumber;
const int pb_user_t_collection_list::kFCollectionsFieldNumber;
const int pb_user_t_collection_list::kFCollectionsCntFieldNumber;
#endif  // !_MSC_VER

pb_user_t_collection_list::pb_user_t_collection_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_collection_list)
}

void pb_user_t_collection_list::InitAsDefaultInstance() {
}

pb_user_t_collection_list::pb_user_t_collection_list(const pb_user_t_collection_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_collection_list)
}

void pb_user_t_collection_list::SharedCtor() {
  _cached_size_ = 0;
  f_update_type_ = 0;
  f_collections_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_collection_list::~pb_user_t_collection_list() {
  // @@protoc_insertion_point(destructor:pb_user_t_collection_list)
  SharedDtor();
}

void pb_user_t_collection_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pb_user_t_collection_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_collection_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_collection_list_descriptor_;
}

const pb_user_t_collection_list& pb_user_t_collection_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_collection_list* pb_user_t_collection_list::default_instance_ = NULL;

pb_user_t_collection_list* pb_user_t_collection_list::New() const {
  return new pb_user_t_collection_list;
}

void pb_user_t_collection_list::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pb_user_t_collection_list*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(f_update_type_, f_collections_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  f_collections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_collection_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_collection_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 f_update_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_update_type_)));
          set_has_f_update_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_collections;
        break;
      }

      // repeated .pb_user_t_collection f_collections = 2;
      case 2: {
        if (tag == 18) {
         parse_f_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_collections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_collections;
        if (input->ExpectTag(24)) goto parse_f_collections_cnt;
        break;
      }

      // optional int32 f_collections_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_f_collections_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &f_collections_cnt_)));
          set_has_f_collections_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_collection_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_collection_list)
  return false;
#undef DO_
}

void pb_user_t_collection_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_collection_list)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->f_update_type(), output);
  }

  // repeated .pb_user_t_collection f_collections = 2;
  for (int i = 0; i < this->f_collections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_collections(i), output);
  }

  // optional int32 f_collections_cnt = 3;
  if (has_f_collections_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->f_collections_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_collection_list)
}

::google::protobuf::uint8* pb_user_t_collection_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_collection_list)
  // optional int32 f_update_type = 1;
  if (has_f_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->f_update_type(), target);
  }

  // repeated .pb_user_t_collection f_collections = 2;
  for (int i = 0; i < this->f_collections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_collections(i), target);
  }

  // optional int32 f_collections_cnt = 3;
  if (has_f_collections_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->f_collections_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_collection_list)
  return target;
}

int pb_user_t_collection_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 f_update_type = 1;
    if (has_f_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_update_type());
    }

    // optional int32 f_collections_cnt = 3;
    if (has_f_collections_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->f_collections_cnt());
    }

  }
  // repeated .pb_user_t_collection f_collections = 2;
  total_size += 1 * this->f_collections_size();
  for (int i = 0; i < this->f_collections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_collections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_collection_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_collection_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_collection_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_collection_list::MergeFrom(const pb_user_t_collection_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_collections_.MergeFrom(from.f_collections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_update_type()) {
      set_f_update_type(from.f_update_type());
    }
    if (from.has_f_collections_cnt()) {
      set_f_collections_cnt(from.f_collections_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_collection_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_collection_list::CopyFrom(const pb_user_t_collection_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_collection_list::IsInitialized() const {

  return true;
}

void pb_user_t_collection_list::Swap(pb_user_t_collection_list* other) {
  if (other != this) {
    std::swap(f_update_type_, other->f_update_type_);
    f_collections_.Swap(&other->f_collections_);
    std::swap(f_collections_cnt_, other->f_collections_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_collection_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_collection_list_descriptor_;
  metadata.reflection = pb_user_t_collection_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pb_user_t_data::kFInfoFieldNumber;
const int pb_user_t_data::kFExtraFieldNumber;
const int pb_user_t_data::kFFriendListFieldNumber;
const int pb_user_t_data::kFFriendValidationListFieldNumber;
const int pb_user_t_data::kFFriendRecommendListFieldNumber;
const int pb_user_t_data::kFImGroupFieldNumber;
const int pb_user_t_data::kFOtherInfoFieldNumber;
const int pb_user_t_data::kFPrjListFieldNumber;
const int pb_user_t_data::kFRecommendFriendsFieldNumber;
const int pb_user_t_data::kFPrjsFieldNumber;
#endif  // !_MSC_VER

pb_user_t_data::pb_user_t_data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_user_t_data)
}

void pb_user_t_data::InitAsDefaultInstance() {
  f_info_ = const_cast< ::pb_user_t_info*>(&::pb_user_t_info::default_instance());
  f_extra_ = const_cast< ::pb_user_t_extra*>(&::pb_user_t_extra::default_instance());
  f_other_info_ = const_cast< ::pb_user_t_info*>(&::pb_user_t_info::default_instance());
}

pb_user_t_data::pb_user_t_data(const pb_user_t_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_user_t_data)
}

void pb_user_t_data::SharedCtor() {
  _cached_size_ = 0;
  f_info_ = NULL;
  f_extra_ = NULL;
  f_other_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pb_user_t_data::~pb_user_t_data() {
  // @@protoc_insertion_point(destructor:pb_user_t_data)
  SharedDtor();
}

void pb_user_t_data::SharedDtor() {
  if (this != default_instance_) {
    delete f_info_;
    delete f_extra_;
    delete f_other_info_;
  }
}

void pb_user_t_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pb_user_t_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pb_user_t_data_descriptor_;
}

const pb_user_t_data& pb_user_t_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fgsk_2eproto();
  return *default_instance_;
}

pb_user_t_data* pb_user_t_data::default_instance_ = NULL;

pb_user_t_data* pb_user_t_data::New() const {
  return new pb_user_t_data;
}

void pb_user_t_data::Clear() {
  if (_has_bits_[0 / 32] & 67) {
    if (has_f_info()) {
      if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
    }
    if (has_f_extra()) {
      if (f_extra_ != NULL) f_extra_->::pb_user_t_extra::Clear();
    }
    if (has_f_other_info()) {
      if (f_other_info_ != NULL) f_other_info_->::pb_user_t_info::Clear();
    }
  }
  f_friend_list_.Clear();
  f_friend_validation_list_.Clear();
  f_friend_recommend_list_.Clear();
  f_im_group_.Clear();
  f_prj_list_.Clear();
  f_recommend_friends_.Clear();
  f_prjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pb_user_t_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_user_t_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb_user_t_info f_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_f_extra;
        break;
      }

      // optional .pb_user_t_extra f_extra = 2;
      case 2: {
        if (tag == 18) {
         parse_f_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_extra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_friend_list;
        break;
      }

      // repeated .pb_user_t_friend f_friend_list = 3;
      case 3: {
        if (tag == 26) {
         parse_f_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_friend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_f_friend_list;
        if (input->ExpectTag(34)) goto parse_f_friend_validation_list;
        break;
      }

      // repeated .pb_user_t_friend f_friend_validation_list = 4;
      case 4: {
        if (tag == 34) {
         parse_f_friend_validation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_friend_validation_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_f_friend_validation_list;
        if (input->ExpectTag(42)) goto parse_f_friend_recommend_list;
        break;
      }

      // repeated .pb_user_t_friend f_friend_recommend_list = 5;
      case 5: {
        if (tag == 42) {
         parse_f_friend_recommend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_friend_recommend_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_f_friend_recommend_list;
        if (input->ExpectTag(50)) goto parse_f_im_group;
        break;
      }

      // repeated .pb_user_t_im_group f_im_group = 6;
      case 6: {
        if (tag == 50) {
         parse_f_im_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_im_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_f_im_group;
        if (input->ExpectTag(58)) goto parse_f_other_info;
        break;
      }

      // optional .pb_user_t_info f_other_info = 7;
      case 7: {
        if (tag == 58) {
         parse_f_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_other_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_prj_list;
        break;
      }

      // repeated .pb_user_t_prj f_prj_list = 8;
      case 8: {
        if (tag == 66) {
         parse_f_prj_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prj_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_prj_list;
        if (input->ExpectTag(74)) goto parse_f_recommend_friends;
        break;
      }

      // repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
      case 9: {
        if (tag == 74) {
         parse_f_recommend_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_recommend_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_f_recommend_friends;
        if (input->ExpectTag(82)) goto parse_f_prjs;
        break;
      }

      // repeated .pb_prj_t_recommend_info f_prjs = 10;
      case 10: {
        if (tag == 82) {
         parse_f_prjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_f_prjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_f_prjs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_user_t_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_user_t_data)
  return false;
#undef DO_
}

void pb_user_t_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_user_t_data)
  // optional .pb_user_t_info f_info = 1;
  if (has_f_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->f_info(), output);
  }

  // optional .pb_user_t_extra f_extra = 2;
  if (has_f_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->f_extra(), output);
  }

  // repeated .pb_user_t_friend f_friend_list = 3;
  for (int i = 0; i < this->f_friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->f_friend_list(i), output);
  }

  // repeated .pb_user_t_friend f_friend_validation_list = 4;
  for (int i = 0; i < this->f_friend_validation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->f_friend_validation_list(i), output);
  }

  // repeated .pb_user_t_friend f_friend_recommend_list = 5;
  for (int i = 0; i < this->f_friend_recommend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_friend_recommend_list(i), output);
  }

  // repeated .pb_user_t_im_group f_im_group = 6;
  for (int i = 0; i < this->f_im_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->f_im_group(i), output);
  }

  // optional .pb_user_t_info f_other_info = 7;
  if (has_f_other_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->f_other_info(), output);
  }

  // repeated .pb_user_t_prj f_prj_list = 8;
  for (int i = 0; i < this->f_prj_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->f_prj_list(i), output);
  }

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->f_recommend_friends(i), output);
  }

  // repeated .pb_prj_t_recommend_info f_prjs = 10;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f_prjs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_user_t_data)
}

::google::protobuf::uint8* pb_user_t_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_user_t_data)
  // optional .pb_user_t_info f_info = 1;
  if (has_f_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->f_info(), target);
  }

  // optional .pb_user_t_extra f_extra = 2;
  if (has_f_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->f_extra(), target);
  }

  // repeated .pb_user_t_friend f_friend_list = 3;
  for (int i = 0; i < this->f_friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->f_friend_list(i), target);
  }

  // repeated .pb_user_t_friend f_friend_validation_list = 4;
  for (int i = 0; i < this->f_friend_validation_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->f_friend_validation_list(i), target);
  }

  // repeated .pb_user_t_friend f_friend_recommend_list = 5;
  for (int i = 0; i < this->f_friend_recommend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_friend_recommend_list(i), target);
  }

  // repeated .pb_user_t_im_group f_im_group = 6;
  for (int i = 0; i < this->f_im_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->f_im_group(i), target);
  }

  // optional .pb_user_t_info f_other_info = 7;
  if (has_f_other_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->f_other_info(), target);
  }

  // repeated .pb_user_t_prj f_prj_list = 8;
  for (int i = 0; i < this->f_prj_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->f_prj_list(i), target);
  }

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->f_recommend_friends(i), target);
  }

  // repeated .pb_prj_t_recommend_info f_prjs = 10;
  for (int i = 0; i < this->f_prjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f_prjs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_user_t_data)
  return target;
}

int pb_user_t_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb_user_t_info f_info = 1;
    if (has_f_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_info());
    }

    // optional .pb_user_t_extra f_extra = 2;
    if (has_f_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_extra());
    }

    // optional .pb_user_t_info f_other_info = 7;
    if (has_f_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_other_info());
    }

  }
  // repeated .pb_user_t_friend f_friend_list = 3;
  total_size += 1 * this->f_friend_list_size();
  for (int i = 0; i < this->f_friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_friend_list(i));
  }

  // repeated .pb_user_t_friend f_friend_validation_list = 4;
  total_size += 1 * this->f_friend_validation_list_size();
  for (int i = 0; i < this->f_friend_validation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_friend_validation_list(i));
  }

  // repeated .pb_user_t_friend f_friend_recommend_list = 5;
  total_size += 1 * this->f_friend_recommend_list_size();
  for (int i = 0; i < this->f_friend_recommend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_friend_recommend_list(i));
  }

  // repeated .pb_user_t_im_group f_im_group = 6;
  total_size += 1 * this->f_im_group_size();
  for (int i = 0; i < this->f_im_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_im_group(i));
  }

  // repeated .pb_user_t_prj f_prj_list = 8;
  total_size += 1 * this->f_prj_list_size();
  for (int i = 0; i < this->f_prj_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prj_list(i));
  }

  // repeated .pb_user_t_recommend_friend f_recommend_friends = 9;
  total_size += 1 * this->f_recommend_friends_size();
  for (int i = 0; i < this->f_recommend_friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_recommend_friends(i));
  }

  // repeated .pb_prj_t_recommend_info f_prjs = 10;
  total_size += 1 * this->f_prjs_size();
  for (int i = 0; i < this->f_prjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->f_prjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pb_user_t_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pb_user_t_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pb_user_t_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pb_user_t_data::MergeFrom(const pb_user_t_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  f_friend_list_.MergeFrom(from.f_friend_list_);
  f_friend_validation_list_.MergeFrom(from.f_friend_validation_list_);
  f_friend_recommend_list_.MergeFrom(from.f_friend_recommend_list_);
  f_im_group_.MergeFrom(from.f_im_group_);
  f_prj_list_.MergeFrom(from.f_prj_list_);
  f_recommend_friends_.MergeFrom(from.f_recommend_friends_);
  f_prjs_.MergeFrom(from.f_prjs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_f_info()) {
      mutable_f_info()->::pb_user_t_info::MergeFrom(from.f_info());
    }
    if (from.has_f_extra()) {
      mutable_f_extra()->::pb_user_t_extra::MergeFrom(from.f_extra());
    }
    if (from.has_f_other_info()) {
      mutable_f_other_info()->::pb_user_t_info::MergeFrom(from.f_other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pb_user_t_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_user_t_data::CopyFrom(const pb_user_t_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_user_t_data::IsInitialized() const {

  return true;
}

void pb_user_t_data::Swap(pb_user_t_data* other) {
  if (other != this) {
    std::swap(f_info_, other->f_info_);
    std::swap(f_extra_, other->f_extra_);
    f_friend_list_.Swap(&other->f_friend_list_);
    f_friend_validation_list_.Swap(&other->f_friend_validation_list_);
    f_friend_recommend_list_.Swap(&other->f_friend_recommend_list_);
    f_im_group_.Swap(&other->f_im_group_);
    std::swap(f_other_info_, other->f_other_info_);
    f_prj_list_.Swap(&other->f_prj_list_);
    f_recommend_friends_.Swap(&other->f_recommend_friends_);
    f_prjs_.Swap(&other->f_prjs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pb_user_t_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pb_user_t_data_descriptor_;
  metadata.reflection = pb_user_t_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
