// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_gsk.proto

#ifndef PROTOBUF_pb_5fgsk_2eproto__INCLUDED
#define PROTOBUF_pb_5fgsk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fgsk_2eproto();
void protobuf_AssignDesc_pb_5fgsk_2eproto();
void protobuf_ShutdownFile_pb_5fgsk_2eproto();

class pb_clt_t_user;
class pb_user_t_info;
class pb_user_t_user;

// ===================================================================

class pb_clt_t_user : public ::google::protobuf::Message {
 public:
  pb_clt_t_user();
  virtual ~pb_clt_t_user();

  pb_clt_t_user(const pb_clt_t_user& from);

  inline pb_clt_t_user& operator=(const pb_clt_t_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_clt_t_user& default_instance();

  void Swap(pb_clt_t_user* other);

  // implements Message ----------------------------------------------

  pb_clt_t_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_clt_t_user& from);
  void MergeFrom(const pb_clt_t_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_user_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_user_t_info& f_info() const;
  inline ::pb_user_t_info* mutable_f_info();
  inline ::pb_user_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_user_t_info* f_info);

  // @@protoc_insertion_point(class_scope:pb_clt_t_user)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_user_t_info* f_info_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_clt_t_user* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_info : public ::google::protobuf::Message {
 public:
  pb_user_t_info();
  virtual ~pb_user_t_info();

  pb_user_t_info(const pb_user_t_info& from);

  inline pb_user_t_info& operator=(const pb_user_t_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_info& default_instance();

  void Swap(pb_user_t_info* other);

  // implements Message ----------------------------------------------

  pb_user_t_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_info& from);
  void MergeFrom(const pb_user_t_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 f_uin = 1;
  inline bool has_f_uin() const;
  inline void clear_f_uin();
  static const int kFUinFieldNumber = 1;
  inline ::google::protobuf::uint32 f_uin() const;
  inline void set_f_uin(::google::protobuf::uint32 value);

  // optional string f_province = 2;
  inline bool has_f_province() const;
  inline void clear_f_province();
  static const int kFProvinceFieldNumber = 2;
  inline const ::std::string& f_province() const;
  inline void set_f_province(const ::std::string& value);
  inline void set_f_province(const char* value);
  inline void set_f_province(const char* value, size_t size);
  inline ::std::string* mutable_f_province();
  inline ::std::string* release_f_province();
  inline void set_allocated_f_province(::std::string* f_province);

  // optional string f_city = 3;
  inline bool has_f_city() const;
  inline void clear_f_city();
  static const int kFCityFieldNumber = 3;
  inline const ::std::string& f_city() const;
  inline void set_f_city(const ::std::string& value);
  inline void set_f_city(const char* value);
  inline void set_f_city(const char* value, size_t size);
  inline ::std::string* mutable_f_city();
  inline ::std::string* release_f_city();
  inline void set_allocated_f_city(::std::string* f_city);

  // optional string f_phone = 4;
  inline bool has_f_phone() const;
  inline void clear_f_phone();
  static const int kFPhoneFieldNumber = 4;
  inline const ::std::string& f_phone() const;
  inline void set_f_phone(const ::std::string& value);
  inline void set_f_phone(const char* value);
  inline void set_f_phone(const char* value, size_t size);
  inline ::std::string* mutable_f_phone();
  inline ::std::string* release_f_phone();
  inline void set_allocated_f_phone(::std::string* f_phone);

  // optional string f_name = 5;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 5;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // optional string f_company_type = 6;
  inline bool has_f_company_type() const;
  inline void clear_f_company_type();
  static const int kFCompanyTypeFieldNumber = 6;
  inline const ::std::string& f_company_type() const;
  inline void set_f_company_type(const ::std::string& value);
  inline void set_f_company_type(const char* value);
  inline void set_f_company_type(const char* value, size_t size);
  inline ::std::string* mutable_f_company_type();
  inline ::std::string* release_f_company_type();
  inline void set_allocated_f_company_type(::std::string* f_company_type);

  // optional string f_years_of_working = 7;
  inline bool has_f_years_of_working() const;
  inline void clear_f_years_of_working();
  static const int kFYearsOfWorkingFieldNumber = 7;
  inline const ::std::string& f_years_of_working() const;
  inline void set_f_years_of_working(const ::std::string& value);
  inline void set_f_years_of_working(const char* value);
  inline void set_f_years_of_working(const char* value, size_t size);
  inline ::std::string* mutable_f_years_of_working();
  inline ::std::string* release_f_years_of_working();
  inline void set_allocated_f_years_of_working(::std::string* f_years_of_working);

  // optional string f_job_type = 8;
  inline bool has_f_job_type() const;
  inline void clear_f_job_type();
  static const int kFJobTypeFieldNumber = 8;
  inline const ::std::string& f_job_type() const;
  inline void set_f_job_type(const ::std::string& value);
  inline void set_f_job_type(const char* value);
  inline void set_f_job_type(const char* value, size_t size);
  inline ::std::string* mutable_f_job_type();
  inline ::std::string* release_f_job_type();
  inline void set_allocated_f_job_type(::std::string* f_job_type);

  // optional string f_job_title = 9;
  inline bool has_f_job_title() const;
  inline void clear_f_job_title();
  static const int kFJobTitleFieldNumber = 9;
  inline const ::std::string& f_job_title() const;
  inline void set_f_job_title(const ::std::string& value);
  inline void set_f_job_title(const char* value);
  inline void set_f_job_title(const char* value, size_t size);
  inline ::std::string* mutable_f_job_title();
  inline ::std::string* release_f_job_title();
  inline void set_allocated_f_job_title(::std::string* f_job_title);

  // optional int32 f_auto_inc_id = 10;
  inline bool has_f_auto_inc_id() const;
  inline void clear_f_auto_inc_id();
  static const int kFAutoIncIdFieldNumber = 10;
  inline ::google::protobuf::int32 f_auto_inc_id() const;
  inline void set_f_auto_inc_id(::google::protobuf::int32 value);

  // optional int32 f_last_req_time = 11;
  inline bool has_f_last_req_time() const;
  inline void clear_f_last_req_time();
  static const int kFLastReqTimeFieldNumber = 11;
  inline ::google::protobuf::int32 f_last_req_time() const;
  inline void set_f_last_req_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb_user_t_info)
 private:
  inline void set_has_f_uin();
  inline void clear_has_f_uin();
  inline void set_has_f_province();
  inline void clear_has_f_province();
  inline void set_has_f_city();
  inline void clear_has_f_city();
  inline void set_has_f_phone();
  inline void clear_has_f_phone();
  inline void set_has_f_name();
  inline void clear_has_f_name();
  inline void set_has_f_company_type();
  inline void clear_has_f_company_type();
  inline void set_has_f_years_of_working();
  inline void clear_has_f_years_of_working();
  inline void set_has_f_job_type();
  inline void clear_has_f_job_type();
  inline void set_has_f_job_title();
  inline void clear_has_f_job_title();
  inline void set_has_f_auto_inc_id();
  inline void clear_has_f_auto_inc_id();
  inline void set_has_f_last_req_time();
  inline void clear_has_f_last_req_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* f_province_;
  ::std::string* f_city_;
  ::std::string* f_phone_;
  ::std::string* f_name_;
  ::google::protobuf::uint32 f_uin_;
  ::google::protobuf::int32 f_auto_inc_id_;
  ::std::string* f_company_type_;
  ::std::string* f_years_of_working_;
  ::std::string* f_job_type_;
  ::std::string* f_job_title_;
  ::google::protobuf::int32 f_last_req_time_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_info* default_instance_;
};
// -------------------------------------------------------------------

class pb_user_t_user : public ::google::protobuf::Message {
 public:
  pb_user_t_user();
  virtual ~pb_user_t_user();

  pb_user_t_user(const pb_user_t_user& from);

  inline pb_user_t_user& operator=(const pb_user_t_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_user_t_user& default_instance();

  void Swap(pb_user_t_user* other);

  // implements Message ----------------------------------------------

  pb_user_t_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_user_t_user& from);
  void MergeFrom(const pb_user_t_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb_user_t_info f_info = 1;
  inline bool has_f_info() const;
  inline void clear_f_info();
  static const int kFInfoFieldNumber = 1;
  inline const ::pb_user_t_info& f_info() const;
  inline ::pb_user_t_info* mutable_f_info();
  inline ::pb_user_t_info* release_f_info();
  inline void set_allocated_f_info(::pb_user_t_info* f_info);

  // @@protoc_insertion_point(class_scope:pb_user_t_user)
 private:
  inline void set_has_f_info();
  inline void clear_has_f_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb_user_t_info* f_info_;
  friend void  protobuf_AddDesc_pb_5fgsk_2eproto();
  friend void protobuf_AssignDesc_pb_5fgsk_2eproto();
  friend void protobuf_ShutdownFile_pb_5fgsk_2eproto();

  void InitAsDefaultInstance();
  static pb_user_t_user* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_clt_t_user

// optional .pb_user_t_info f_info = 1;
inline bool pb_clt_t_user::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_clt_t_user::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_clt_t_user::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_clt_t_user::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_user_t_info& pb_clt_t_user::f_info() const {
  // @@protoc_insertion_point(field_get:pb_clt_t_user.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_clt_t_user.f_info)
  return f_info_;
}
inline ::pb_user_t_info* pb_clt_t_user::release_f_info() {
  clear_has_f_info();
  ::pb_user_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_clt_t_user::set_allocated_f_info(::pb_user_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_clt_t_user.f_info)
}

// -------------------------------------------------------------------

// pb_user_t_info

// optional uint32 f_uin = 1;
inline bool pb_user_t_info::has_f_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_info::set_has_f_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_info::clear_has_f_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_info::clear_f_uin() {
  f_uin_ = 0u;
  clear_has_f_uin();
}
inline ::google::protobuf::uint32 pb_user_t_info::f_uin() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_uin)
  return f_uin_;
}
inline void pb_user_t_info::set_f_uin(::google::protobuf::uint32 value) {
  set_has_f_uin();
  f_uin_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_uin)
}

// optional string f_province = 2;
inline bool pb_user_t_info::has_f_province() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_user_t_info::set_has_f_province() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_user_t_info::clear_has_f_province() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_user_t_info::clear_f_province() {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_->clear();
  }
  clear_has_f_province();
}
inline const ::std::string& pb_user_t_info::f_province() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_province)
  return *f_province_;
}
inline void pb_user_t_info::set_f_province(const ::std::string& value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_province)
}
inline void pb_user_t_info::set_f_province(const char* value) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_province)
}
inline void pb_user_t_info::set_f_province(const char* value, size_t size) {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  f_province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_province)
}
inline ::std::string* pb_user_t_info::mutable_f_province() {
  set_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_province)
  return f_province_;
}
inline ::std::string* pb_user_t_info::release_f_province() {
  clear_has_f_province();
  if (f_province_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_province_;
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_province(::std::string* f_province) {
  if (f_province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_province_;
  }
  if (f_province) {
    set_has_f_province();
    f_province_ = f_province;
  } else {
    clear_has_f_province();
    f_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_province)
}

// optional string f_city = 3;
inline bool pb_user_t_info::has_f_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pb_user_t_info::set_has_f_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pb_user_t_info::clear_has_f_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pb_user_t_info::clear_f_city() {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_->clear();
  }
  clear_has_f_city();
}
inline const ::std::string& pb_user_t_info::f_city() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_city)
  return *f_city_;
}
inline void pb_user_t_info::set_f_city(const ::std::string& value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_city)
}
inline void pb_user_t_info::set_f_city(const char* value) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_city)
}
inline void pb_user_t_info::set_f_city(const char* value, size_t size) {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  f_city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_city)
}
inline ::std::string* pb_user_t_info::mutable_f_city() {
  set_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_city)
  return f_city_;
}
inline ::std::string* pb_user_t_info::release_f_city() {
  clear_has_f_city();
  if (f_city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_city_;
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_city(::std::string* f_city) {
  if (f_city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_city_;
  }
  if (f_city) {
    set_has_f_city();
    f_city_ = f_city;
  } else {
    clear_has_f_city();
    f_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_city)
}

// optional string f_phone = 4;
inline bool pb_user_t_info::has_f_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_user_t_info::set_has_f_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_user_t_info::clear_has_f_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_user_t_info::clear_f_phone() {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_->clear();
  }
  clear_has_f_phone();
}
inline const ::std::string& pb_user_t_info::f_phone() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_phone)
  return *f_phone_;
}
inline void pb_user_t_info::set_f_phone(const ::std::string& value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_phone)
}
inline void pb_user_t_info::set_f_phone(const char* value) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_phone)
}
inline void pb_user_t_info::set_f_phone(const char* value, size_t size) {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  f_phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_phone)
}
inline ::std::string* pb_user_t_info::mutable_f_phone() {
  set_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_phone)
  return f_phone_;
}
inline ::std::string* pb_user_t_info::release_f_phone() {
  clear_has_f_phone();
  if (f_phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_phone_;
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_phone(::std::string* f_phone) {
  if (f_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_phone_;
  }
  if (f_phone) {
    set_has_f_phone();
    f_phone_ = f_phone;
  } else {
    clear_has_f_phone();
    f_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_phone)
}

// optional string f_name = 5;
inline bool pb_user_t_info::has_f_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pb_user_t_info::set_has_f_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pb_user_t_info::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pb_user_t_info::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& pb_user_t_info::f_name() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_name)
  return *f_name_;
}
inline void pb_user_t_info::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_name)
}
inline void pb_user_t_info::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_name)
}
inline void pb_user_t_info::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_name)
}
inline ::std::string* pb_user_t_info::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_name)
  return f_name_;
}
inline ::std::string* pb_user_t_info::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_name)
}

// optional string f_company_type = 6;
inline bool pb_user_t_info::has_f_company_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pb_user_t_info::set_has_f_company_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pb_user_t_info::clear_has_f_company_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pb_user_t_info::clear_f_company_type() {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_->clear();
  }
  clear_has_f_company_type();
}
inline const ::std::string& pb_user_t_info::f_company_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_company_type)
  return *f_company_type_;
}
inline void pb_user_t_info::set_f_company_type(const ::std::string& value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_company_type)
}
inline void pb_user_t_info::set_f_company_type(const char* value) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_company_type)
}
inline void pb_user_t_info::set_f_company_type(const char* value, size_t size) {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  f_company_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_company_type)
}
inline ::std::string* pb_user_t_info::mutable_f_company_type() {
  set_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_company_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_company_type)
  return f_company_type_;
}
inline ::std::string* pb_user_t_info::release_f_company_type() {
  clear_has_f_company_type();
  if (f_company_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_company_type_;
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_company_type(::std::string* f_company_type) {
  if (f_company_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_company_type_;
  }
  if (f_company_type) {
    set_has_f_company_type();
    f_company_type_ = f_company_type;
  } else {
    clear_has_f_company_type();
    f_company_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_company_type)
}

// optional string f_years_of_working = 7;
inline bool pb_user_t_info::has_f_years_of_working() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pb_user_t_info::set_has_f_years_of_working() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pb_user_t_info::clear_has_f_years_of_working() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pb_user_t_info::clear_f_years_of_working() {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_->clear();
  }
  clear_has_f_years_of_working();
}
inline const ::std::string& pb_user_t_info::f_years_of_working() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_years_of_working)
  return *f_years_of_working_;
}
inline void pb_user_t_info::set_f_years_of_working(const ::std::string& value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_years_of_working)
}
inline void pb_user_t_info::set_f_years_of_working(const char* value) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_years_of_working)
}
inline void pb_user_t_info::set_f_years_of_working(const char* value, size_t size) {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  f_years_of_working_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_years_of_working)
}
inline ::std::string* pb_user_t_info::mutable_f_years_of_working() {
  set_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_years_of_working_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_years_of_working)
  return f_years_of_working_;
}
inline ::std::string* pb_user_t_info::release_f_years_of_working() {
  clear_has_f_years_of_working();
  if (f_years_of_working_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_years_of_working_;
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_years_of_working(::std::string* f_years_of_working) {
  if (f_years_of_working_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_years_of_working_;
  }
  if (f_years_of_working) {
    set_has_f_years_of_working();
    f_years_of_working_ = f_years_of_working;
  } else {
    clear_has_f_years_of_working();
    f_years_of_working_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_years_of_working)
}

// optional string f_job_type = 8;
inline bool pb_user_t_info::has_f_job_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pb_user_t_info::set_has_f_job_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pb_user_t_info::clear_has_f_job_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pb_user_t_info::clear_f_job_type() {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_->clear();
  }
  clear_has_f_job_type();
}
inline const ::std::string& pb_user_t_info::f_job_type() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_job_type)
  return *f_job_type_;
}
inline void pb_user_t_info::set_f_job_type(const ::std::string& value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_job_type)
}
inline void pb_user_t_info::set_f_job_type(const char* value) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_job_type)
}
inline void pb_user_t_info::set_f_job_type(const char* value, size_t size) {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  f_job_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_job_type)
}
inline ::std::string* pb_user_t_info::mutable_f_job_type() {
  set_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_job_type)
  return f_job_type_;
}
inline ::std::string* pb_user_t_info::release_f_job_type() {
  clear_has_f_job_type();
  if (f_job_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_type_;
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_job_type(::std::string* f_job_type) {
  if (f_job_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_type_;
  }
  if (f_job_type) {
    set_has_f_job_type();
    f_job_type_ = f_job_type;
  } else {
    clear_has_f_job_type();
    f_job_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_job_type)
}

// optional string f_job_title = 9;
inline bool pb_user_t_info::has_f_job_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pb_user_t_info::set_has_f_job_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pb_user_t_info::clear_has_f_job_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pb_user_t_info::clear_f_job_title() {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_->clear();
  }
  clear_has_f_job_title();
}
inline const ::std::string& pb_user_t_info::f_job_title() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_job_title)
  return *f_job_title_;
}
inline void pb_user_t_info::set_f_job_title(const ::std::string& value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_job_title)
}
inline void pb_user_t_info::set_f_job_title(const char* value) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_user_t_info.f_job_title)
}
inline void pb_user_t_info::set_f_job_title(const char* value, size_t size) {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  f_job_title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_user_t_info.f_job_title)
}
inline ::std::string* pb_user_t_info::mutable_f_job_title() {
  set_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_job_title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_user_t_info.f_job_title)
  return f_job_title_;
}
inline ::std::string* pb_user_t_info::release_f_job_title() {
  clear_has_f_job_title();
  if (f_job_title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_job_title_;
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_user_t_info::set_allocated_f_job_title(::std::string* f_job_title) {
  if (f_job_title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_job_title_;
  }
  if (f_job_title) {
    set_has_f_job_title();
    f_job_title_ = f_job_title;
  } else {
    clear_has_f_job_title();
    f_job_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_info.f_job_title)
}

// optional int32 f_auto_inc_id = 10;
inline bool pb_user_t_info::has_f_auto_inc_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pb_user_t_info::set_has_f_auto_inc_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pb_user_t_info::clear_has_f_auto_inc_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pb_user_t_info::clear_f_auto_inc_id() {
  f_auto_inc_id_ = 0;
  clear_has_f_auto_inc_id();
}
inline ::google::protobuf::int32 pb_user_t_info::f_auto_inc_id() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_auto_inc_id)
  return f_auto_inc_id_;
}
inline void pb_user_t_info::set_f_auto_inc_id(::google::protobuf::int32 value) {
  set_has_f_auto_inc_id();
  f_auto_inc_id_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_auto_inc_id)
}

// optional int32 f_last_req_time = 11;
inline bool pb_user_t_info::has_f_last_req_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pb_user_t_info::set_has_f_last_req_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pb_user_t_info::clear_has_f_last_req_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pb_user_t_info::clear_f_last_req_time() {
  f_last_req_time_ = 0;
  clear_has_f_last_req_time();
}
inline ::google::protobuf::int32 pb_user_t_info::f_last_req_time() const {
  // @@protoc_insertion_point(field_get:pb_user_t_info.f_last_req_time)
  return f_last_req_time_;
}
inline void pb_user_t_info::set_f_last_req_time(::google::protobuf::int32 value) {
  set_has_f_last_req_time();
  f_last_req_time_ = value;
  // @@protoc_insertion_point(field_set:pb_user_t_info.f_last_req_time)
}

// -------------------------------------------------------------------

// pb_user_t_user

// optional .pb_user_t_info f_info = 1;
inline bool pb_user_t_user::has_f_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_user_t_user::set_has_f_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_user_t_user::clear_has_f_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_user_t_user::clear_f_info() {
  if (f_info_ != NULL) f_info_->::pb_user_t_info::Clear();
  clear_has_f_info();
}
inline const ::pb_user_t_info& pb_user_t_user::f_info() const {
  // @@protoc_insertion_point(field_get:pb_user_t_user.f_info)
  return f_info_ != NULL ? *f_info_ : *default_instance_->f_info_;
}
inline ::pb_user_t_info* pb_user_t_user::mutable_f_info() {
  set_has_f_info();
  if (f_info_ == NULL) f_info_ = new ::pb_user_t_info;
  // @@protoc_insertion_point(field_mutable:pb_user_t_user.f_info)
  return f_info_;
}
inline ::pb_user_t_info* pb_user_t_user::release_f_info() {
  clear_has_f_info();
  ::pb_user_t_info* temp = f_info_;
  f_info_ = NULL;
  return temp;
}
inline void pb_user_t_user::set_allocated_f_info(::pb_user_t_info* f_info) {
  delete f_info_;
  f_info_ = f_info;
  if (f_info) {
    set_has_f_info();
  } else {
    clear_has_f_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_user_t_user.f_info)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fgsk_2eproto__INCLUDED
